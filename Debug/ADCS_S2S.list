
ADCS_S2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a0  0800fcf0  0800fcf0  0001fcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e90  08010e90  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08010e90  08010e90  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010e90  08010e90  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e90  08010e90  00020e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e94  08010e94  00020e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08010e98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001e8  0801107c  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0801107c  000305fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b141  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035fc  00000000  00000000  0004b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0004e950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0004fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab68  00000000  00000000  00050a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152f3  00000000  00000000  0006b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f45b  00000000  00000000  0008088b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f0  00000000  00000000  0010fd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800fcd8 	.word	0x0800fcd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800fcd8 	.word	0x0800fcd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	460c      	mov	r4, r1
 80011cc:	4605      	mov	r5, r0
 80011ce:	4621      	mov	r1, r4
 80011d0:	4628      	mov	r0, r5
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	f7ff fbf1 	bl	80009bc <__aeabi_dcmplt>
 80011da:	b928      	cbnz	r0, 80011e8 <__aeabi_d2lz+0x20>
 80011dc:	4628      	mov	r0, r5
 80011de:	4621      	mov	r1, r4
 80011e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e4:	f000 b80a 	b.w	80011fc <__aeabi_d2ulz>
 80011e8:	4628      	mov	r0, r5
 80011ea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ee:	f000 f805 	bl	80011fc <__aeabi_d2ulz>
 80011f2:	4240      	negs	r0, r0
 80011f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	bf00      	nop

080011fc <__aeabi_d2ulz>:
 80011fc:	b5d0      	push	{r4, r6, r7, lr}
 80011fe:	2200      	movs	r2, #0
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__aeabi_d2ulz+0x34>)
 8001202:	4606      	mov	r6, r0
 8001204:	460f      	mov	r7, r1
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	f7ff fc3d 	bl	8000a88 <__aeabi_d2uiz>
 800120e:	4604      	mov	r4, r0
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	2200      	movs	r2, #0
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <__aeabi_d2ulz+0x38>)
 8001218:	f7ff f95e 	bl	80004d8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4630      	mov	r0, r6
 8001222:	4639      	mov	r1, r7
 8001224:	f7fe ffa0 	bl	8000168 <__aeabi_dsub>
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2uiz>
 800122c:	4621      	mov	r1, r4
 800122e:	bdd0      	pop	{r4, r6, r7, pc}
 8001230:	3df00000 	.word	0x3df00000
 8001234:	41f00000 	.word	0x41f00000

08001238 <myDebug>:
 *      Author: Dell
 */

#include "ADCS_Debug.h"

void myDebug(const char *fmt, ...) {
 8001238:	b40f      	push	{r0, r1, r2, r3}
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	2164      	movs	r1, #100	; 0x64
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <myDebug+0x40>)
 800124e:	f009 fb05 	bl	800a85c <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <myDebug+0x40>)
 8001254:	f000 f814 	bl	8001280 <bufferSize>
 8001258:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	4905      	ldr	r1, [pc, #20]	; (8001278 <myDebug+0x40>)
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <myDebug+0x44>)
 8001266:	f006 fcb1 	bl	8007bcc <HAL_UART_Transmit>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001274:	b004      	add	sp, #16
 8001276:	4770      	bx	lr
 8001278:	20000204 	.word	0x20000204
 800127c:	20000430 	.word	0x20000430

08001280 <bufferSize>:

int bufferSize(char *buff) {
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 800128c:	e002      	b.n	8001294 <bufferSize+0x14>
		i++;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3301      	adds	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f6      	bne.n	800128e <bufferSize+0xe>
	return i;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <CalTorque>:
/*
 * B-dot algorithm implementation to calculate required magnetic moment
 *
 */
void CalTorque(imu_filter pfilt_att, lsm9ds1_t *pBdata,
		sat_att_combined pcombined_sat_att) {
 80012b0:	b084      	sub	sp, #16
 80012b2:	b5b0      	push	{r4, r5, r7, lr}
 80012b4:	b092      	sub	sp, #72	; 0x48
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80012bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float sp = sinf(pcombined_sat_att.roll * DEG2RAD);
 80012c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8af 	bl	8000428 <__aeabi_f2d>
 80012ca:	a379      	add	r3, pc, #484	; (adr r3, 80014b0 <CalTorque+0x200>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f902 	bl	80004d8 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fbf4 	bl	8000ac8 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00c f90a 	bl	800d4fc <sinf>
 80012e8:	6478      	str	r0, [r7, #68]	; 0x44
	float cp = cosf(pcombined_sat_att.roll * DEG2RAD);
 80012ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f89a 	bl	8000428 <__aeabi_f2d>
 80012f4:	a36e      	add	r3, pc, #440	; (adr r3, 80014b0 <CalTorque+0x200>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f8ed 	bl	80004d8 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fbdf 	bl	8000ac8 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	4618      	mov	r0, r3
 800130e:	f00c f8bd 	bl	800d48c <cosf>
 8001312:	6438      	str	r0, [r7, #64]	; 0x40
	float st = sinf(pcombined_sat_att.pitch * DEG2RAD);
 8001314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f885 	bl	8000428 <__aeabi_f2d>
 800131e:	a364      	add	r3, pc, #400	; (adr r3, 80014b0 <CalTorque+0x200>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f8d8 	bl	80004d8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbca 	bl	8000ac8 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	4618      	mov	r0, r3
 8001338:	f00c f8e0 	bl	800d4fc <sinf>
 800133c:	63f8      	str	r0, [r7, #60]	; 0x3c
	float ct = cosf(pcombined_sat_att.pitch * DEG2RAD);
 800133e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f870 	bl	8000428 <__aeabi_f2d>
 8001348:	a359      	add	r3, pc, #356	; (adr r3, 80014b0 <CalTorque+0x200>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f8c3 	bl	80004d8 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fbb5 	bl	8000ac8 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f00c f893 	bl	800d48c <cosf>
 8001366:	63b8      	str	r0, [r7, #56]	; 0x38

	// Compute angular velocities
	float omega_x = pfilt_att.p_rps
 8001368:	6e7c      	ldr	r4, [r7, #100]	; 0x64
			+ st * (pfilt_att.q_rps * sp + pfilt_att.r_rps * cp);
 800136a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800136c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd08 	bl	8000d84 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	461d      	mov	r5, r3
 8001378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800137a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fd01 	bl	8000d84 <__aeabi_fmul>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	4628      	mov	r0, r5
 8001388:	f7ff fbf4 	bl	8000b74 <__addsf3>
 800138c:	4603      	mov	r3, r0
 800138e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fcf7 	bl	8000d84 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
	float omega_x = pfilt_att.p_rps
 8001398:	4619      	mov	r1, r3
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fbea 	bl	8000b74 <__addsf3>
 80013a0:	4603      	mov	r3, r0
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
	float omega_y = pfilt_att.q_rps * cp - pfilt_att.r_rps * sp;
 80013a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fceb 	bl	8000d84 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461c      	mov	r4, r3
 80013b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fce4 	bl	8000d84 <__aeabi_fmul>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff fbd5 	bl	8000b70 <__aeabi_fsub>
 80013c6:	4603      	mov	r3, r0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	float omega_z = (pfilt_att.q_rps * sp + pfilt_att.r_rps * cp) / ct;
 80013ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fcd8 	bl	8000d84 <__aeabi_fmul>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461c      	mov	r4, r3
 80013d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fcd1 	bl	8000d84 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fbc4 	bl	8000b74 <__addsf3>
 80013ec:	4603      	mov	r3, r0
 80013ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fd7b 	bl	8000eec <__aeabi_fdiv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	float Wx = omega_x;
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
	float Wy = omega_y;
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
	float Wz = omega_z;
 8001402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001404:	623b      	str	r3, [r7, #32]

	myDebug(" wx = %.2f\r\n", Wx);
 8001406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001408:	f7ff f80e 	bl	8000428 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4829      	ldr	r0, [pc, #164]	; (80014b8 <CalTorque+0x208>)
 8001412:	f7ff ff11 	bl	8001238 <myDebug>
	myDebug(" wy = %.2f\r\n", Wy);
 8001416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001418:	f7ff f806 	bl	8000428 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4826      	ldr	r0, [pc, #152]	; (80014bc <CalTorque+0x20c>)
 8001422:	f7ff ff09 	bl	8001238 <myDebug>
	myDebug(" wz = %.2f\r\n", Wz);
 8001426:	6a38      	ldr	r0, [r7, #32]
 8001428:	f7fe fffe 	bl	8000428 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4823      	ldr	r0, [pc, #140]	; (80014c0 <CalTorque+0x210>)
 8001432:	f7ff ff01 	bl	8001238 <myDebug>

	angular_error[0] = desired_Wx - Wx;
 8001436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001438:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800143c:	f7ff fb98 	bl	8000b70 <__aeabi_fsub>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <CalTorque+0x214>)
 8001446:	601a      	str	r2, [r3, #0]
	angular_error[1] = desired_Wy - Wy;
 8001448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800144a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800144e:	f7ff fb8f 	bl	8000b70 <__aeabi_fsub>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <CalTorque+0x214>)
 8001458:	605a      	str	r2, [r3, #4]
	angular_error[2] = desired_Wz - Wz;
 800145a:	6a39      	ldr	r1, [r7, #32]
 800145c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001460:	f7ff fb86 	bl	8000b70 <__aeabi_fsub>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <CalTorque+0x214>)
 800146a:	609a      	str	r2, [r3, #8]

	if (fabs(angular_error[0]) > ERROR_THRESHOLD
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <CalTorque+0x214>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001474:	4914      	ldr	r1, [pc, #80]	; (80014c8 <CalTorque+0x218>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe40 	bl	80010fc <__aeabi_fcmpgt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d124      	bne.n	80014cc <CalTorque+0x21c>
			|| fabs(angular_error[1]) > ERROR_THRESHOLD
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <CalTorque+0x214>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800148a:	490f      	ldr	r1, [pc, #60]	; (80014c8 <CalTorque+0x218>)
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe35 	bl	80010fc <__aeabi_fcmpgt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d119      	bne.n	80014cc <CalTorque+0x21c>
			|| fabs(angular_error[2]) > ERROR_THRESHOLD) {
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <CalTorque+0x214>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a0:	4909      	ldr	r1, [pc, #36]	; (80014c8 <CalTorque+0x218>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe2a 	bl	80010fc <__aeabi_fcmpgt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10e      	bne.n	80014cc <CalTorque+0x21c>
			SET_PWM_REVERSE_Z(fabs(Dz));
		} else {
			SET_PWM_FORWARD_Z((int) Dz);
		}
	}
}
 80014ae:	e0eb      	b.n	8001688 <CalTorque+0x3d8>
 80014b0:	a226e211 	.word	0xa226e211
 80014b4:	3f91df46 	.word	0x3f91df46
 80014b8:	0800fd4c 	.word	0x0800fd4c
 80014bc:	0800fd5c 	.word	0x0800fd5c
 80014c0:	0800fd6c 	.word	0x0800fd6c
 80014c4:	20000280 	.word	0x20000280
 80014c8:	3e4ccccd 	.word	0x3e4ccccd
		float Bx = pfilt_att.mx_ut;
 80014cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014ce:	61fb      	str	r3, [r7, #28]
		float By = pfilt_att.my_ut;
 80014d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014d2:	61bb      	str	r3, [r7, #24]
		float Bz = pfilt_att.mz_ut;
 80014d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014d6:	617b      	str	r3, [r7, #20]
		myDebug(" Bx = %.2f\r\n", Bx);
 80014d8:	69f8      	ldr	r0, [r7, #28]
 80014da:	f7fe ffa5 	bl	8000428 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4871      	ldr	r0, [pc, #452]	; (80016a8 <CalTorque+0x3f8>)
 80014e4:	f7ff fea8 	bl	8001238 <myDebug>
		myDebug(" By = %.2f\r\n", By);
 80014e8:	69b8      	ldr	r0, [r7, #24]
 80014ea:	f7fe ff9d 	bl	8000428 <__aeabi_f2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	486e      	ldr	r0, [pc, #440]	; (80016ac <CalTorque+0x3fc>)
 80014f4:	f7ff fea0 	bl	8001238 <myDebug>
		myDebug(" Bz = %.2f\r\n", Bz);
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f7fe ff95 	bl	8000428 <__aeabi_f2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	486b      	ldr	r0, [pc, #428]	; (80016b0 <CalTorque+0x400>)
 8001504:	f7ff fe98 	bl	8001238 <myDebug>
		float dBy_dt = Wz * Bx - Wx * Bz;
 8001508:	69f9      	ldr	r1, [r7, #28]
 800150a:	6a38      	ldr	r0, [r7, #32]
 800150c:	f7ff fc3a 	bl	8000d84 <__aeabi_fmul>
 8001510:	4603      	mov	r3, r0
 8001512:	461c      	mov	r4, r3
 8001514:	6979      	ldr	r1, [r7, #20]
 8001516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001518:	f7ff fc34 	bl	8000d84 <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	4619      	mov	r1, r3
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff fb25 	bl	8000b70 <__aeabi_fsub>
 8001526:	4603      	mov	r3, r0
 8001528:	613b      	str	r3, [r7, #16]
		float dBz_dt = Wx * By - Wy * Bx;
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800152e:	f7ff fc29 	bl	8000d84 <__aeabi_fmul>
 8001532:	4603      	mov	r3, r0
 8001534:	461c      	mov	r4, r3
 8001536:	69f9      	ldr	r1, [r7, #28]
 8001538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800153a:	f7ff fc23 	bl	8000d84 <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fb14 	bl	8000b70 <__aeabi_fsub>
 8001548:	4603      	mov	r3, r0
 800154a:	60fb      	str	r3, [r7, #12]
		myDebug("Desired Magnetic Moment\n");
 800154c:	4859      	ldr	r0, [pc, #356]	; (80016b4 <CalTorque+0x404>)
 800154e:	f7ff fe73 	bl	8001238 <myDebug>
		float MomentY = -Kp * dBy_dt;
 8001552:	4959      	ldr	r1, [pc, #356]	; (80016b8 <CalTorque+0x408>)
 8001554:	6938      	ldr	r0, [r7, #16]
 8001556:	f7ff fc15 	bl	8000d84 <__aeabi_fmul>
 800155a:	4603      	mov	r3, r0
 800155c:	60bb      	str	r3, [r7, #8]
		float MomentZ = -Kp * dBz_dt;
 800155e:	4956      	ldr	r1, [pc, #344]	; (80016b8 <CalTorque+0x408>)
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fc0f 	bl	8000d84 <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	607b      	str	r3, [r7, #4]
		myDebug(" MomentY = %.2f\r\n", MomentY);
 800156a:	68b8      	ldr	r0, [r7, #8]
 800156c:	f7fe ff5c 	bl	8000428 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4851      	ldr	r0, [pc, #324]	; (80016bc <CalTorque+0x40c>)
 8001576:	f7ff fe5f 	bl	8001238 <myDebug>
		myDebug(" MomentZ = %.2f\r\n", MomentZ);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe ff54 	bl	8000428 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	484e      	ldr	r0, [pc, #312]	; (80016c0 <CalTorque+0x410>)
 8001586:	f7ff fe57 	bl	8001238 <myDebug>
		myDebug(" MAX_MOMENT_MTQ = %.2f\r\n", MAX_MOMENT_MTQ);
 800158a:	a343      	add	r3, pc, #268	; (adr r3, 8001698 <CalTorque+0x3e8>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	484c      	ldr	r0, [pc, #304]	; (80016c4 <CalTorque+0x414>)
 8001592:	f7ff fe51 	bl	8001238 <myDebug>
		myDebug(" MAX_DUTY_CYCLE = %.2f\r\n", MAX_DUTY_CYCLE);
 8001596:	a342      	add	r3, pc, #264	; (adr r3, 80016a0 <CalTorque+0x3f0>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	484a      	ldr	r0, [pc, #296]	; (80016c8 <CalTorque+0x418>)
 800159e:	f7ff fe4b 	bl	8001238 <myDebug>
		MomentY = 0.2;
 80015a2:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <CalTorque+0x41c>)
 80015a4:	60bb      	str	r3, [r7, #8]
		Dy = (MomentY / MAX_MOMENT_MTQ) * MAX_DUTY_CYCLE;
 80015a6:	4949      	ldr	r1, [pc, #292]	; (80016cc <CalTorque+0x41c>)
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f7ff fc9f 	bl	8000eec <__aeabi_fdiv>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4947      	ldr	r1, [pc, #284]	; (80016d0 <CalTorque+0x420>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fbe6 	bl	8000d84 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b45      	ldr	r3, [pc, #276]	; (80016d4 <CalTorque+0x424>)
 80015be:	601a      	str	r2, [r3, #0]
		Dz = (MomentZ / MAX_MOMENT_MTQ) * MAX_DUTY_CYCLE;
 80015c0:	4942      	ldr	r1, [pc, #264]	; (80016cc <CalTorque+0x41c>)
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fc92 	bl	8000eec <__aeabi_fdiv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4941      	ldr	r1, [pc, #260]	; (80016d0 <CalTorque+0x420>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fbd9 	bl	8000d84 <__aeabi_fmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <CalTorque+0x428>)
 80015d8:	601a      	str	r2, [r3, #0]
		myDebug("Required Duty Cycle\n");
 80015da:	4840      	ldr	r0, [pc, #256]	; (80016dc <CalTorque+0x42c>)
 80015dc:	f7ff fe2c 	bl	8001238 <myDebug>
		myDebug(" Dy = %.2f\r\n", Dy);
 80015e0:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <CalTorque+0x424>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	483c      	ldr	r0, [pc, #240]	; (80016e0 <CalTorque+0x430>)
 80015f0:	f7ff fe22 	bl	8001238 <myDebug>
		myDebug(" Dz = %.2f\r\n", Dz);
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <CalTorque+0x428>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff15 	bl	8000428 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4838      	ldr	r0, [pc, #224]	; (80016e4 <CalTorque+0x434>)
 8001604:	f7ff fe18 	bl	8001238 <myDebug>
		myDebug("----- MTQ enabled !!! -----\n");
 8001608:	4837      	ldr	r0, [pc, #220]	; (80016e8 <CalTorque+0x438>)
 800160a:	f7ff fe15 	bl	8001238 <myDebug>
		HAL_TIM_Base_Start_IT(&htim1);
 800160e:	4837      	ldr	r0, [pc, #220]	; (80016ec <CalTorque+0x43c>)
 8001610:	f005 fb5c 	bl	8006ccc <HAL_TIM_Base_Start_IT>
		if (MomentY < 0) {
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f7ff fd51 	bl	80010c0 <__aeabi_fcmplt>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <CalTorque+0x38c>
			SET_PWM_REVERSE_Y(fabs(Dy));
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <CalTorque+0x424>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fdab 	bl	8001188 <__aeabi_f2uiz>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f88b 	bl	8001750 <SET_PWM_REVERSE_Y>
 800163a:	e008      	b.n	800164e <CalTorque+0x39e>
			SET_PWM_FORWARD_Y((int) Dy);
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <CalTorque+0x424>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd7b 	bl	800113c <__aeabi_f2iz>
 8001646:	4603      	mov	r3, r0
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f869 	bl	8001720 <SET_PWM_FORWARD_Y>
		if (MomentZ < 0) {
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fd34 	bl	80010c0 <__aeabi_fcmplt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <CalTorque+0x3c6>
			SET_PWM_REVERSE_Z(fabs(Dz));
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <CalTorque+0x428>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd8e 	bl	8001188 <__aeabi_f2uiz>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f89e 	bl	80017b0 <SET_PWM_REVERSE_Z>
}
 8001674:	e008      	b.n	8001688 <CalTorque+0x3d8>
			SET_PWM_FORWARD_Z((int) Dz);
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <CalTorque+0x428>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fd5e 	bl	800113c <__aeabi_f2iz>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f87c 	bl	8001780 <SET_PWM_FORWARD_Z>
}
 8001688:	bf00      	nop
 800168a:	3748      	adds	r7, #72	; 0x48
 800168c:	46bd      	mov	sp, r7
 800168e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001692:	b004      	add	sp, #16
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	a0000000 	.word	0xa0000000
 800169c:	3fc99999 	.word	0x3fc99999
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40dc2000 	.word	0x40dc2000
 80016a8:	0800fd7c 	.word	0x0800fd7c
 80016ac:	0800fd8c 	.word	0x0800fd8c
 80016b0:	0800fd9c 	.word	0x0800fd9c
 80016b4:	0800fdac 	.word	0x0800fdac
 80016b8:	bdcccccd 	.word	0xbdcccccd
 80016bc:	0800fdc8 	.word	0x0800fdc8
 80016c0:	0800fddc 	.word	0x0800fddc
 80016c4:	0800fdf0 	.word	0x0800fdf0
 80016c8:	0800fe0c 	.word	0x0800fe0c
 80016cc:	3e4ccccd 	.word	0x3e4ccccd
 80016d0:	46e10000 	.word	0x46e10000
 80016d4:	2000028c 	.word	0x2000028c
 80016d8:	2000029c 	.word	0x2000029c
 80016dc:	0800fe28 	.word	0x0800fe28
 80016e0:	0800fe40 	.word	0x0800fe40
 80016e4:	0800fe50 	.word	0x0800fe50
 80016e8:	0800fe60 	.word	0x0800fe60
 80016ec:	200004bc 	.word	0x200004bc

080016f0 <MTQ_Enable>:

// Function to enable MTQ_OCP
void MTQ_Enable() {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MTQEN_5V_Pin, SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2108      	movs	r1, #8
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <MTQ_Enable+0x14>)
 80016fa:	f004 f8dd 	bl	80058b8 <HAL_GPIO_WritePin>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40010c00 	.word	0x40010c00

08001708 <MTQ_Disable>:

// Function to disable MTQ_OCP
void MTQ_Disable() {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MTQEN_5V_Pin, RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2108      	movs	r1, #8
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <MTQ_Disable+0x14>)
 8001712:	f004 f8d1 	bl	80058b8 <HAL_GPIO_WritePin>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40010c00 	.word	0x40010c00

08001720 <SET_PWM_FORWARD_Y>:

// Function to set PWM duty cycle for Y-axis MTQ
void SET_PWM_FORWARD_Y(uint32_t Dy) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

	TIM3->CCR1 = Dy;
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <SET_PWM_FORWARD_Y+0x28>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = 0;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SET_PWM_FORWARD_Y+0x28>)
 8001730:	2200      	movs	r2, #0
 8001732:	639a      	str	r2, [r3, #56]	; 0x38
	MTQ_Enable();
 8001734:	f7ff ffdc 	bl	80016f0 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001738:	2100      	movs	r1, #0
 800173a:	4804      	ldr	r0, [pc, #16]	; (800174c <SET_PWM_FORWARD_Y+0x2c>)
 800173c:	f005 fb96 	bl	8006e6c <HAL_TIM_PWM_Start>

}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40000400 	.word	0x40000400
 800174c:	200003d8 	.word	0x200003d8

08001750 <SET_PWM_REVERSE_Y>:

void SET_PWM_REVERSE_Y(uint32_t Dy) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

	TIM3->CCR1 = 0;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <SET_PWM_REVERSE_Y+0x28>)
 800175a:	2200      	movs	r2, #0
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = Dy;
 800175e:	4a06      	ldr	r2, [pc, #24]	; (8001778 <SET_PWM_REVERSE_Y+0x28>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6393      	str	r3, [r2, #56]	; 0x38
	MTQ_Enable();
 8001764:	f7ff ffc4 	bl	80016f0 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001768:	2104      	movs	r1, #4
 800176a:	4804      	ldr	r0, [pc, #16]	; (800177c <SET_PWM_REVERSE_Y+0x2c>)
 800176c:	f005 fb7e 	bl	8006e6c <HAL_TIM_PWM_Start>

}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40000400 	.word	0x40000400
 800177c:	200003d8 	.word	0x200003d8

08001780 <SET_PWM_FORWARD_Z>:

void SET_PWM_FORWARD_Z(uint32_t Dz) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

	TIM4->CCR3 = 0;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <SET_PWM_FORWARD_Z+0x28>)
 800178a:	2200      	movs	r2, #0
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = Dz;
 800178e:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <SET_PWM_FORWARD_Z+0x28>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
	MTQ_Enable();
 8001794:	f7ff ffac 	bl	80016f0 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001798:	210c      	movs	r1, #12
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <SET_PWM_FORWARD_Z+0x2c>)
 800179c:	f005 fb66 	bl	8006e6c <HAL_TIM_PWM_Start>

}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40000800 	.word	0x40000800
 80017ac:	20000314 	.word	0x20000314

080017b0 <SET_PWM_REVERSE_Z>:

void SET_PWM_REVERSE_Z(uint32_t Dz) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

	TIM4->CCR3 = Dz;
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <SET_PWM_REVERSE_Z+0x28>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM4->CCR4 = 0;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SET_PWM_REVERSE_Z+0x28>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
	MTQ_Enable();
 80017c4:	f7ff ff94 	bl	80016f0 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80017c8:	2108      	movs	r1, #8
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <SET_PWM_REVERSE_Z+0x2c>)
 80017cc:	f005 fb4e 	bl	8006e6c <HAL_TIM_PWM_Start>

}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40000800 	.word	0x40000800
 80017dc:	20000314 	.word	0x20000314

080017e0 <EKF_Init>:
 *      Author: Dell
 */

#include "EKF.h"

void EKF_Init(Eekf *ekf_1, float P[2], float Q[2], float R[3]) {
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]

	/* Reset state estimates */
	ekf_1->phi_r = 0.0f;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = 0.0f;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]

	/* Initialise state covariance matrix */
	ekf_1->P[0][0] = P[0];
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = 0.0f;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = 0.0f;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = P[1];
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	615a      	str	r2, [r3, #20]

	/* Set process and measurement noise */
	ekf_1->Q[0] = Q[0];
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	619a      	str	r2, [r3, #24]
	ekf_1->Q[1] = Q[1];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	61da      	str	r2, [r3, #28]

	ekf_1->R[0] = R[0];
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	621a      	str	r2, [r3, #32]
	ekf_1->R[1] = R[1];
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
	ekf_1->R[2] = R[2];
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	629a      	str	r2, [r3, #40]	; 0x28

}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <EKF_Predict>:

void EKF_Predict(Eekf *ekf_1, float p_rps, float q_rps, float r_rps,
		float sampleTime_s) {
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b093      	sub	sp, #76	; 0x4c
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]

	/* Pre-compute trigonometric quantities */
	float sp = sinf(ekf_1->phi_r);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f00b fe4a 	bl	800d4fc <sinf>
 8001868:	6478      	str	r0, [r7, #68]	; 0x44
	float cp = cosf(ekf_1->phi_r);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f00b fe0c 	bl	800d48c <cosf>
 8001874:	6438      	str	r0, [r7, #64]	; 0x40
	float tt = tanf(ekf_1->theta_r);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f00b fe74 	bl	800d568 <tanf>
 8001880:	63f8      	str	r0, [r7, #60]	; 0x3c

	/* Compute state transition function dx/dt = f(x,u) */
	float dphidt = p_rps + tt * (q_rps * sp + r_rps * cp);
 8001882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fa7d 	bl	8000d84 <__aeabi_fmul>
 800188a:	4603      	mov	r3, r0
 800188c:	461c      	mov	r4, r3
 800188e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f7ff fa77 	bl	8000d84 <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff f96a 	bl	8000b74 <__addsf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa6d 	bl	8000d84 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	f7ff f960 	bl	8000b74 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
	float dthetadt = q_rps * cp - r_rps * sp;
 80018b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fa62 	bl	8000d84 <__aeabi_fmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461c      	mov	r4, r3
 80018c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	f7ff fa5c 	bl	8000d84 <__aeabi_fmul>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff f94d 	bl	8000b70 <__aeabi_fsub>
 80018d6:	4603      	mov	r3, r0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Update state estimates (x(n+1) = x(n) + T * dx/dt) */
	ekf_1->phi_r += sampleTime_s * dphidt;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681c      	ldr	r4, [r3, #0]
 80018de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80018e2:	f7ff fa4f 	bl	8000d84 <__aeabi_fmul>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff f942 	bl	8000b74 <__addsf3>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r += sampleTime_s * dthetadt;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685c      	ldr	r4, [r3, #4]
 80018fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001900:	f7ff fa40 	bl	8000d84 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	4619      	mov	r1, r3
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff f933 	bl	8000b74 <__addsf3>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	605a      	str	r2, [r3, #4]

	/* Re-compute trigonometric quantities */
	sp = sinf(ekf_1->phi_r);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f00b fdee 	bl	800d4fc <sinf>
 8001920:	6478      	str	r0, [r7, #68]	; 0x44
	cp = cosf(ekf_1->phi_r);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f00b fdb0 	bl	800d48c <cosf>
 800192c:	6438      	str	r0, [r7, #64]	; 0x40
	tt = tanf(ekf_1->theta_r);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f00b fe18 	bl	800d568 <tanf>
 8001938:	63f8      	str	r0, [r7, #60]	; 0x3c
	float ctInv = 1.0f / cosf(ekf_1->theta_r);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4618      	mov	r0, r3
 8001940:	f00b fda4 	bl	800d48c <cosf>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800194c:	f7ff face 	bl	8000eec <__aeabi_fdiv>
 8001950:	4603      	mov	r3, r0
 8001952:	633b      	str	r3, [r7, #48]	; 0x30

	/* Compute Jacobian of state transition function A(x,u) = df(x,u)/dx */
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 8001954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fa14 	bl	8000d84 <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	461c      	mov	r4, r3
 8001960:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f7ff fa0e 	bl	8000d84 <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	4619      	mov	r1, r3
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff f8ff 	bl	8000b70 <__aeabi_fsub>
 8001972:	4603      	mov	r3, r0
 8001974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fa04 	bl	8000d84 <__aeabi_fmul>
 800197c:	4603      	mov	r3, r0
 800197e:	623b      	str	r3, [r7, #32]
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 8001980:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff f9fe 	bl	8000d84 <__aeabi_fmul>
 8001988:	4603      	mov	r3, r0
 800198a:	461c      	mov	r4, r3
 800198c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800198e:	6838      	ldr	r0, [r7, #0]
 8001990:	f7ff f9f8 	bl	8000d84 <__aeabi_fmul>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff f8eb 	bl	8000b74 <__addsf3>
 800199e:	4603      	mov	r3, r0
 80019a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f9ee 	bl	8000d84 <__aeabi_fmul>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f9e9 	bl	8000d84 <__aeabi_fmul>
 80019b2:	4603      	mov	r3, r0
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 80019b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff f9e3 	bl	8000d84 <__aeabi_fmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	461c      	mov	r4, r3
			+ r_rps * cp), 0.0f } };
 80019c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f7ff f9dd 	bl	8000d84 <__aeabi_fmul>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff f8d0 	bl	8000b74 <__addsf3>
 80019d4:	4603      	mov	r3, r0
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 80019d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Update state covariance matrix P(n+1) = P(n) + T * (A * P(n) + P(n) * A' + Q) (note that A[1][1] = 0!) */
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff f9ca 	bl	8000d84 <__aeabi_fmul>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461c      	mov	r4, r3
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7ff f9c1 	bl	8000d84 <__aeabi_fmul>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4619      	mov	r1, r3
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff f8b4 	bl	8000b74 <__addsf3>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461c      	mov	r4, r3
			+ ekf_1->P[0][0] * A[0][0] + ekf_1->P[0][1] * A[1][0] + ekf_1->Q[0],
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	6a3a      	ldr	r2, [r7, #32]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f9b3 	bl	8000d84 <__aeabi_fmul>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f8a6 	bl	8000b74 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461c      	mov	r4, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f9a5 	bl	8000d84 <__aeabi_fmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff f898 	bl	8000b74 <__addsf3>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f7ff f890 	bl	8000b74 <__addsf3>
 8001a54:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001a56:	613b      	str	r3, [r7, #16]
			A[0][0] * ekf_1->P[0][1] + A[0][1] * ekf_1->P[1][1]
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f7ff f98f 	bl	8000d84 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461c      	mov	r4, r3
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f7ff f986 	bl	8000d84 <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff f879 	bl	8000b74 <__addsf3>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461c      	mov	r4, r3
					+ ekf_1->P[0][0] * A[0][1] }, { A[1][0] * ekf_1->P[0][0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f978 	bl	8000d84 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4619      	mov	r1, r3
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff f86b 	bl	8000b74 <__addsf3>
 8001a9e:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001aa0:	617b      	str	r3, [r7, #20]
					+ ekf_1->P[0][0] * A[0][1] }, { A[1][0] * ekf_1->P[0][0]
 8001aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f7ff f96a 	bl	8000d84 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461c      	mov	r4, r3
			+ ekf_1->P[1][0] * A[0][0] + ekf_1->P[1][1] * A[1][0], A[1][0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	6a3a      	ldr	r2, [r7, #32]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f961 	bl	8000d84 <__aeabi_fmul>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff f854 	bl	8000b74 <__addsf3>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461c      	mov	r4, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f953 	bl	8000d84 <__aeabi_fmul>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff f846 	bl	8000b74 <__addsf3>
 8001ae8:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001aea:	61bb      	str	r3, [r7, #24]
			+ ekf_1->P[1][0] * A[0][0] + ekf_1->P[1][1] * A[1][0], A[1][0]
 8001aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
			* ekf_1->P[0][1] + ekf_1->P[1][0] * A[0][1] + ekf_1->Q[1] } };
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7ff f945 	bl	8000d84 <__aeabi_fmul>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461c      	mov	r4, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f93c 	bl	8000d84 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff f82f 	bl	8000b74 <__addsf3>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff f827 	bl	8000b74 <__addsf3>
 8001b26:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001b28:	61fb      	str	r3, [r7, #28]

	ekf_1->P[0][0] += sampleTime_s * Pnew[0][0];
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689c      	ldr	r4, [r3, #8]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f926 	bl	8000d84 <__aeabi_fmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff f819 	bl	8000b74 <__addsf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] += sampleTime_s * Pnew[0][1];
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	68dc      	ldr	r4, [r3, #12]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f916 	bl	8000d84 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7ff f809 	bl	8000b74 <__addsf3>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] += sampleTime_s * Pnew[1][0];
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	691c      	ldr	r4, [r3, #16]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f906 	bl	8000d84 <__aeabi_fmul>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7fe fff9 	bl	8000b74 <__addsf3>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] += sampleTime_s * Pnew[1][1];
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	695c      	ldr	r4, [r3, #20]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f8f6 	bl	8000d84 <__aeabi_fmul>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7fe ffe9 	bl	8000b74 <__addsf3>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	615a      	str	r2, [r3, #20]

}
 8001baa:	bf00      	nop
 8001bac:	374c      	adds	r7, #76	; 0x4c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}

08001bb2 <EKF_Update>:

void EKF_Update(Eekf *ekf_1, float ax_mps2, float ay_mps2, float az_mps2) {
 8001bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb4:	b0c5      	sub	sp, #276	; 0x114
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	f107 040c 	add.w	r4, r7, #12
 8001bbc:	6020      	str	r0, [r4, #0]
 8001bbe:	f107 0008 	add.w	r0, r7, #8
 8001bc2:	6001      	str	r1, [r0, #0]
 8001bc4:	1d39      	adds	r1, r7, #4
 8001bc6:	600a      	str	r2, [r1, #0]
 8001bc8:	463a      	mov	r2, r7
 8001bca:	6013      	str	r3, [r2, #0]

	/* Normalise accelerometer readings */
	float accNormFactor = 1.0f
			/ sqrtf(ax_mps2 * ax_mps2 + ay_mps2 * ay_mps2 + az_mps2 * az_mps2);
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f7ff f8d6 	bl	8000d84 <__aeabi_fmul>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461c      	mov	r4, r3
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f7ff f8cf 	bl	8000d84 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4619      	mov	r1, r3
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7fe ffc2 	bl	8000b74 <__addsf3>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	f7ff f8c3 	bl	8000d84 <__aeabi_fmul>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4619      	mov	r1, r3
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7fe ffb6 	bl	8000b74 <__addsf3>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00b fd22 	bl	800d654 <sqrtf>
 8001c10:	4603      	mov	r3, r0
	float accNormFactor = 1.0f
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c18:	f7ff f968 	bl	8000eec <__aeabi_fdiv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	float ax_norm = ax_mps2 * accNormFactor;
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	f7ff f8aa 	bl	8000d84 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	float ay_norm = ay_mps2 * accNormFactor;
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	f7ff f8a1 	bl	8000d84 <__aeabi_fmul>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float az_norm = az_mps2 * accNormFactor;
 8001c48:	463b      	mov	r3, r7
 8001c4a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f7ff f898 	bl	8000d84 <__aeabi_fmul>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	/* Compute Jacobian of output function C(x,u) = dh(x,u)/dx */
	float sp = sinf(ekf_1->phi_r);
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00b fc4a 	bl	800d4fc <sinf>
 8001c68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	float cp = cosf(ekf_1->phi_r);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00b fc09 	bl	800d48c <cosf>
 8001c7a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	float st = sinf(ekf_1->theta_r);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f00b fc38 	bl	800d4fc <sinf>
 8001c8c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	float ct = cosf(ekf_1->theta_r);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00b fbf7 	bl	800d48c <cosf>
 8001c9e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

	float C[3][2] =
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001caa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001cb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cba:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f860 	bl	8000d84 <__aeabi_fmul>
 8001cc4:	4603      	mov	r3, r0
	float C[3][2] =
 8001cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001cca:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001cce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001cd2:	f7ff f857 	bl	8000d84 <__aeabi_fmul>
 8001cd6:	4603      	mov	r3, r0
	float C[3][2] =
 8001cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001cdc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001ce0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001ce4:	f7ff f84e 	bl	8000d84 <__aeabi_fmul>
 8001ce8:	4603      	mov	r3, r0
	float C[3][2] =
 8001cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001cee:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001cf2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001cf6:	f7ff f845 	bl	8000d84 <__aeabi_fmul>
 8001cfa:	4603      	mov	r3, r0
	float C[3][2] =
 8001cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	/* Compute Kalman gain K = P * C' * (R + C * P * C ')^-1 in steps (note that C[0][0] = 0!) */

	/* P * C'*/
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f838 	bl	8000d84 <__aeabi_fmul>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f82b 	bl	8000d84 <__aeabi_fmul>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * C[1][1], ekf_1->P[0][0] * C[2][0]
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f81f 	bl	8000d84 <__aeabi_fmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7fe ff12 	bl	8000b74 <__addsf3>
 8001d50:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001d52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			+ ekf_1->P[0][1] * C[1][1], ekf_1->P[0][0] * C[2][0]
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f80d 	bl	8000d84 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * C[2][1] }, { ekf_1->P[1][1] * C[0][1],
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f801 	bl	8000d84 <__aeabi_fmul>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7fe fef4 	bl	8000b74 <__addsf3>
 8001d8c:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			+ ekf_1->P[0][1] * C[2][1] }, { ekf_1->P[1][1] * C[0][1],
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe ffef 	bl	8000d84 <__aeabi_fmul>
 8001da6:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			ekf_1->P[1][0] * C[1][0] + ekf_1->P[1][1] * C[1][1], ekf_1->P[1][0]
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffe2 	bl	8000d84 <__aeabi_fmul>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ffd6 	bl	8000d84 <__aeabi_fmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7fe fec9 	bl	8000b74 <__addsf3>
 8001de2:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001de4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			ekf_1->P[1][0] * C[1][0] + ekf_1->P[1][1] * C[1][1], ekf_1->P[1][0]
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
					* C[2][0] + ekf_1->P[1][1] * C[2][1] } };
 8001df0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe ffc4 	bl	8000d84 <__aeabi_fmul>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461c      	mov	r4, r3
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ffb8 	bl	8000d84 <__aeabi_fmul>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7fe feab 	bl	8000b74 <__addsf3>
 8001e1e:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	/* R + C * P * C' */
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001e24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ffa8 	bl	8000d84 <__aeabi_fmul>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f7fe fe96 	bl	8000b74 <__addsf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 8001e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ff93 	bl	8000d84 <__aeabi_fmul>
 8001e5e:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001e60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 8001e64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e68:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff88 	bl	8000d84 <__aeabi_fmul>
 8001e74:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 8001e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ff7d 	bl	8000d84 <__aeabi_fmul>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461c      	mov	r4, r3
			+ C[1][1] * PCt[1][0], C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1]
 8001e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e92:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe ff73 	bl	8000d84 <__aeabi_fmul>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7fe fe66 	bl	8000b74 <__addsf3>
 8001ea8:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			+ C[1][1] * PCt[1][0], C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1]
 8001eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001eb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe ff63 	bl	8000d84 <__aeabi_fmul>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff59 	bl	8000d84 <__aeabi_fmul>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f7fe fe4c 	bl	8000b74 <__addsf3>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
			+ ekf_1->R[1], C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2] }, {
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f7fe fe42 	bl	8000b74 <__addsf3>
 8001ef0:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			+ ekf_1->R[1], C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2] }, {
 8001ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001efa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe ff3f 	bl	8000d84 <__aeabi_fmul>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461c      	mov	r4, r3
 8001f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ff35 	bl	8000d84 <__aeabi_fmul>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7fe fe28 	bl	8000b74 <__addsf3>
 8001f24:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			C[2][0] * PCt[0][0] + C[2][1] * PCt[1][0], C[2][0] * PCt[0][1]
 8001f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe ff25 	bl	8000d84 <__aeabi_fmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461c      	mov	r4, r3
 8001f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f42:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe ff1b 	bl	8000d84 <__aeabi_fmul>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7fe fe0e 	bl	8000b74 <__addsf3>
 8001f58:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			C[2][0] * PCt[0][0] + C[2][1] * PCt[1][0], C[2][0] * PCt[0][1]
 8001f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe ff0b 	bl	8000d84 <__aeabi_fmul>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461c      	mov	r4, r3
					+ C[2][1] * PCt[1][1], C[2][0] * PCt[0][2]
 8001f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe ff01 	bl	8000d84 <__aeabi_fmul>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7fe fdf4 	bl	8000b74 <__addsf3>
 8001f8c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					+ C[2][1] * PCt[1][1], C[2][0] * PCt[0][2]
 8001f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fef1 	bl	8000d84 <__aeabi_fmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461c      	mov	r4, r3
					+ C[2][1] * PCt[1][2] + ekf_1->R[2] } };
 8001fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001faa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fee7 	bl	8000d84 <__aeabi_fmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7fe fdda 	bl	8000b74 <__addsf3>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f7fe fdd0 	bl	8000b74 <__addsf3>
 8001fd4:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* inv(R + C * P * C') */
	float detMatInv = 1.0f
			/ (RCPCt[0][0]
 8001fda:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
					* (RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2])
 8001fde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fe2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fecb 	bl	8000d84 <__aeabi_fmul>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ff6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fec1 	bl	8000d84 <__aeabi_fmul>
 8002002:	4603      	mov	r3, r0
 8002004:	4619      	mov	r1, r3
 8002006:	4628      	mov	r0, r5
 8002008:	f7fe fdb2 	bl	8000b70 <__aeabi_fsub>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	4620      	mov	r0, r4
 8002012:	f7fe feb7 	bl	8000d84 <__aeabi_fmul>
 8002016:	4603      	mov	r3, r0
 8002018:	461d      	mov	r5, r3
					- RCPCt[1][0]
 800201a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
							* (RCPCt[2][2] * RCPCt[0][1]
 800201e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe feab 	bl	8000d84 <__aeabi_fmul>
 800202e:	4603      	mov	r3, r0
 8002030:	461e      	mov	r6, r3
									- RCPCt[2][1] * RCPCt[0][2])
 8002032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002036:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fea1 	bl	8000d84 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	4619      	mov	r1, r3
 8002046:	4630      	mov	r0, r6
 8002048:	f7fe fd92 	bl	8000b70 <__aeabi_fsub>
 800204c:	4603      	mov	r3, r0
							* (RCPCt[2][2] * RCPCt[0][1]
 800204e:	4619      	mov	r1, r3
 8002050:	4620      	mov	r0, r4
 8002052:	f7fe fe97 	bl	8000d84 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
					- RCPCt[1][0]
 8002058:	4619      	mov	r1, r3
 800205a:	4628      	mov	r0, r5
 800205c:	f7fe fd88 	bl	8000b70 <__aeabi_fsub>
 8002060:	4603      	mov	r3, r0
 8002062:	461d      	mov	r5, r3
					+ RCPCt[2][0]
 8002064:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
							* (RCPCt[1][2] * RCPCt[0][1]
 8002068:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800206c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fe86 	bl	8000d84 <__aeabi_fmul>
 8002078:	4603      	mov	r3, r0
 800207a:	461e      	mov	r6, r3
									- RCPCt[1][1] * RCPCt[0][2]));
 800207c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002080:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe7c 	bl	8000d84 <__aeabi_fmul>
 800208c:	4603      	mov	r3, r0
 800208e:	4619      	mov	r1, r3
 8002090:	4630      	mov	r0, r6
 8002092:	f7fe fd6d 	bl	8000b70 <__aeabi_fsub>
 8002096:	4603      	mov	r3, r0
							* (RCPCt[1][2] * RCPCt[0][1]
 8002098:	4619      	mov	r1, r3
 800209a:	4620      	mov	r0, r4
 800209c:	f7fe fe72 	bl	8000d84 <__aeabi_fmul>
 80020a0:	4603      	mov	r3, r0
					+ RCPCt[2][0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	4628      	mov	r0, r5
 80020a6:	f7fe fd65 	bl	8000b74 <__addsf3>
 80020aa:	4603      	mov	r3, r0
	float detMatInv = 1.0f
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80020b2:	f7fe ff1b 	bl	8000eec <__aeabi_fdiv>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80020bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fe5c 	bl	8000d84 <__aeabi_fmul>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461c      	mov	r4, r3
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 80020d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fe52 	bl	8000d84 <__aeabi_fmul>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4619      	mov	r1, r3
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7fe fd43 	bl	8000b70 <__aeabi_fsub>
 80020ea:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80020ec:	66fb      	str	r3, [r7, #108]	; 0x6c
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 80020ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fe43 	bl	8000d84 <__aeabi_fmul>
 80020fe:	4603      	mov	r3, r0
 8002100:	461c      	mov	r4, r3
			- RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] * RCPCt[0][1]
 8002102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002106:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fe39 	bl	8000d84 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	4619      	mov	r1, r3
 8002116:	4620      	mov	r0, r4
 8002118:	f7fe fd2a 	bl	8000b70 <__aeabi_fsub>
 800211c:	4603      	mov	r3, r0
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 800211e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002122:	673b      	str	r3, [r7, #112]	; 0x70
			- RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] * RCPCt[0][1]
 8002124:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002128:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fe28 	bl	8000d84 <__aeabi_fmul>
 8002134:	4603      	mov	r3, r0
 8002136:	461c      	mov	r4, r3
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 8002138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800213c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fe1e 	bl	8000d84 <__aeabi_fmul>
 8002148:	4603      	mov	r3, r0
 800214a:	4619      	mov	r1, r3
 800214c:	4620      	mov	r0, r4
 800214e:	f7fe fd0f 	bl	8000b70 <__aeabi_fsub>
 8002152:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002154:	677b      	str	r3, [r7, #116]	; 0x74
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 8002156:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800215a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fe0f 	bl	8000d84 <__aeabi_fmul>
 8002166:	4603      	mov	r3, r0
 8002168:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] * RCPCt[0][0]
 800216a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800216e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fe05 	bl	8000d84 <__aeabi_fmul>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4620      	mov	r0, r4
 8002180:	f7fe fcf6 	bl	8000b70 <__aeabi_fsub>
 8002184:	4603      	mov	r3, r0
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 8002186:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 800218a:	67bb      	str	r3, [r7, #120]	; 0x78
			- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] * RCPCt[0][0]
 800218c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002190:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fdf4 	bl	8000d84 <__aeabi_fmul>
 800219c:	4603      	mov	r3, r0
 800219e:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 80021a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fdea 	bl	8000d84 <__aeabi_fmul>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4619      	mov	r1, r3
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7fe fcdb 	bl	8000b70 <__aeabi_fsub>
 80021ba:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80021bc:	67fb      	str	r3, [r7, #124]	; 0x7c
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 80021be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fddb 	bl	8000d84 <__aeabi_fmul>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461c      	mov	r4, r3
			- RCPCt[1][0] * RCPCt[0][2]) }, { RCPCt[2][1] * RCPCt[1][0]
 80021d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fdd1 	bl	8000d84 <__aeabi_fmul>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7fe fcc2 	bl	8000b70 <__aeabi_fsub>
 80021ec:	4603      	mov	r3, r0
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 80021ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80021f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			- RCPCt[1][0] * RCPCt[0][2]) }, { RCPCt[2][1] * RCPCt[1][0]
 80021f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fdbf 	bl	8000d84 <__aeabi_fmul>
 8002206:	4603      	mov	r3, r0
 8002208:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 800220a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800220e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fdb5 	bl	8000d84 <__aeabi_fmul>
 800221a:	4603      	mov	r3, r0
 800221c:	4619      	mov	r1, r3
 800221e:	4620      	mov	r0, r4
 8002220:	f7fe fca6 	bl	8000b70 <__aeabi_fsub>
 8002224:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 800222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fda5 	bl	8000d84 <__aeabi_fmul>
 800223a:	4603      	mov	r3, r0
 800223c:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] * RCPCt[0][0]
 800223e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fd9b 	bl	8000d84 <__aeabi_fmul>
 800224e:	4603      	mov	r3, r0
 8002250:	4619      	mov	r1, r3
 8002252:	4620      	mov	r0, r4
 8002254:	f7fe fc8c 	bl	8000b70 <__aeabi_fsub>
 8002258:	4603      	mov	r3, r0
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 800225a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 800225e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			- RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] * RCPCt[0][0]
 8002262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002266:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fd89 	bl	8000d84 <__aeabi_fmul>
 8002272:	4603      	mov	r3, r0
 8002274:	461c      	mov	r4, r3
			- RCPCt[1][0] * RCPCt[0][1] } };
 8002276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800227a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fd7f 	bl	8000d84 <__aeabi_fmul>
 8002286:	4603      	mov	r3, r0
 8002288:	4619      	mov	r1, r3
 800228a:	4620      	mov	r0, r4
 800228c:	f7fe fc70 	bl	8000b70 <__aeabi_fsub>
 8002290:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	for (unsigned int i = 0; i < 3; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800229c:	e034      	b.n	8002308 <EKF_Update+0x756>

		for (unsigned int j = 0; j < 3; j++) {
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022a4:	e027      	b.n	80022f6 <EKF_Update+0x744>

			matInv[i][j] *= detMatInv;
 80022a6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022bc:	4413      	add	r3, r2
 80022be:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80022c2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fd5c 	bl	8000d84 <__aeabi_fmul>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022e6:	4413      	add	r3, r2
 80022e8:	f843 1ca4 	str.w	r1, [r3, #-164]
		for (unsigned int j = 0; j < 3; j++) {
 80022ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022f0:	3301      	adds	r3, #1
 80022f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d9d3      	bls.n	80022a6 <EKF_Update+0x6f4>
	for (unsigned int i = 0; i < 3; i++) {
 80022fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002302:	3301      	adds	r3, #1
 8002304:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800230c:	2b02      	cmp	r3, #2
 800230e:	d9c6      	bls.n	800229e <EKF_Update+0x6ec>
		}

	}

	/* C' * inv(R + C * P * C') */
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8002310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002314:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fd33 	bl	8000d84 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	461c      	mov	r4, r3
 8002322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002326:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fd29 	bl	8000d84 <__aeabi_fmul>
 8002332:	4603      	mov	r3, r0
 8002334:	4619      	mov	r1, r3
 8002336:	4620      	mov	r0, r4
 8002338:	f7fe fc1c 	bl	8000b74 <__addsf3>
 800233c:	4603      	mov	r3, r0
 800233e:	657b      	str	r3, [r7, #84]	; 0x54
			C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], C[1][0]
 8002340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002344:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fd1b 	bl	8000d84 <__aeabi_fmul>
 800234e:	4603      	mov	r3, r0
 8002350:	461c      	mov	r4, r3
 8002352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002356:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fd11 	bl	8000d84 <__aeabi_fmul>
 8002362:	4603      	mov	r3, r0
 8002364:	4619      	mov	r1, r3
 8002366:	4620      	mov	r0, r4
 8002368:	f7fe fc04 	bl	8000b74 <__addsf3>
 800236c:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 800236e:	65bb      	str	r3, [r7, #88]	; 0x58
			C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], C[1][0]
 8002370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
					* matInv[1][2] + C[2][0] * matInv[2][2] }, { C[0][1]
 8002374:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fd02 	bl	8000d84 <__aeabi_fmul>
 8002380:	4603      	mov	r3, r0
 8002382:	461c      	mov	r4, r3
 8002384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002388:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fcf8 	bl	8000d84 <__aeabi_fmul>
 8002394:	4603      	mov	r3, r0
 8002396:	4619      	mov	r1, r3
 8002398:	4620      	mov	r0, r4
 800239a:	f7fe fbeb 	bl	8000b74 <__addsf3>
 800239e:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
					* matInv[1][2] + C[2][0] * matInv[2][2] }, { C[0][1]
 80023a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			* matInv[0][0] + C[1][1] * matInv[1][0] + C[2][1] * matInv[2][0],
 80023a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fcea 	bl	8000d84 <__aeabi_fmul>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461c      	mov	r4, r3
 80023b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fce1 	bl	8000d84 <__aeabi_fmul>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4619      	mov	r1, r3
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7fe fbd4 	bl	8000b74 <__addsf3>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461c      	mov	r4, r3
 80023d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fcd2 	bl	8000d84 <__aeabi_fmul>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7fe fbc5 	bl	8000b74 <__addsf3>
 80023ea:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 80023ec:	663b      	str	r3, [r7, #96]	; 0x60
			C[0][1] * matInv[0][1] + C[1][1] * matInv[1][1]
 80023ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fcc4 	bl	8000d84 <__aeabi_fmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461c      	mov	r4, r3
 8002400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002404:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fcbb 	bl	8000d84 <__aeabi_fmul>
 800240e:	4603      	mov	r3, r0
 8002410:	4619      	mov	r1, r3
 8002412:	4620      	mov	r0, r4
 8002414:	f7fe fbae 	bl	8000b74 <__addsf3>
 8002418:	4603      	mov	r3, r0
 800241a:	461c      	mov	r4, r3
					+ C[2][1] * matInv[2][1], C[0][1] * matInv[0][2]
 800241c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002420:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fcac 	bl	8000d84 <__aeabi_fmul>
 800242c:	4603      	mov	r3, r0
 800242e:	4619      	mov	r1, r3
 8002430:	4620      	mov	r0, r4
 8002432:	f7fe fb9f 	bl	8000b74 <__addsf3>
 8002436:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8002438:	667b      	str	r3, [r7, #100]	; 0x64
					+ C[2][1] * matInv[2][1], C[0][1] * matInv[0][2]
 800243a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800243e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fc9e 	bl	8000d84 <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	461c      	mov	r4, r3
					+ C[1][1] * matInv[1][2] + C[2][1] * matInv[2][2] } };
 800244c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002450:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fc94 	bl	8000d84 <__aeabi_fmul>
 800245c:	4603      	mov	r3, r0
 800245e:	4619      	mov	r1, r3
 8002460:	4620      	mov	r0, r4
 8002462:	f7fe fb87 	bl	8000b74 <__addsf3>
 8002466:	4603      	mov	r3, r0
 8002468:	461c      	mov	r4, r3
 800246a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fc85 	bl	8000d84 <__aeabi_fmul>
 800247a:	4603      	mov	r3, r0
 800247c:	4619      	mov	r1, r3
 800247e:	4620      	mov	r0, r4
 8002480:	f7fe fb78 	bl	8000b74 <__addsf3>
 8002484:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8002486:	66bb      	str	r3, [r7, #104]	; 0x68

	/* K = P * C' * inv(R + C * P * C') */
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fc75 	bl	8000d84 <__aeabi_fmul>
 800249a:	4603      	mov	r3, r0
 800249c:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * CtmatInv[1][0], ekf_1->P[0][0] * CtmatInv[0][1]
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc6a 	bl	8000d84 <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7fe fb5d 	bl	8000b74 <__addsf3>
 80024ba:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 80024bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			+ ekf_1->P[0][1] * CtmatInv[1][0], ekf_1->P[0][0] * CtmatInv[0][1]
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fc5a 	bl	8000d84 <__aeabi_fmul>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * CtmatInv[1][1], ekf_1->P[0][0] * CtmatInv[0][2]
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fc4f 	bl	8000d84 <__aeabi_fmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7fe fb42 	bl	8000b74 <__addsf3>
 80024f0:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 80024f2:	643b      	str	r3, [r7, #64]	; 0x40
			+ ekf_1->P[0][1] * CtmatInv[1][1], ekf_1->P[0][0] * CtmatInv[0][2]
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fc3f 	bl	8000d84 <__aeabi_fmul>
 8002506:	4603      	mov	r3, r0
 8002508:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * CtmatInv[1][2] }, { ekf_1->P[1][0]
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc34 	bl	8000d84 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	4619      	mov	r1, r3
 8002520:	4620      	mov	r0, r4
 8002522:	f7fe fb27 	bl	8000b74 <__addsf3>
 8002526:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 8002528:	647b      	str	r3, [r7, #68]	; 0x44
			+ ekf_1->P[0][1] * CtmatInv[1][2] }, { ekf_1->P[1][0]
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
			* CtmatInv[0][0] + ekf_1->P[1][1] * CtmatInv[1][0], ekf_1->P[1][0]
 8002532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fc24 	bl	8000d84 <__aeabi_fmul>
 800253c:	4603      	mov	r3, r0
 800253e:	461c      	mov	r4, r3
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fc19 	bl	8000d84 <__aeabi_fmul>
 8002552:	4603      	mov	r3, r0
 8002554:	4619      	mov	r1, r3
 8002556:	4620      	mov	r0, r4
 8002558:	f7fe fb0c 	bl	8000b74 <__addsf3>
 800255c:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
			* CtmatInv[0][0] + ekf_1->P[1][1] * CtmatInv[1][0], ekf_1->P[1][0]
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
			* CtmatInv[0][1] + ekf_1->P[1][1] * CtmatInv[1][1], ekf_1->P[1][0]
 8002568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fc09 	bl	8000d84 <__aeabi_fmul>
 8002572:	4603      	mov	r3, r0
 8002574:	461c      	mov	r4, r3
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbfe 	bl	8000d84 <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe faf1 	bl	8000b74 <__addsf3>
 8002592:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 8002594:	64fb      	str	r3, [r7, #76]	; 0x4c
			* CtmatInv[0][1] + ekf_1->P[1][1] * CtmatInv[1][1], ekf_1->P[1][0]
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
			* CtmatInv[0][2] + ekf_1->P[1][1] * CtmatInv[1][2] } };
 800259e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fbee 	bl	8000d84 <__aeabi_fmul>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461c      	mov	r4, r3
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fbe3 	bl	8000d84 <__aeabi_fmul>
 80025be:	4603      	mov	r3, r0
 80025c0:	4619      	mov	r1, r3
 80025c2:	4620      	mov	r0, r4
 80025c4:	f7fe fad6 	bl	8000b74 <__addsf3>
 80025c8:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 80025ca:	653b      	str	r3, [r7, #80]	; 0x50

	/* Update state covariance matrix P(n+1) = (I - K * C) * P(n) */
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 80025cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fbd5 	bl	8000d84 <__aeabi_fmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	461c      	mov	r4, r3
 80025de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fbcc 	bl	8000d84 <__aeabi_fmul>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4619      	mov	r1, r3
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7fe fabf 	bl	8000b74 <__addsf3>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80025fe:	f7fe fab7 	bl	8000b70 <__aeabi_fsub>
 8002602:	4603      	mov	r3, r0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
			-(K[0][1] * C[1][1] + K[1][0] * C[2][1]) },
 8002606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002608:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fbb8 	bl	8000d84 <__aeabi_fmul>
 8002614:	4603      	mov	r3, r0
 8002616:	461c      	mov	r4, r3
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fbaf 	bl	8000d84 <__aeabi_fmul>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	4620      	mov	r0, r4
 800262c:	f7fe faa2 	bl	8000b74 <__addsf3>
 8002630:	4603      	mov	r3, r0
 8002632:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
			{ -(K[1][1] * C[1][0] + K[1][2] * C[2][0]), 1.0f
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb9f 	bl	8000d84 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	461c      	mov	r4, r3
 800264a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fb96 	bl	8000d84 <__aeabi_fmul>
 8002658:	4603      	mov	r3, r0
 800265a:	4619      	mov	r1, r3
 800265c:	4620      	mov	r0, r4
 800265e:	f7fe fa89 	bl	8000b74 <__addsf3>
 8002662:	4603      	mov	r3, r0
 8002664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
					- (K[1][1] * C[1][1] + K[1][2] * C[2][1]) } };
 800266a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fb86 	bl	8000d84 <__aeabi_fmul>
 8002678:	4603      	mov	r3, r0
 800267a:	461c      	mov	r4, r3
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fb7d 	bl	8000d84 <__aeabi_fmul>
 800268a:	4603      	mov	r3, r0
 800268c:	4619      	mov	r1, r3
 800268e:	4620      	mov	r0, r4
 8002690:	f7fe fa70 	bl	8000b74 <__addsf3>
 8002694:	4603      	mov	r3, r0
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800269c:	f7fe fa68 	bl	8000b70 <__aeabi_fsub>
 80026a0:	4603      	mov	r3, r0
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38

	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 80026a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f7fe fb67 	bl	8000d84 <__aeabi_fmul>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461c      	mov	r4, r3
			+ IminKC[0][1] * ekf_1->P[1][0], IminKC[0][0] * ekf_1->P[0][1]
 80026ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f7fe fb5c 	bl	8000d84 <__aeabi_fmul>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4619      	mov	r1, r3
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7fe fa4f 	bl	8000b74 <__addsf3>
 80026d6:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 80026d8:	61fb      	str	r3, [r7, #28]
			+ IminKC[0][1] * ekf_1->P[1][0], IminKC[0][0] * ekf_1->P[0][1]
 80026da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4610      	mov	r0, r2
 80026e8:	f7fe fb4c 	bl	8000d84 <__aeabi_fmul>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461c      	mov	r4, r3
			+ IminKC[0][1] * ekf_1->P[1][1] }, { IminKC[1][0] * ekf_1->P[0][0]
 80026f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f7fe fb41 	bl	8000d84 <__aeabi_fmul>
 8002702:	4603      	mov	r3, r0
 8002704:	4619      	mov	r1, r3
 8002706:	4620      	mov	r0, r4
 8002708:	f7fe fa34 	bl	8000b74 <__addsf3>
 800270c:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 800270e:	623b      	str	r3, [r7, #32]
			+ IminKC[0][1] * ekf_1->P[1][1] }, { IminKC[1][0] * ekf_1->P[0][0]
 8002710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f7fe fb31 	bl	8000d84 <__aeabi_fmul>
 8002722:	4603      	mov	r3, r0
 8002724:	461c      	mov	r4, r3
			+ IminKC[1][1] * ekf_1->P[1][0], IminKC[1][0] * ekf_1->P[0][1]
 8002726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f7fe fb26 	bl	8000d84 <__aeabi_fmul>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	4620      	mov	r0, r4
 800273e:	f7fe fa19 	bl	8000b74 <__addsf3>
 8002742:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
			+ IminKC[1][1] * ekf_1->P[1][0], IminKC[1][0] * ekf_1->P[0][1]
 8002746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f7fe fb16 	bl	8000d84 <__aeabi_fmul>
 8002758:	4603      	mov	r3, r0
 800275a:	461c      	mov	r4, r3
			+ IminKC[1][1] * ekf_1->P[1][1] } };
 800275c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7fe fb0b 	bl	8000d84 <__aeabi_fmul>
 800276e:	4603      	mov	r3, r0
 8002770:	4619      	mov	r1, r3
 8002772:	4620      	mov	r0, r4
 8002774:	f7fe f9fe 	bl	8000b74 <__addsf3>
 8002778:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28

	ekf_1->P[0][0] = Pnew[0][0];
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = Pnew[0][1];
 8002786:	6a3a      	ldr	r2, [r7, #32]
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = Pnew[1][0];
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = Pnew[1][1];
 800279a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	615a      	str	r2, [r3, #20]

	/* Compute output function h(x,u) */
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r)
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f00a fea5 	bl	800d4fc <sinf>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00a fe62 	bl	800d48c <cosf>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
			* sinf(ekf_1->phi_r), -cosf(ekf_1->theta_r) * cosf(ekf_1->phi_r) };
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a fe90 	bl	800d4fc <sinf>
 80027dc:	4603      	mov	r3, r0
 80027de:	4619      	mov	r1, r3
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7fe facf 	bl	8000d84 <__aeabi_fmul>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r)
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	605a      	str	r2, [r3, #4]
			* sinf(ekf_1->phi_r), -cosf(ekf_1->theta_r) * cosf(ekf_1->phi_r) };
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00a fe47 	bl	800d48c <cosf>
 80027fe:	4603      	mov	r3, r0
 8002800:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f00a fe3d 	bl	800d48c <cosf>
 8002812:	4603      	mov	r3, r0
 8002814:	4619      	mov	r1, r3
 8002816:	4620      	mov	r0, r4
 8002818:	f7fe fab4 	bl	8000d84 <__aeabi_fmul>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r)
 8002820:	f107 0310 	add.w	r3, r7, #16
 8002824:	609a      	str	r2, [r3, #8]

	/* Update state estimate x(n+1) = x(n) + K * (y - h) */
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 8002826:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8002834:	f7fe f99c 	bl	8000b70 <__aeabi_fsub>
 8002838:	4603      	mov	r3, r0
 800283a:	4619      	mov	r1, r3
 800283c:	4620      	mov	r0, r4
 800283e:	f7fe faa1 	bl	8000d84 <__aeabi_fmul>
 8002842:	4603      	mov	r3, r0
 8002844:	461d      	mov	r5, r3
 8002846:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4619      	mov	r1, r3
 8002850:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8002854:	f7fe f98c 	bl	8000b70 <__aeabi_fsub>
 8002858:	4603      	mov	r3, r0
 800285a:	4619      	mov	r1, r3
 800285c:	4620      	mov	r0, r4
 800285e:	f7fe fa91 	bl	8000d84 <__aeabi_fmul>
 8002862:	4603      	mov	r3, r0
 8002864:	4619      	mov	r1, r3
 8002866:	4628      	mov	r0, r5
 8002868:	f7fe f984 	bl	8000b74 <__addsf3>
 800286c:	4603      	mov	r3, r0
 800286e:	461d      	mov	r5, r3
			+ K[0][2] * (az_norm - h[2]);
 8002870:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4619      	mov	r1, r3
 800287a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800287e:	f7fe f977 	bl	8000b70 <__aeabi_fsub>
 8002882:	4603      	mov	r3, r0
 8002884:	4619      	mov	r1, r3
 8002886:	4620      	mov	r0, r4
 8002888:	f7fe fa7c 	bl	8000d84 <__aeabi_fmul>
 800288c:	4603      	mov	r3, r0
 800288e:	4619      	mov	r1, r3
 8002890:	4628      	mov	r0, r5
 8002892:	f7fe f96f 	bl	8000b74 <__addsf3>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 80028a2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4619      	mov	r1, r3
 80028ac:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80028b0:	f7fe f95e 	bl	8000b70 <__aeabi_fsub>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4619      	mov	r1, r3
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7fe fa63 	bl	8000d84 <__aeabi_fmul>
 80028be:	4603      	mov	r3, r0
 80028c0:	461d      	mov	r5, r3
 80028c2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80028d0:	f7fe f94e 	bl	8000b70 <__aeabi_fsub>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4619      	mov	r1, r3
 80028d8:	4620      	mov	r0, r4
 80028da:	f7fe fa53 	bl	8000d84 <__aeabi_fmul>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	4628      	mov	r0, r5
 80028e4:	f7fe f946 	bl	8000b74 <__addsf3>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461d      	mov	r5, r3
			+ K[1][2] * (az_norm - h[2]);
 80028ec:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80028fa:	f7fe f939 	bl	8000b70 <__aeabi_fsub>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	4620      	mov	r0, r4
 8002904:	f7fe fa3e 	bl	8000d84 <__aeabi_fmul>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	4628      	mov	r0, r5
 800290e:	f7fe f931 	bl	8000b74 <__addsf3>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]

	return;
 800291e:	bf00      	nop
}
 8002920:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002924:	46bd      	mov	sp, r7
 8002926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002928 <IMU_Setup>:
 *      Author: Dell
 */

#include "IMU.h"

void IMU_Setup(MPU6500_t *DEFAULT_MPU6500) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

	if (LSM9DS1_Init(&hspi1, 0x60) == 1) { // ±16 Gauss full scale, 20Hz ODR, Continuous conversion mode
 8002930:	2160      	movs	r1, #96	; 0x60
 8002932:	4813      	ldr	r0, [pc, #76]	; (8002980 <IMU_Setup+0x58>)
 8002934:	f000 febe 	bl	80036b4 <LSM9DS1_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d118      	bne.n	8002970 <IMU_Setup+0x48>

		myDebug("\nLSM9DS1 Initialization Complete..\n");
 800293e:	4811      	ldr	r0, [pc, #68]	; (8002984 <IMU_Setup+0x5c>)
 8002940:	f7fe fc7a 	bl	8001238 <myDebug>

		HAL_Delay(500);
 8002944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002948:	f002 fc4e 	bl	80051e8 <HAL_Delay>

		if (MPU_begin(DEFAULT_MPU6500) != 1) {
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fac5 	bl	8002edc <MPU_begin>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d003      	beq.n	8002960 <IMU_Setup+0x38>
			myDebug("MPU6500 Initialization Failed..\n");
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <IMU_Setup+0x60>)
 800295a:	f7fe fc6d 	bl	8001238 <myDebug>
//			myDebug("******************************\r\n");
		}
	} else {
		myDebug("LSM9DS1 Initialization Failed..\n");
	}
}
 800295e:	e00a      	b.n	8002976 <IMU_Setup+0x4e>
			myDebug("MPU6500 Initialization Complete..\n");
 8002960:	480a      	ldr	r0, [pc, #40]	; (800298c <IMU_Setup+0x64>)
 8002962:	f7fe fc69 	bl	8001238 <myDebug>
			HAL_Delay(500);
 8002966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800296a:	f002 fc3d 	bl	80051e8 <HAL_Delay>
}
 800296e:	e002      	b.n	8002976 <IMU_Setup+0x4e>
		myDebug("LSM9DS1 Initialization Failed..\n");
 8002970:	4807      	ldr	r0, [pc, #28]	; (8002990 <IMU_Setup+0x68>)
 8002972:	f7fe fc61 	bl	8001238 <myDebug>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000568 	.word	0x20000568
 8002984:	0800fe80 	.word	0x0800fe80
 8002988:	0800fea4 	.word	0x0800fea4
 800298c:	0800fec8 	.word	0x0800fec8
 8002990:	0800feec 	.word	0x0800feec

08002994 <IMU_REG_Data>:

void IMU_REG_Data() {
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	//must be same as the variable '_buffer' of 'MPU6500_GetData()'
	SAT_IMU_REG[0] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_H);
 8002998:	213b      	movs	r1, #59	; 0x3b
 800299a:	4848      	ldr	r0, [pc, #288]	; (8002abc <IMU_REG_Data+0x128>)
 800299c:	f000 fe12 	bl	80035c4 <MPU6500_ReadReg>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <IMU_REG_Data+0x12c>)
 80029a6:	701a      	strb	r2, [r3, #0]
	SAT_IMU_REG[1] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_L);
 80029a8:	213c      	movs	r1, #60	; 0x3c
 80029aa:	4844      	ldr	r0, [pc, #272]	; (8002abc <IMU_REG_Data+0x128>)
 80029ac:	f000 fe0a 	bl	80035c4 <MPU6500_ReadReg>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <IMU_REG_Data+0x12c>)
 80029b6:	705a      	strb	r2, [r3, #1]
	SAT_IMU_REG[2] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_H);
 80029b8:	213d      	movs	r1, #61	; 0x3d
 80029ba:	4840      	ldr	r0, [pc, #256]	; (8002abc <IMU_REG_Data+0x128>)
 80029bc:	f000 fe02 	bl	80035c4 <MPU6500_ReadReg>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <IMU_REG_Data+0x12c>)
 80029c6:	709a      	strb	r2, [r3, #2]
	SAT_IMU_REG[3] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_L);
 80029c8:	213e      	movs	r1, #62	; 0x3e
 80029ca:	483c      	ldr	r0, [pc, #240]	; (8002abc <IMU_REG_Data+0x128>)
 80029cc:	f000 fdfa 	bl	80035c4 <MPU6500_ReadReg>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <IMU_REG_Data+0x12c>)
 80029d6:	70da      	strb	r2, [r3, #3]
	SAT_IMU_REG[4] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_H);
 80029d8:	213f      	movs	r1, #63	; 0x3f
 80029da:	4838      	ldr	r0, [pc, #224]	; (8002abc <IMU_REG_Data+0x128>)
 80029dc:	f000 fdf2 	bl	80035c4 <MPU6500_ReadReg>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <IMU_REG_Data+0x12c>)
 80029e6:	711a      	strb	r2, [r3, #4]
	SAT_IMU_REG[5] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_L);
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	4834      	ldr	r0, [pc, #208]	; (8002abc <IMU_REG_Data+0x128>)
 80029ec:	f000 fdea 	bl	80035c4 <MPU6500_ReadReg>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <IMU_REG_Data+0x12c>)
 80029f6:	715a      	strb	r2, [r3, #5]

	SAT_IMU_REG[6] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_H);
 80029f8:	2143      	movs	r1, #67	; 0x43
 80029fa:	4830      	ldr	r0, [pc, #192]	; (8002abc <IMU_REG_Data+0x128>)
 80029fc:	f000 fde2 	bl	80035c4 <MPU6500_ReadReg>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a06:	719a      	strb	r2, [r3, #6]
	SAT_IMU_REG[7] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_L);
 8002a08:	2144      	movs	r1, #68	; 0x44
 8002a0a:	482c      	ldr	r0, [pc, #176]	; (8002abc <IMU_REG_Data+0x128>)
 8002a0c:	f000 fdda 	bl	80035c4 <MPU6500_ReadReg>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a16:	71da      	strb	r2, [r3, #7]
	SAT_IMU_REG[8] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_H);
 8002a18:	2145      	movs	r1, #69	; 0x45
 8002a1a:	4828      	ldr	r0, [pc, #160]	; (8002abc <IMU_REG_Data+0x128>)
 8002a1c:	f000 fdd2 	bl	80035c4 <MPU6500_ReadReg>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a26:	721a      	strb	r2, [r3, #8]
	SAT_IMU_REG[9] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_L);
 8002a28:	2146      	movs	r1, #70	; 0x46
 8002a2a:	4824      	ldr	r0, [pc, #144]	; (8002abc <IMU_REG_Data+0x128>)
 8002a2c:	f000 fdca 	bl	80035c4 <MPU6500_ReadReg>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a36:	725a      	strb	r2, [r3, #9]
	SAT_IMU_REG[10] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_H);
 8002a38:	2147      	movs	r1, #71	; 0x47
 8002a3a:	4820      	ldr	r0, [pc, #128]	; (8002abc <IMU_REG_Data+0x128>)
 8002a3c:	f000 fdc2 	bl	80035c4 <MPU6500_ReadReg>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a46:	729a      	strb	r2, [r3, #10]
	SAT_IMU_REG[11] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_L);
 8002a48:	2148      	movs	r1, #72	; 0x48
 8002a4a:	481c      	ldr	r0, [pc, #112]	; (8002abc <IMU_REG_Data+0x128>)
 8002a4c:	f000 fdba 	bl	80035c4 <MPU6500_ReadReg>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a56:	72da      	strb	r2, [r3, #11]

	//must be same as the 'Mag_Data[]' of 'LSM9DS1_ReadData'
	SAT_IMU_REG[12] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_L_M);
 8002a58:	2128      	movs	r1, #40	; 0x28
 8002a5a:	4818      	ldr	r0, [pc, #96]	; (8002abc <IMU_REG_Data+0x128>)
 8002a5c:	f000 fdd6 	bl	800360c <LSM9DS1_ReadReg>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a66:	731a      	strb	r2, [r3, #12]
	SAT_IMU_REG[13] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_H_M);
 8002a68:	2129      	movs	r1, #41	; 0x29
 8002a6a:	4814      	ldr	r0, [pc, #80]	; (8002abc <IMU_REG_Data+0x128>)
 8002a6c:	f000 fdce 	bl	800360c <LSM9DS1_ReadReg>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a76:	735a      	strb	r2, [r3, #13]
	SAT_IMU_REG[14] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_L_M);
 8002a78:	212a      	movs	r1, #42	; 0x2a
 8002a7a:	4810      	ldr	r0, [pc, #64]	; (8002abc <IMU_REG_Data+0x128>)
 8002a7c:	f000 fdc6 	bl	800360c <LSM9DS1_ReadReg>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a86:	739a      	strb	r2, [r3, #14]
	SAT_IMU_REG[15] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_H_M);
 8002a88:	212b      	movs	r1, #43	; 0x2b
 8002a8a:	480c      	ldr	r0, [pc, #48]	; (8002abc <IMU_REG_Data+0x128>)
 8002a8c:	f000 fdbe 	bl	800360c <LSM9DS1_ReadReg>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002a96:	73da      	strb	r2, [r3, #15]
	SAT_IMU_REG[16] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_L_M);
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <IMU_REG_Data+0x128>)
 8002a9c:	f000 fdb6 	bl	800360c <LSM9DS1_ReadReg>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002aa6:	741a      	strb	r2, [r3, #16]
	SAT_IMU_REG[17] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_H_M);
 8002aa8:	212d      	movs	r1, #45	; 0x2d
 8002aaa:	4804      	ldr	r0, [pc, #16]	; (8002abc <IMU_REG_Data+0x128>)
 8002aac:	f000 fdae 	bl	800360c <LSM9DS1_ReadReg>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <IMU_REG_Data+0x12c>)
 8002ab6:	745a      	strb	r2, [r3, #17]
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000568 	.word	0x20000568
 8002ac0:	20000478 	.word	0x20000478

08002ac4 <IMU_Sensor_Data>:

void IMU_Sensor_Data(MPU6500_t *DEFAULT_MPU6500, lsm9ds1_t *DEFAULT_LSM9DS1) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]

	// combined of MPU, MAG and all non filtered sensor data
	IMU_SEN_DATA[0] = DEFAULT_MPU6500->sensorData.ax;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002ad4:	6013      	str	r3, [r2, #0]
	IMU_SEN_DATA[1] = DEFAULT_MPU6500->sensorData.ay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002adc:	6053      	str	r3, [r2, #4]
	IMU_SEN_DATA[2] = DEFAULT_MPU6500->sensorData.az;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002ae4:	6093      	str	r3, [r2, #8]

	IMU_SEN_DATA[3] = DEFAULT_MPU6500->sensorData.gx;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002aec:	60d3      	str	r3, [r2, #12]
	IMU_SEN_DATA[4] = DEFAULT_MPU6500->sensorData.gy;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002af4:	6113      	str	r3, [r2, #16]
	IMU_SEN_DATA[5] = DEFAULT_MPU6500->sensorData.gz;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002afc:	6153      	str	r3, [r2, #20]

	IMU_SEN_DATA[6] = DEFAULT_LSM9DS1->m_sensor_data.mx;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002b04:	6193      	str	r3, [r2, #24]
	IMU_SEN_DATA[7] = DEFAULT_LSM9DS1->m_sensor_data.my;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002b0c:	61d3      	str	r3, [r2, #28]
	IMU_SEN_DATA[8] = DEFAULT_LSM9DS1->m_sensor_data.mz;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <IMU_Sensor_Data+0x5c>)
 8002b14:	6213      	str	r3, [r2, #32]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	2000048c 	.word	0x2000048c

08002b24 <IMU_RCFilter>:

imu_filter IMU_RCFilter() {
 8002b24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b28:	b0ba      	sub	sp, #232	; 0xe8
 8002b2a:	af06      	add	r7, sp, #24
 8002b2c:	6078      	str	r0, [r7, #4]
	RCFilter lpfGyr[3];
	RCFilter lpfMag[3];

	imu_filter filt_imu;

	for (int n = 0; n < 3; n++) {
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b34:	e026      	b.n	8002b84 <IMU_RCFilter+0x60>
		RCFilter_Init(&lpfAcc[n], 5.0f, 0.01f);
 8002b36:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002b3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	4413      	add	r3, r2
 8002b42:	4aa1      	ldr	r2, [pc, #644]	; (8002dc8 <IMU_RCFilter+0x2a4>)
 8002b44:	49a1      	ldr	r1, [pc, #644]	; (8002dcc <IMU_RCFilter+0x2a8>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ff88 	bl	8003a5c <RCFilter_Init>
		RCFilter_Init(&lpfGyr[n], 25.0f, 0.01f);
 8002b4c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	4413      	add	r3, r2
 8002b58:	4a9b      	ldr	r2, [pc, #620]	; (8002dc8 <IMU_RCFilter+0x2a4>)
 8002b5a:	499d      	ldr	r1, [pc, #628]	; (8002dd0 <IMU_RCFilter+0x2ac>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 ff7d 	bl	8003a5c <RCFilter_Init>
		RCFilter_Init(&lpfMag[n], 1.0f, 0.01f);
 8002b62:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4a96      	ldr	r2, [pc, #600]	; (8002dc8 <IMU_RCFilter+0x2a4>)
 8002b70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 ff71 	bl	8003a5c <RCFilter_Init>
	for (int n = 0; n < 3; n++) {
 8002b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	ddd4      	ble.n	8002b36 <IMU_RCFilter+0x12>
	}

	/* Filter accelerometer data */
	RCFilter_Update(&lpfAcc[0], IMU_SEN_DATA[0]); // sensor data ax
 8002b8c:	4b91      	ldr	r3, [pc, #580]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 ff9a 	bl	8003ad0 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[1], IMU_SEN_DATA[1]); // sensor data ay
 8002b9c:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 ff91 	bl	8003ad0 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[2], IMU_SEN_DATA[2]);	// sensor data az
 8002bae:	4b89      	ldr	r3, [pc, #548]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bb6:	3320      	adds	r3, #32
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 ff88 	bl	8003ad0 <RCFilter_Update>

	/* Filter gyroscope data */
	RCFilter_Update(&lpfGyr[0], IMU_SEN_DATA[3]);	//sensor data gx
 8002bc0:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 ff80 	bl	8003ad0 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[1], IMU_SEN_DATA[4]);	//sensor data gy
 8002bd0:	4b80      	ldr	r3, [pc, #512]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bd8:	3310      	adds	r3, #16
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 ff77 	bl	8003ad0 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[2], IMU_SEN_DATA[5]);	//sensor data gz
 8002be2:	4b7c      	ldr	r3, [pc, #496]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bea:	3320      	adds	r3, #32
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 ff6e 	bl	8003ad0 <RCFilter_Update>

	/* Filter magmetometer data */
	RCFilter_Update(&lpfMag[0], IMU_SEN_DATA[6]);   // mx
 8002bf4:	4b77      	ldr	r3, [pc, #476]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 ff66 	bl	8003ad0 <RCFilter_Update>
	RCFilter_Update(&lpfMag[1], IMU_SEN_DATA[7]);   // my
 8002c04:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 ff5d 	bl	8003ad0 <RCFilter_Update>
	RCFilter_Update(&lpfMag[2], IMU_SEN_DATA[8]);   // mz
 8002c16:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1e:	3320      	adds	r3, #32
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 ff54 	bl	8003ad0 <RCFilter_Update>

	//Filtered accelerometer measurement
	filt_imu.ax_mps2 = lpfAcc[0].out[0];
 8002c28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c2c:	60bb      	str	r3, [r7, #8]
	filt_imu.ay_mps2 = lpfAcc[1].out[0];
 8002c2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c32:	60fb      	str	r3, [r7, #12]
	filt_imu.az_mps2 = lpfAcc[2].out[0];
 8002c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c38:	613b      	str	r3, [r7, #16]
	//Filtered Gyroscope measurement
	filt_imu.p_rps = lpfGyr[0].out[0];
 8002c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3c:	617b      	str	r3, [r7, #20]
	filt_imu.q_rps = lpfGyr[1].out[0];
 8002c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c42:	61bb      	str	r3, [r7, #24]
	filt_imu.r_rps = lpfGyr[2].out[0];
 8002c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c48:	61fb      	str	r3, [r7, #28]
	//Filtered Magnetometer measurement
	filt_imu.mx_ut = lpfMag[0].out[0];
 8002c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4c:	623b      	str	r3, [r7, #32]
	filt_imu.my_ut = lpfMag[1].out[0];
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
	filt_imu.mz_ut = lpfMag[2].out[0];
 8002c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28

	// if no use of filter
	filt_imu.ax_mps2 = IMU_SEN_DATA[0];
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60bb      	str	r3, [r7, #8]
	filt_imu.ay_mps2 = IMU_SEN_DATA[1];
 8002c5c:	4b5d      	ldr	r3, [pc, #372]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
	filt_imu.az_mps2 = IMU_SEN_DATA[2];
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	613b      	str	r3, [r7, #16]

	filt_imu.p_rps = IMU_SEN_DATA[3];
 8002c68:	4b5a      	ldr	r3, [pc, #360]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	617b      	str	r3, [r7, #20]
	filt_imu.q_rps = IMU_SEN_DATA[4];
 8002c6e:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	61bb      	str	r3, [r7, #24]
	filt_imu.r_rps = IMU_SEN_DATA[5];
 8002c74:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	61fb      	str	r3, [r7, #28]

	filt_imu.mx_ut = IMU_SEN_DATA[6];
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	623b      	str	r3, [r7, #32]
	filt_imu.my_ut = IMU_SEN_DATA[7];
 8002c80:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
	filt_imu.mz_ut = IMU_SEN_DATA[8];
 8002c86:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <IMU_RCFilter+0x2b0>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28

	filt_imu.total_mag = sqrt(
			filt_imu.mx_ut * filt_imu.mx_ut + filt_imu.my_ut * filt_imu.my_ut
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	6a3a      	ldr	r2, [r7, #32]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe f876 	bl	8000d84 <__aeabi_fmul>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461c      	mov	r4, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe f86e 	bl	8000d84 <__aeabi_fmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4619      	mov	r1, r3
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7fd ff61 	bl	8000b74 <__addsf3>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461c      	mov	r4, r3
					+ filt_imu.mz_ut * filt_imu.mz_ut);
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe f861 	bl	8000d84 <__aeabi_fmul>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7fd ff54 	bl	8000b74 <__addsf3>
 8002ccc:	4603      	mov	r3, r0
	filt_imu.total_mag = sqrt(
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fbaa 	bl	8000428 <__aeabi_f2d>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f00a fc68 	bl	800d5b0 <sqrt>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	myDebug("\n-----RC filtered, Sensor Data-----\r\n");
 8002ce8:	483b      	ldr	r0, [pc, #236]	; (8002dd8 <IMU_RCFilter+0x2b4>)
 8002cea:	f7fe faa5 	bl	8001238 <myDebug>
	myDebug("ACCEL (m/s^2)\r\n");
 8002cee:	483b      	ldr	r0, [pc, #236]	; (8002ddc <IMU_RCFilter+0x2b8>)
 8002cf0:	f7fe faa2 	bl	8001238 <myDebug>
	myDebug(" ax = %.2f \tay = %.2f \taz = %.2f \r\n", filt_imu.ax_mps2,
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fb96 	bl	8000428 <__aeabi_f2d>
 8002cfc:	4680      	mov	r8, r0
 8002cfe:	4689      	mov	r9, r1
			filt_imu.ay_mps2, filt_imu.az_mps2);
 8002d00:	68fb      	ldr	r3, [r7, #12]
	myDebug(" ax = %.2f \tay = %.2f \taz = %.2f \r\n", filt_imu.ax_mps2,
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fb90 	bl	8000428 <__aeabi_f2d>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
			filt_imu.ay_mps2, filt_imu.az_mps2);
 8002d0c:	693b      	ldr	r3, [r7, #16]
	myDebug(" ax = %.2f \tay = %.2f \taz = %.2f \r\n", filt_imu.ax_mps2,
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fb8a 	bl	8000428 <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d1c:	e9cd 4500 	strd	r4, r5, [sp]
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	482e      	ldr	r0, [pc, #184]	; (8002de0 <IMU_RCFilter+0x2bc>)
 8002d26:	f7fe fa87 	bl	8001238 <myDebug>
	myDebug("GYRO (rad/s) \r\n");
 8002d2a:	482e      	ldr	r0, [pc, #184]	; (8002de4 <IMU_RCFilter+0x2c0>)
 8002d2c:	f7fe fa84 	bl	8001238 <myDebug>
	myDebug(" gx = %f \tgy = %f \tgz = %f \r\n", filt_imu.p_rps, filt_imu.q_rps,
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fb78 	bl	8000428 <__aeabi_f2d>
 8002d38:	4680      	mov	r8, r0
 8002d3a:	4689      	mov	r9, r1
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fb72 	bl	8000428 <__aeabi_f2d>
 8002d44:	4604      	mov	r4, r0
 8002d46:	460d      	mov	r5, r1
			filt_imu.r_rps);
 8002d48:	69fb      	ldr	r3, [r7, #28]
	myDebug(" gx = %f \tgy = %f \tgz = %f \r\n", filt_imu.p_rps, filt_imu.q_rps,
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fb6c 	bl	8000428 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d58:	e9cd 4500 	strd	r4, r5, [sp]
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	4821      	ldr	r0, [pc, #132]	; (8002de8 <IMU_RCFilter+0x2c4>)
 8002d62:	f7fe fa69 	bl	8001238 <myDebug>
	myDebug("MAG (uT) \r\n");
 8002d66:	4821      	ldr	r0, [pc, #132]	; (8002dec <IMU_RCFilter+0x2c8>)
 8002d68:	f7fe fa66 	bl	8001238 <myDebug>
	myDebug(" mx = %f \tmy = %f \tmz = %f \r\nTotal Magenotometer = %f uT\r\n",
			filt_imu.mx_ut, filt_imu.my_ut, filt_imu.mz_ut, filt_imu.total_mag);
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
	myDebug(" mx = %f \tmy = %f \tmz = %f \r\nTotal Magenotometer = %f uT\r\n",
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fb5a 	bl	8000428 <__aeabi_f2d>
 8002d74:	4680      	mov	r8, r0
 8002d76:	4689      	mov	r9, r1
			filt_imu.mx_ut, filt_imu.my_ut, filt_imu.mz_ut, filt_imu.total_mag);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	myDebug(" mx = %f \tmy = %f \tmz = %f \r\nTotal Magenotometer = %f uT\r\n",
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fb54 	bl	8000428 <__aeabi_f2d>
 8002d80:	4604      	mov	r4, r0
 8002d82:	460d      	mov	r5, r1
			filt_imu.mx_ut, filt_imu.my_ut, filt_imu.mz_ut, filt_imu.total_mag);
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
	myDebug(" mx = %f \tmy = %f \tmz = %f \r\nTotal Magenotometer = %f uT\r\n",
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fb4e 	bl	8000428 <__aeabi_f2d>
 8002d8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d98:	e9cd 4500 	strd	r4, r5, [sp]
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	4813      	ldr	r0, [pc, #76]	; (8002df0 <IMU_RCFilter+0x2cc>)
 8002da2:	f7fe fa49 	bl	8001238 <myDebug>

	return filt_imu;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	461d      	mov	r5, r3
 8002daa:	f107 0408 	add.w	r4, r7, #8
 8002dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	37d0      	adds	r7, #208	; 0xd0
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dc8:	3c23d70a 	.word	0x3c23d70a
 8002dcc:	40a00000 	.word	0x40a00000
 8002dd0:	41c80000 	.word	0x41c80000
 8002dd4:	2000048c 	.word	0x2000048c
 8002dd8:	0800ff10 	.word	0x0800ff10
 8002ddc:	0800ff38 	.word	0x0800ff38
 8002de0:	0800ff48 	.word	0x0800ff48
 8002de4:	0800ff6c 	.word	0x0800ff6c
 8002de8:	0800ff7c 	.word	0x0800ff7c
 8002dec:	0800ff9c 	.word	0x0800ff9c
 8002df0:	0800ffa8 	.word	0x0800ffa8

08002df4 <IMU_Get_Data>:

imu_filter IMU_Get_Data(MPU6500_t *DEFAULT_MPU6500, lsm9ds1_t *DEFAULT_LSM9DS1) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
	IMU_REG_Data();   //register data
 8002e00:	f7ff fdc8 	bl	8002994 <IMU_REG_Data>
	MPU_calcAttitude(DEFAULT_MPU6500);	//calculate ACC, GRYO sensor data
 8002e04:	68b8      	ldr	r0, [r7, #8]
 8002e06:	f000 fa5d 	bl	80032c4 <MPU_calcAttitude>
	LSM9DS1_ReadData(DEFAULT_LSM9DS1);	//calculate MAG sensor data
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fc7c 	bl	8003708 <LSM9DS1_ReadData>
	IMU_Sensor_Data(DEFAULT_MPU6500, DEFAULT_LSM9DS1); // sensor data of IMU without filter
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f7ff fe56 	bl	8002ac4 <IMU_Sensor_Data>
	return (IMU_RCFilter());
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fe82 	bl	8002b24 <IMU_RCFilter>
}
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <whoAmI>:
#include "MPU_sensor.h"

//static uint8_t _buffer[14];

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x70 */
uint8_t whoAmI() {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
	uint8_t readRegBuffer;
	// read the WHO AM I register
	readRegisters(WHO_AM_I_MPU_ADDR, 1, &readRegBuffer);
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	461a      	mov	r2, r3
 8002e32:	2101      	movs	r1, #1
 8002e34:	2075      	movs	r0, #117	; 0x75
 8002e36:	f000 f805 	bl	8002e44 <readRegisters>

	// return the register value
	return readRegBuffer;
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <readRegisters>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t readAddress, uint8_t numByteToRead,
		uint8_t *r_buffer) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	603a      	str	r2, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
 8002e50:	460b      	mov	r3, r1
 8002e52:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(readAddress, numByteToRead, r_buffer);
 8002e54:	79b9      	ldrb	r1, [r7, #6]
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f804 	bl	8002e68 <MPU_SPI_Read>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t readAddress, uint8_t numByteToRead, uint8_t *r_buffer) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	603a      	str	r2, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	460b      	mov	r3, r1
 8002e76:	71bb      	strb	r3, [r7, #6]
	MPU_CS(CS_SEL);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f000 f81d 	bl	8002eb8 <MPU_CS>
	uint8_t tData = readAddress | MPU_READ_CMD;
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &tData, 1, 100);
 8002e88:	f107 010f 	add.w	r1, r7, #15
 8002e8c:	2364      	movs	r3, #100	; 0x64
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <MPU_SPI_Read+0x4c>)
 8002e92:	f003 f9bb 	bl	800620c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, r_buffer, numByteToRead, 100);
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	2364      	movs	r3, #100	; 0x64
 8002e9c:	6839      	ldr	r1, [r7, #0]
 8002e9e:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <MPU_SPI_Read+0x4c>)
 8002ea0:	f003 faf8 	bl	8006494 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f000 f807 	bl	8002eb8 <MPU_CS>
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000568 	.word	0x20000568

08002eb8 <MPU_CS>:

void MPU_CS(uint8_t state) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, state);
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <MPU_CS+0x20>)
 8002ecc:	f002 fcf4 	bl	80058b8 <HAL_GPIO_WritePin>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40010c00 	.word	0x40010c00

08002edc <MPU_begin>:

int MPU_begin(MPU6500_t *pMPU6500) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

	uint8_t addr, val;

	whoAmI();
 8002ee4:	f7ff ffa0 	bl	8002e28 <whoAmI>

	if (whoAmI() == WHO_AM_I_MPU_REG_DEFAULT) {
 8002ee8:	f7ff ff9e 	bl	8002e28 <whoAmI>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b70      	cmp	r3, #112	; 0x70
 8002ef0:	d128      	bne.n	8002f44 <MPU_begin+0x68>

		// configuring MPU6500
		addr = PWR_MGMT_1;
 8002ef2:	236b      	movs	r3, #107	; 0x6b
 8002ef4:	73fb      	strb	r3, [r7, #15]
		val = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8002efa:	7bba      	ldrb	r2, [r7, #14]
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2101      	movs	r1, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f82d 	bl	8002f60 <writeRegister>

		// Disable I2C (SPI only)
		addr = USER_CTRL;
 8002f06:	236a      	movs	r3, #106	; 0x6a
 8002f08:	73fb      	strb	r3, [r7, #15]
		val = 0x10;
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8002f0e:	7bba      	ldrb	r2, [r7, #14]
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f823 	bl	8002f60 <writeRegister>

		// Configure DLPF value()
		val = 0x11;
 8002f1a:	2311      	movs	r3, #17
 8002f1c:	73bb      	strb	r3, [r7, #14]
		MPU6500_SetDLPFBandwidth(DLPF_BANDWIDTH_20HZ);
 8002f1e:	2004      	movs	r0, #4
 8002f20:	f000 f878 	bl	8003014 <MPU6500_SetDLPFBandwidth>

		// Set the full scale ranges
		MPU_writeAccFullScaleRange(pMPU6500,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f887 	bl	8003040 <MPU_writeAccFullScaleRange>
				pMPU6500->settings.aFullScaleRange);
		MPU_writeGyroFullScaleRange(pMPU6500,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8dc 	bl	80030f8 <MPU_writeGyroFullScaleRange>
				pMPU6500->settings.gFullScaleRange);
		return 1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e007      	b.n	8002f54 <MPU_begin+0x78>
	} else {
		myDebug("WHO AM I Failed!!!-> %x \r\n", whoAmI());
 8002f44:	f7ff ff70 	bl	8002e28 <whoAmI>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <MPU_begin+0x80>)
 8002f4e:	f7fe f973 	bl	8001238 <myDebug>
		return 0;
 8002f52:	2300      	movs	r3, #0
	}
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	0800ffe4 	.word	0x0800ffe4

08002f60 <writeRegister>:

/* writes a byte to MPU6500 register given a register address and data */
void writeRegister(uint8_t writeAddress, uint8_t numByteToWrite, uint8_t data) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	71bb      	strb	r3, [r7, #6]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	717b      	strb	r3, [r7, #5]
	MPU_SPI_Write(writeAddress, numByteToWrite, &data);
 8002f72:	1d7a      	adds	r2, r7, #5
 8002f74:	79b9      	ldrb	r1, [r7, #6]
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f807 	bl	8002f8c <MPU_SPI_Write>
	HAL_Delay(10);
 8002f7e:	200a      	movs	r0, #10
 8002f80:	f002 f932 	bl	80051e8 <HAL_Delay>
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t writeAddress, uint8_t numByteToWrite, uint8_t *data) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	603a      	str	r2, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	71bb      	strb	r3, [r7, #6]
	MPU_CS(CS_SEL);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7ff ff8b 	bl	8002eb8 <MPU_CS>
	SPIx_WriteRead(writeAddress);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f817 	bl	8002fd8 <SPIx_WriteRead>
	while (numByteToWrite >= 0x01) {
 8002faa:	e00a      	b.n	8002fc2 <MPU_SPI_Write+0x36>
		SPIx_WriteRead(*data);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f811 	bl	8002fd8 <SPIx_WriteRead>
		numByteToWrite--;
 8002fb6:	79bb      	ldrb	r3, [r7, #6]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	71bb      	strb	r3, [r7, #6]
		data++;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	603b      	str	r3, [r7, #0]
	while (numByteToWrite >= 0x01) {
 8002fc2:	79bb      	ldrb	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f1      	bne.n	8002fac <MPU_SPI_Write+0x20>
	}
	MPU_CS(CS_DES);
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f7ff ff75 	bl	8002eb8 <MPU_CS>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte,
 8002fe6:	f107 020f 	add.w	r2, r7, #15
 8002fea:	1df9      	adds	r1, r7, #7
 8002fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <SPIx_WriteRead+0x38>)
 8002ff6:	f003 fb66 	bl	80066c6 <HAL_SPI_TransmitReceive>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK) {
		return -1;
 8003000:	23ff      	movs	r3, #255	; 0xff
 8003002:	e000      	b.n	8003006 <SPIx_WriteRead+0x2e>
	} else {
		return receivedbyte;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000568 	.word	0x20000568

08003014 <MPU6500_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU6500_SetDLPFBandwidth(DLPFBandwidth bandwidth) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG_2, 1, bandwidth);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	461a      	mov	r2, r3
 8003022:	2101      	movs	r1, #1
 8003024:	201d      	movs	r0, #29
 8003026:	f7ff ff9b 	bl	8002f60 <writeRegister>
	writeRegister(CONFIG, 1, bandwidth);
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	461a      	mov	r2, r3
 800302e:	2101      	movs	r1, #1
 8003030:	201a      	movs	r0, #26
 8003032:	f7ff ff95 	bl	8002f60 <writeRegister>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(MPU6500_t *pMPU6500, uint8_t aScale) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = ACCEL_CONFIG;
 800304c:	231c      	movs	r3, #28
 800304e:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (aScale) {
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d83e      	bhi.n	80030d4 <MPU_writeAccFullScaleRange+0x94>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <MPU_writeAccFullScaleRange+0x1c>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	0800306d 	.word	0x0800306d
 8003060:	08003087 	.word	0x08003087
 8003064:	080030a1 	.word	0x080030a1
 8003068:	080030bb 	.word	0x080030bb
	case AFSR_2G:
		pMPU6500->sensorData.aScaleFactor = 16384.0;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8003072:	60da      	str	r2, [r3, #12]
		val = 0x00;
 8003074:	2300      	movs	r3, #0
 8003076:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003078:	7bba      	ldrb	r2, [r7, #14]
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff6e 	bl	8002f60 <writeRegister>
		break;
 8003084:	e033      	b.n	80030ee <MPU_writeAccFullScaleRange+0xae>
	case AFSR_4G:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800308c:	60da      	str	r2, [r3, #12]
		val = 0x08;
 800308e:	2308      	movs	r3, #8
 8003090:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003092:	7bba      	ldrb	r2, [r7, #14]
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2101      	movs	r1, #1
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff61 	bl	8002f60 <writeRegister>
		break;
 800309e:	e026      	b.n	80030ee <MPU_writeAccFullScaleRange+0xae>
	case AFSR_8G:
		pMPU6500->sensorData.aScaleFactor = 4096.0;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80030a6:	60da      	str	r2, [r3, #12]
		val = 0x10;
 80030a8:	2310      	movs	r3, #16
 80030aa:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 80030ac:	7bba      	ldrb	r2, [r7, #14]
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2101      	movs	r1, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff54 	bl	8002f60 <writeRegister>
		break;
 80030b8:	e019      	b.n	80030ee <MPU_writeAccFullScaleRange+0xae>
	case AFSR_16G:
		pMPU6500->sensorData.aScaleFactor = 2048.0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80030c0:	60da      	str	r2, [r3, #12]
		val = 0x18;
 80030c2:	2318      	movs	r3, #24
 80030c4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 80030c6:	7bba      	ldrb	r2, [r7, #14]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff47 	bl	8002f60 <writeRegister>
		break;
 80030d2:	e00c      	b.n	80030ee <MPU_writeAccFullScaleRange+0xae>
	default:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80030da:	60da      	str	r2, [r3, #12]
		val = 0x08;
 80030dc:	2308      	movs	r3, #8
 80030de:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 80030e0:	7bba      	ldrb	r2, [r7, #14]
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ff3a 	bl	8002f60 <writeRegister>
		break;
 80030ec:	bf00      	nop
	}
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop

080030f8 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(MPU6500_t *pMPU6500, uint8_t gScale) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = GYRO_CONFIG;
 8003104:	231b      	movs	r3, #27
 8003106:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (gScale) {
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d83a      	bhi.n	8003184 <MPU_writeGyroFullScaleRange+0x8c>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <MPU_writeGyroFullScaleRange+0x1c>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003125 	.word	0x08003125
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003155 	.word	0x08003155
 8003120:	0800316d 	.word	0x0800316d
	case GFSR_250DPS:
		pMPU6500->sensorData.gScaleFactor = 131.0;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <MPU_writeGyroFullScaleRange+0xac>)
 8003128:	611a      	str	r2, [r3, #16]
		val = 0x00;
 800312a:	2300      	movs	r3, #0
 800312c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 800312e:	7bba      	ldrb	r2, [r7, #14]
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff13 	bl	8002f60 <writeRegister>
		break;
 800313a:	e02f      	b.n	800319c <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_500DPS:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <MPU_writeGyroFullScaleRange+0xb0>)
 8003140:	611a      	str	r2, [r3, #16]
		val = 0x08;
 8003142:	2308      	movs	r3, #8
 8003144:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003146:	7bba      	ldrb	r2, [r7, #14]
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff07 	bl	8002f60 <writeRegister>
		break;
 8003152:	e023      	b.n	800319c <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_1000DPS:
		pMPU6500->sensorData.gScaleFactor = 32.8;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a15      	ldr	r2, [pc, #84]	; (80031ac <MPU_writeGyroFullScaleRange+0xb4>)
 8003158:	611a      	str	r2, [r3, #16]
		val = 0x10;
 800315a:	2310      	movs	r3, #16
 800315c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 800315e:	7bba      	ldrb	r2, [r7, #14]
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2101      	movs	r1, #1
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fefb 	bl	8002f60 <writeRegister>
		break;
 800316a:	e017      	b.n	800319c <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_2000DPS:
		pMPU6500->sensorData.gScaleFactor = 16.4;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <MPU_writeGyroFullScaleRange+0xb8>)
 8003170:	611a      	str	r2, [r3, #16]
		val = 0x18;
 8003172:	2318      	movs	r3, #24
 8003174:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003176:	7bba      	ldrb	r2, [r7, #14]
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff feef 	bl	8002f60 <writeRegister>
		break;
 8003182:	e00b      	b.n	800319c <MPU_writeGyroFullScaleRange+0xa4>
	default:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <MPU_writeGyroFullScaleRange+0xb0>)
 8003188:	611a      	str	r2, [r3, #16]
		val = 0x08;
 800318a:	2308      	movs	r3, #8
 800318c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 800318e:	7bba      	ldrb	r2, [r7, #14]
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2101      	movs	r1, #1
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fee3 	bl	8002f60 <writeRegister>
		break;
 800319a:	bf00      	nop
	}
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	43030000 	.word	0x43030000
 80031a8:	42830000 	.word	0x42830000
 80031ac:	42033333 	.word	0x42033333
 80031b0:	41833333 	.word	0x41833333

080031b4 <MPU6500_GetData>:
	pMPU6500->gyroCal.Ay = (float) Ay / (float) numCalPoints;
	pMPU6500->gyroCal.Az = (float) Az / (float) numCalPoints;
}

/* read the data, each argument should point to a array for x, y, and z */
void MPU6500_GetData(MPU6500_t *pMPU6500) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU6500

	uint8_t _buffer[14];

	_buffer[0] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_H);
 80031bc:	213b      	movs	r1, #59	; 0x3b
 80031be:	4840      	ldr	r0, [pc, #256]	; (80032c0 <MPU6500_GetData+0x10c>)
 80031c0:	f000 fa00 	bl	80035c4 <MPU6500_ReadReg>
 80031c4:	4603      	mov	r3, r0
 80031c6:	723b      	strb	r3, [r7, #8]
	_buffer[1] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_L);
 80031c8:	213c      	movs	r1, #60	; 0x3c
 80031ca:	483d      	ldr	r0, [pc, #244]	; (80032c0 <MPU6500_GetData+0x10c>)
 80031cc:	f000 f9fa 	bl	80035c4 <MPU6500_ReadReg>
 80031d0:	4603      	mov	r3, r0
 80031d2:	727b      	strb	r3, [r7, #9]
	_buffer[2] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_H);
 80031d4:	213d      	movs	r1, #61	; 0x3d
 80031d6:	483a      	ldr	r0, [pc, #232]	; (80032c0 <MPU6500_GetData+0x10c>)
 80031d8:	f000 f9f4 	bl	80035c4 <MPU6500_ReadReg>
 80031dc:	4603      	mov	r3, r0
 80031de:	72bb      	strb	r3, [r7, #10]
	_buffer[3] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_L);
 80031e0:	213e      	movs	r1, #62	; 0x3e
 80031e2:	4837      	ldr	r0, [pc, #220]	; (80032c0 <MPU6500_GetData+0x10c>)
 80031e4:	f000 f9ee 	bl	80035c4 <MPU6500_ReadReg>
 80031e8:	4603      	mov	r3, r0
 80031ea:	72fb      	strb	r3, [r7, #11]
	_buffer[4] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_H);
 80031ec:	213f      	movs	r1, #63	; 0x3f
 80031ee:	4834      	ldr	r0, [pc, #208]	; (80032c0 <MPU6500_GetData+0x10c>)
 80031f0:	f000 f9e8 	bl	80035c4 <MPU6500_ReadReg>
 80031f4:	4603      	mov	r3, r0
 80031f6:	733b      	strb	r3, [r7, #12]
	_buffer[5] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_L);
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	4831      	ldr	r0, [pc, #196]	; (80032c0 <MPU6500_GetData+0x10c>)
 80031fc:	f000 f9e2 	bl	80035c4 <MPU6500_ReadReg>
 8003200:	4603      	mov	r3, r0
 8003202:	737b      	strb	r3, [r7, #13]

	_buffer[6] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_H);
 8003204:	2143      	movs	r1, #67	; 0x43
 8003206:	482e      	ldr	r0, [pc, #184]	; (80032c0 <MPU6500_GetData+0x10c>)
 8003208:	f000 f9dc 	bl	80035c4 <MPU6500_ReadReg>
 800320c:	4603      	mov	r3, r0
 800320e:	73bb      	strb	r3, [r7, #14]
	_buffer[7] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_L);
 8003210:	2144      	movs	r1, #68	; 0x44
 8003212:	482b      	ldr	r0, [pc, #172]	; (80032c0 <MPU6500_GetData+0x10c>)
 8003214:	f000 f9d6 	bl	80035c4 <MPU6500_ReadReg>
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]
	_buffer[8] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_H);
 800321c:	2145      	movs	r1, #69	; 0x45
 800321e:	4828      	ldr	r0, [pc, #160]	; (80032c0 <MPU6500_GetData+0x10c>)
 8003220:	f000 f9d0 	bl	80035c4 <MPU6500_ReadReg>
 8003224:	4603      	mov	r3, r0
 8003226:	743b      	strb	r3, [r7, #16]
	_buffer[9] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_L);
 8003228:	2146      	movs	r1, #70	; 0x46
 800322a:	4825      	ldr	r0, [pc, #148]	; (80032c0 <MPU6500_GetData+0x10c>)
 800322c:	f000 f9ca 	bl	80035c4 <MPU6500_ReadReg>
 8003230:	4603      	mov	r3, r0
 8003232:	747b      	strb	r3, [r7, #17]
	_buffer[10] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_H);
 8003234:	2147      	movs	r1, #71	; 0x47
 8003236:	4822      	ldr	r0, [pc, #136]	; (80032c0 <MPU6500_GetData+0x10c>)
 8003238:	f000 f9c4 	bl	80035c4 <MPU6500_ReadReg>
 800323c:	4603      	mov	r3, r0
 800323e:	74bb      	strb	r3, [r7, #18]
	_buffer[11] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_L);
 8003240:	2148      	movs	r1, #72	; 0x48
 8003242:	481f      	ldr	r0, [pc, #124]	; (80032c0 <MPU6500_GetData+0x10c>)
 8003244:	f000 f9be 	bl	80035c4 <MPU6500_ReadReg>
 8003248:	4603      	mov	r3, r0
 800324a:	74fb      	strb	r3, [r7, #19]

	//readRegisters(ACCEL_OUT, 14, _buffer);

	// combine into 16 bit values
	pMPU6500->rawData.ax = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 800324c:	7a3b      	ldrb	r3, [r7, #8]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	b21a      	sxth	r2, r3
 8003252:	7a7b      	ldrb	r3, [r7, #9]
 8003254:	b21b      	sxth	r3, r3
 8003256:	4313      	orrs	r3, r2
 8003258:	b21a      	sxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	801a      	strh	r2, [r3, #0]
	pMPU6500->rawData.ay = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 800325e:	7abb      	ldrb	r3, [r7, #10]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	b21a      	sxth	r2, r3
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	b21b      	sxth	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b21a      	sxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	805a      	strh	r2, [r3, #2]
	pMPU6500->rawData.az = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 8003270:	7b3b      	ldrb	r3, [r7, #12]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	b21a      	sxth	r2, r3
 8003276:	7b7b      	ldrb	r3, [r7, #13]
 8003278:	b21b      	sxth	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b21a      	sxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	809a      	strh	r2, [r3, #4]

	pMPU6500->rawData.gx = (((int16_t) _buffer[6]) << 8) | _buffer[7];
 8003282:	7bbb      	ldrb	r3, [r7, #14]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b21a      	sxth	r2, r3
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	b21b      	sxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b21a      	sxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	80da      	strh	r2, [r3, #6]
	pMPU6500->rawData.gy = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 8003294:	7c3b      	ldrb	r3, [r7, #16]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	b21a      	sxth	r2, r3
 800329a:	7c7b      	ldrb	r3, [r7, #17]
 800329c:	b21b      	sxth	r3, r3
 800329e:	4313      	orrs	r3, r2
 80032a0:	b21a      	sxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	811a      	strh	r2, [r3, #8]
	pMPU6500->rawData.gz = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 80032a6:	7cbb      	ldrb	r3, [r7, #18]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	815a      	strh	r2, [r3, #10]

}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000568 	.word	0x20000568

080032c4 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_calcAttitude(MPU6500_t *pMPU6500) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	// Read processed data
	MPU_readProcessedData(pMPU6500);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f807 	bl	80032e0 <MPU_readProcessedData>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	0000      	movs	r0, r0
 80032dc:	0000      	movs	r0, r0
	...

080032e0 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_readProcessedData(MPU6500_t *pMPU6500) {
 80032e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af04      	add	r7, sp, #16
 80032e8:	6078      	str	r0, [r7, #4]
	// Get raw values from the IMU
	MPU6500_GetData(pMPU6500);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff62 	bl	80031b4 <MPU6500_GetData>

	// Compensate for accel offset
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax - 540.2096;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd f884 	bl	8000404 <__aeabi_i2d>
 80032fc:	a39e      	add	r3, pc, #632	; (adr r3, 8003578 <MPU_readProcessedData+0x298>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f7fc ff31 	bl	8000168 <__aeabi_dsub>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	f7fd fbdb 	bl	8000ac8 <__aeabi_d2f>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	615a      	str	r2, [r3, #20]
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay - 196.684;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f870 	bl	8000404 <__aeabi_i2d>
 8003324:	a396      	add	r3, pc, #600	; (adr r3, 8003580 <MPU_readProcessedData+0x2a0>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fc ff1d 	bl	8000168 <__aeabi_dsub>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fbc7 	bl	8000ac8 <__aeabi_d2f>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
	pMPU6500->sensorData.az = pMPU6500->rawData.az - 1538.457;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f85c 	bl	8000404 <__aeabi_i2d>
 800334c:	a38e      	add	r3, pc, #568	; (adr r3, 8003588 <MPU_readProcessedData+0x2a8>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ff09 	bl	8000168 <__aeabi_dsub>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	f7fd fbb3 	bl	8000ac8 <__aeabi_d2f>
 8003362:	4602      	mov	r2, r0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	61da      	str	r2, [r3, #28]

// Convert accelerometer values to g's
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ pMPU6500->sensorData.aScaleFactor;
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd fcb4 	bl	8000cdc <__aeabi_i2f>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fd fdb5 	bl	8000eec <__aeabi_fdiv>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	615a      	str	r2, [r3, #20]
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ pMPU6500->sensorData.aScaleFactor;
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fca3 	bl	8000cdc <__aeabi_i2f>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7fd fda4 	bl	8000eec <__aeabi_fdiv>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ pMPU6500->sensorData.aScaleFactor;
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fc92 	bl	8000cdc <__aeabi_i2f>
 80033b8:	4602      	mov	r2, r0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	4619      	mov	r1, r3
 80033c0:	4610      	mov	r0, r2
 80033c2:	f7fd fd93 	bl	8000eec <__aeabi_fdiv>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	61da      	str	r2, [r3, #28]

// Compensate for gyro offset
	pMPU6500->sensorData.gx = pMPU6500->rawData.gx - (-249.209);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f815 	bl	8000404 <__aeabi_i2d>
 80033da:	a36d      	add	r3, pc, #436	; (adr r3, 8003590 <MPU_readProcessedData+0x2b0>)
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f7fc fec4 	bl	800016c <__adddf3>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fb6c 	bl	8000ac8 <__aeabi_d2f>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = pMPU6500->rawData.gy - 283.064;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd f801 	bl	8000404 <__aeabi_i2d>
 8003402:	a365      	add	r3, pc, #404	; (adr r3, 8003598 <MPU_readProcessedData+0x2b8>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f7fc feae 	bl	8000168 <__aeabi_dsub>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	f7fd fb58 	bl	8000ac8 <__aeabi_d2f>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = pMPU6500->rawData.gz - (-3.174);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fc ffed 	bl	8000404 <__aeabi_i2d>
 800342a:	a35d      	add	r3, pc, #372	; (adr r3, 80035a0 <MPU_readProcessedData+0x2c0>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fc fe9c 	bl	800016c <__adddf3>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fd fb44 	bl	8000ac8 <__aeabi_d2f>
 8003440:	4602      	mov	r2, r0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
//			/ pMPU6500->sensorData.gScaleFactor);
//	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
//			/ pMPU6500->sensorData.gScaleFactor);

// Convert gyro values to rad/s
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1a      	ldr	r2, [r3, #32]
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f7fd fd4b 	bl	8000eec <__aeabi_fdiv>
 8003456:	4603      	mov	r3, r0
 8003458:	4618      	mov	r0, r3
 800345a:	f7fc ffe5 	bl	8000428 <__aeabi_f2d>
 800345e:	a352      	add	r3, pc, #328	; (adr r3, 80035a8 <MPU_readProcessedData+0x2c8>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd f838 	bl	80004d8 <__aeabi_dmul>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f7fd fb2a 	bl	8000ac8 <__aeabi_d2f>
 8003474:	4602      	mov	r2, r0
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f7fd fd31 	bl	8000eec <__aeabi_fdiv>
 800348a:	4603      	mov	r3, r0
 800348c:	4618      	mov	r0, r3
 800348e:	f7fc ffcb 	bl	8000428 <__aeabi_f2d>
 8003492:	a345      	add	r3, pc, #276	; (adr r3, 80035a8 <MPU_readProcessedData+0x2c8>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f7fd f81e 	bl	80004d8 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7fd fb10 	bl	8000ac8 <__aeabi_d2f>
 80034a8:	4602      	mov	r2, r0
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fd fd17 	bl	8000eec <__aeabi_fdiv>
 80034be:	4603      	mov	r3, r0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fc ffb1 	bl	8000428 <__aeabi_f2d>
 80034c6:	a338      	add	r3, pc, #224	; (adr r3, 80035a8 <MPU_readProcessedData+0x2c8>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fd f804 	bl	80004d8 <__aeabi_dmul>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7fd faf6 	bl	8000ac8 <__aeabi_d2f>
 80034dc:	4602      	mov	r2, r0
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28

	myDebug("-----Without filter, Sensor Data-----\r\n");
 80034e2:	4833      	ldr	r0, [pc, #204]	; (80035b0 <MPU_readProcessedData+0x2d0>)
 80034e4:	f7fd fea8 	bl	8001238 <myDebug>
	myDebug("ACCEL (m/s^2)\r\n");
 80034e8:	4832      	ldr	r0, [pc, #200]	; (80035b4 <MPU_readProcessedData+0x2d4>)
 80034ea:	f7fd fea5 	bl	8001238 <myDebug>
	myDebug(" ax = %.0f \tay = %.0f \taz = %.0f \r\n", pMPU6500->sensorData.ax,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc ff98 	bl	8000428 <__aeabi_f2d>
 80034f8:	4680      	mov	r8, r0
 80034fa:	4689      	mov	r9, r1
			pMPU6500->sensorData.ay, pMPU6500->sensorData.az);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
	myDebug(" ax = %.0f \tay = %.0f \taz = %.0f \r\n", pMPU6500->sensorData.ax,
 8003500:	4618      	mov	r0, r3
 8003502:	f7fc ff91 	bl	8000428 <__aeabi_f2d>
 8003506:	4604      	mov	r4, r0
 8003508:	460d      	mov	r5, r1
			pMPU6500->sensorData.ay, pMPU6500->sensorData.az);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
	myDebug(" ax = %.0f \tay = %.0f \taz = %.0f \r\n", pMPU6500->sensorData.ax,
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc ff8a 	bl	8000428 <__aeabi_f2d>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800351c:	e9cd 4500 	strd	r4, r5, [sp]
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	4824      	ldr	r0, [pc, #144]	; (80035b8 <MPU_readProcessedData+0x2d8>)
 8003526:	f7fd fe87 	bl	8001238 <myDebug>
	myDebug("GYRO (rad/s) \r\n");
 800352a:	4824      	ldr	r0, [pc, #144]	; (80035bc <MPU_readProcessedData+0x2dc>)
 800352c:	f7fd fe84 	bl	8001238 <myDebug>
	myDebug(" gx = %.0f \tgy = %.0f \tgz = %.0f \r\n", pMPU6500->sensorData.gx,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fc ff77 	bl	8000428 <__aeabi_f2d>
 800353a:	4680      	mov	r8, r0
 800353c:	4689      	mov	r9, r1
			pMPU6500->sensorData.gy, pMPU6500->sensorData.gz);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	myDebug(" gx = %.0f \tgy = %.0f \tgz = %.0f \r\n", pMPU6500->sensorData.gx,
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc ff70 	bl	8000428 <__aeabi_f2d>
 8003548:	4604      	mov	r4, r0
 800354a:	460d      	mov	r5, r1
			pMPU6500->sensorData.gy, pMPU6500->sensorData.gz);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	myDebug(" gx = %.0f \tgy = %.0f \tgz = %.0f \r\n", pMPU6500->sensorData.gx,
 8003550:	4618      	mov	r0, r3
 8003552:	f7fc ff69 	bl	8000428 <__aeabi_f2d>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800355e:	e9cd 4500 	strd	r4, r5, [sp]
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	4816      	ldr	r0, [pc, #88]	; (80035c0 <MPU_readProcessedData+0x2e0>)
 8003568:	f7fd fe66 	bl	8001238 <myDebug>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003576:	bf00      	nop
 8003578:	42c3c9ef 	.word	0x42c3c9ef
 800357c:	4080e1ad 	.word	0x4080e1ad
 8003580:	53f7ced9 	.word	0x53f7ced9
 8003584:	406895e3 	.word	0x406895e3
 8003588:	f7ced917 	.word	0xf7ced917
 800358c:	409809d3 	.word	0x409809d3
 8003590:	20c49ba6 	.word	0x20c49ba6
 8003594:	406f26b0 	.word	0x406f26b0
 8003598:	24dd2f1b 	.word	0x24dd2f1b
 800359c:	4071b106 	.word	0x4071b106
 80035a0:	1cac0831 	.word	0x1cac0831
 80035a4:	4009645a 	.word	0x4009645a
 80035a8:	a226e211 	.word	0xa226e211
 80035ac:	3f91df46 	.word	0x3f91df46
 80035b0:	08010000 	.word	0x08010000
 80035b4:	08010028 	.word	0x08010028
 80035b8:	08010038 	.word	0x08010038
 80035bc:	0801005c 	.word	0x0801005c
 80035c0:	0801006c 	.word	0x0801006c

080035c4 <MPU6500_ReadReg>:

uint8_t MPU6500_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	70fb      	strb	r3, [r7, #3]
	MPU_CS(CS_SEL);
 80035da:	2000      	movs	r0, #0
 80035dc:	f7ff fc6c 	bl	8002eb8 <MPU_CS>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 80035e0:	1cf9      	adds	r1, r7, #3
 80035e2:	2364      	movs	r3, #100	; 0x64
 80035e4:	2201      	movs	r2, #1
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f002 fe10 	bl	800620c <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 80035ec:	f107 010f 	add.w	r1, r7, #15
 80035f0:	2364      	movs	r3, #100	; 0x64
 80035f2:	2201      	movs	r2, #1
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f002 ff4d 	bl	8006494 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff fc5c 	bl	8002eb8 <MPU_CS>
	return val;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <LSM9DS1_ReadReg>:
 * @brief  Read data from Specific Register address of LSM9DS1
 * @param  hspi1 pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LSM9DS1_ReadReg(SPI_HandleTypeDef *hspi1, uint8_t add) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800361e:	b2db      	uxtb	r3, r3
 8003620:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 8003622:	2200      	movs	r2, #0
 8003624:	2110      	movs	r1, #16
 8003626:	480d      	ldr	r0, [pc, #52]	; (800365c <LSM9DS1_ReadReg+0x50>)
 8003628:	f002 f946 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1, &add, 1, 100);
 800362c:	1cf9      	adds	r1, r7, #3
 800362e:	2364      	movs	r3, #100	; 0x64
 8003630:	2201      	movs	r2, #1
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f002 fdea 	bl	800620c <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi1, &val, 1, 100);
 8003638:	f107 010f 	add.w	r1, r7, #15
 800363c:	2364      	movs	r3, #100	; 0x64
 800363e:	2201      	movs	r2, #1
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f002 ff27 	bl	8006494 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 8003646:	2201      	movs	r2, #1
 8003648:	2110      	movs	r1, #16
 800364a:	4804      	ldr	r0, [pc, #16]	; (800365c <LSM9DS1_ReadReg+0x50>)
 800364c:	f002 f934 	bl	80058b8 <HAL_GPIO_WritePin>
	return val;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40010800 	.word	0x40010800

08003660 <LSM9DS1_WriteReg>:
 * @brief  Write on Specific Register address of LSM9DS1
 * @param  hspi1 pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address where certain value is to be written
 */
void LSM9DS1_WriteReg(SPI_HandleTypeDef *hspi1, uint8_t add, uint8_t val) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
 800366c:	4613      	mov	r3, r2
 800366e:	70bb      	strb	r3, [r7, #2]
	add &= 0x7F;  // clear the MSB to indicate a write operation
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003676:	b2db      	uxtb	r3, r3
 8003678:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 800367a:	2200      	movs	r2, #0
 800367c:	2110      	movs	r1, #16
 800367e:	480c      	ldr	r0, [pc, #48]	; (80036b0 <LSM9DS1_WriteReg+0x50>)
 8003680:	f002 f91a 	bl	80058b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1, &add, 1, 100);
 8003684:	1cf9      	adds	r1, r7, #3
 8003686:	2364      	movs	r3, #100	; 0x64
 8003688:	2201      	movs	r2, #1
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f002 fdbe 	bl	800620c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, &val, 1, 100);
 8003690:	1cb9      	adds	r1, r7, #2
 8003692:	2364      	movs	r3, #100	; 0x64
 8003694:	2201      	movs	r2, #1
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f002 fdb8 	bl	800620c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 800369c:	2201      	movs	r2, #1
 800369e:	2110      	movs	r1, #16
 80036a0:	4803      	ldr	r0, [pc, #12]	; (80036b0 <LSM9DS1_WriteReg+0x50>)
 80036a2:	f002 f909 	bl	80058b8 <HAL_GPIO_WritePin>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40010800 	.word	0x40010800

080036b4 <LSM9DS1_Init>:
 * @brief  Initialize LSM9DS1 to work in 16-bit, 1.25Hz ODR, ±4 Gauss and Continuous conversion Mode
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  ctrl2 Control Register Value to choose LSM9DS1 sensor Scale
 */
int LSM9DS1_Init(SPI_HandleTypeDef *hspi1, uint8_t ctrl2) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl1 = 0x74; // set the magnetic resolution to 16-bit, 20 Hz ODR, UHP mode in X-Y axis
 80036c0:	2374      	movs	r3, #116	; 0x74
 80036c2:	73fb      	strb	r3, [r7, #15]
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG1_M, ctrl1);
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	461a      	mov	r2, r3
 80036c8:	2120      	movs	r1, #32
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffc8 	bl	8003660 <LSM9DS1_WriteReg>

	/* Change the full-scale range to ±4 Gauss */

	//value to set the full-scale range
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG2_M, ctrl2);
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	461a      	mov	r2, r3
 80036d4:	2121      	movs	r1, #33	; 0x21
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff ffc2 	bl	8003660 <LSM9DS1_WriteReg>

	/* Change the control register 3 to continuous conversion mode */

	uint8_t ctrl3 = 0x00; // value to set the continuous conversion mode
 80036dc:	2300      	movs	r3, #0
 80036de:	73bb      	strb	r3, [r7, #14]
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG3_M, ctrl3);
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
 80036e2:	461a      	mov	r2, r3
 80036e4:	2122      	movs	r1, #34	; 0x22
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ffba 	bl	8003660 <LSM9DS1_WriteReg>

	uint8_t ctrl4 = 0x0C; // value to set the UHP mode on Z-axis
 80036ec:	230c      	movs	r3, #12
 80036ee:	737b      	strb	r3, [r7, #13]
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG4_M, ctrl4);
 80036f0:	7b7b      	ldrb	r3, [r7, #13]
 80036f2:	461a      	mov	r2, r3
 80036f4:	2123      	movs	r1, #35	; 0x23
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffb2 	bl	8003660 <LSM9DS1_WriteReg>

	return 1;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <LSM9DS1_ReadData>:

void LSM9DS1_ReadData(lsm9ds1_t *pLSM9DS1) {
 8003708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800370c:	b08a      	sub	sp, #40	; 0x28
 800370e:	af06      	add	r7, sp, #24
 8003710:	6078      	str	r0, [r7, #4]
	uint8_t Mag_Data[6];
	Mag_Data[0] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_L_M);
 8003712:	2128      	movs	r1, #40	; 0x28
 8003714:	4864      	ldr	r0, [pc, #400]	; (80038a8 <LSM9DS1_ReadData+0x1a0>)
 8003716:	f7ff ff79 	bl	800360c <LSM9DS1_ReadReg>
 800371a:	4603      	mov	r3, r0
 800371c:	723b      	strb	r3, [r7, #8]
	Mag_Data[1] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_H_M);
 800371e:	2129      	movs	r1, #41	; 0x29
 8003720:	4861      	ldr	r0, [pc, #388]	; (80038a8 <LSM9DS1_ReadData+0x1a0>)
 8003722:	f7ff ff73 	bl	800360c <LSM9DS1_ReadReg>
 8003726:	4603      	mov	r3, r0
 8003728:	727b      	strb	r3, [r7, #9]
	Mag_Data[2] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_L_M);
 800372a:	212a      	movs	r1, #42	; 0x2a
 800372c:	485e      	ldr	r0, [pc, #376]	; (80038a8 <LSM9DS1_ReadData+0x1a0>)
 800372e:	f7ff ff6d 	bl	800360c <LSM9DS1_ReadReg>
 8003732:	4603      	mov	r3, r0
 8003734:	72bb      	strb	r3, [r7, #10]
	Mag_Data[3] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_H_M);
 8003736:	212b      	movs	r1, #43	; 0x2b
 8003738:	485b      	ldr	r0, [pc, #364]	; (80038a8 <LSM9DS1_ReadData+0x1a0>)
 800373a:	f7ff ff67 	bl	800360c <LSM9DS1_ReadReg>
 800373e:	4603      	mov	r3, r0
 8003740:	72fb      	strb	r3, [r7, #11]
	Mag_Data[4] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_L_M);
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	4858      	ldr	r0, [pc, #352]	; (80038a8 <LSM9DS1_ReadData+0x1a0>)
 8003746:	f7ff ff61 	bl	800360c <LSM9DS1_ReadReg>
 800374a:	4603      	mov	r3, r0
 800374c:	733b      	strb	r3, [r7, #12]
	Mag_Data[5] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_H_M);
 800374e:	212d      	movs	r1, #45	; 0x2d
 8003750:	4855      	ldr	r0, [pc, #340]	; (80038a8 <LSM9DS1_ReadData+0x1a0>)
 8003752:	f7ff ff5b 	bl	800360c <LSM9DS1_ReadReg>
 8003756:	4603      	mov	r3, r0
 8003758:	737b      	strb	r3, [r7, #13]

	pLSM9DS1->m_raw_data.mx = (int16_t) ((Mag_Data[1] << 8) | Mag_Data[0]);
 800375a:	7a7b      	ldrb	r3, [r7, #9]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	b21a      	sxth	r2, r3
 8003760:	7a3b      	ldrb	r3, [r7, #8]
 8003762:	b21b      	sxth	r3, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	b21a      	sxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	801a      	strh	r2, [r3, #0]
	pLSM9DS1->m_raw_data.my = (int16_t) ((Mag_Data[3] << 8) | Mag_Data[2]);
 800376c:	7afb      	ldrb	r3, [r7, #11]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	b21a      	sxth	r2, r3
 8003772:	7abb      	ldrb	r3, [r7, #10]
 8003774:	b21b      	sxth	r3, r3
 8003776:	4313      	orrs	r3, r2
 8003778:	b21a      	sxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	805a      	strh	r2, [r3, #2]
	pLSM9DS1->m_raw_data.mz = (int16_t) ((Mag_Data[5] << 8) | Mag_Data[4]);
 800377e:	7b7b      	ldrb	r3, [r7, #13]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	b21a      	sxth	r2, r3
 8003784:	7b3b      	ldrb	r3, [r7, #12]
 8003786:	b21b      	sxth	r3, r3
 8003788:	4313      	orrs	r3, r2
 800378a:	b21a      	sxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	809a      	strh	r2, [r3, #4]

	pLSM9DS1->m_sensor_data.mx = (float) (pLSM9DS1->m_raw_data.mx
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd faa0 	bl	8000cdc <__aeabi_i2f>
 800379c:	4603      	mov	r3, r0
 800379e:	4943      	ldr	r1, [pc, #268]	; (80038ac <LSM9DS1_ReadData+0x1a4>)
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd faef 	bl	8000d84 <__aeabi_fmul>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
			* LSM9DS1_SENSITIVITY);
	pLSM9DS1->m_sensor_data.my = (float) (pLSM9DS1->m_raw_data.my
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd fa91 	bl	8000cdc <__aeabi_i2f>
 80037ba:	4603      	mov	r3, r0
 80037bc:	493b      	ldr	r1, [pc, #236]	; (80038ac <LSM9DS1_ReadData+0x1a4>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fae0 	bl	8000d84 <__aeabi_fmul>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	60da      	str	r2, [r3, #12]
			* LSM9DS1_SENSITIVITY);
	pLSM9DS1->m_sensor_data.mz = (float) (pLSM9DS1->m_raw_data.mz
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fa82 	bl	8000cdc <__aeabi_i2f>
 80037d8:	4603      	mov	r3, r0
 80037da:	4934      	ldr	r1, [pc, #208]	; (80038ac <LSM9DS1_ReadData+0x1a4>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fad1 	bl	8000d84 <__aeabi_fmul>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]
			* LSM9DS1_SENSITIVITY);

	pLSM9DS1->m_sensor_data.total_mag = sqrt(
			pLSM9DS1->m_sensor_data.mx * pLSM9DS1->m_sensor_data.mx
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f7fd fac5 	bl	8000d84 <__aeabi_fmul>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461c      	mov	r4, r3
					+ pLSM9DS1->m_sensor_data.my * pLSM9DS1->m_sensor_data.my
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7fd fabb 	bl	8000d84 <__aeabi_fmul>
 800380e:	4603      	mov	r3, r0
 8003810:	4619      	mov	r1, r3
 8003812:	4620      	mov	r0, r4
 8003814:	f7fd f9ae 	bl	8000b74 <__addsf3>
 8003818:	4603      	mov	r3, r0
 800381a:	461c      	mov	r4, r3
					+ pLSM9DS1->m_sensor_data.mz * pLSM9DS1->m_sensor_data.mz);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f7fd faac 	bl	8000d84 <__aeabi_fmul>
 800382c:	4603      	mov	r3, r0
 800382e:	4619      	mov	r1, r3
 8003830:	4620      	mov	r0, r4
 8003832:	f7fd f99f 	bl	8000b74 <__addsf3>
 8003836:	4603      	mov	r3, r0
	pLSM9DS1->m_sensor_data.total_mag = sqrt(
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fdf5 	bl	8000428 <__aeabi_f2d>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	f009 feb3 	bl	800d5b0 <sqrt>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//myDebug("-----Without filter, Sensor Data of Magnetometer-----\r\n");
	myDebug("MAG (uT)\r\n");
 8003854:	4816      	ldr	r0, [pc, #88]	; (80038b0 <LSM9DS1_ReadData+0x1a8>)
 8003856:	f7fd fcef 	bl	8001238 <myDebug>
	myDebug(" mx = %f \tmy = %f \tmz = %f\r\nTotal Magenotometer = %f uT\r\n",
			pLSM9DS1->m_sensor_data.mx, pLSM9DS1->m_sensor_data.my,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
	myDebug(" mx = %f \tmy = %f \tmz = %f\r\nTotal Magenotometer = %f uT\r\n",
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fde2 	bl	8000428 <__aeabi_f2d>
 8003864:	4680      	mov	r8, r0
 8003866:	4689      	mov	r9, r1
			pLSM9DS1->m_sensor_data.mx, pLSM9DS1->m_sensor_data.my,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
	myDebug(" mx = %f \tmy = %f \tmz = %f\r\nTotal Magenotometer = %f uT\r\n",
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fddb 	bl	8000428 <__aeabi_f2d>
 8003872:	4604      	mov	r4, r0
 8003874:	460d      	mov	r5, r1
			pLSM9DS1->m_sensor_data.mz, pLSM9DS1->m_sensor_data.total_mag);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
	myDebug(" mx = %f \tmy = %f \tmz = %f\r\nTotal Magenotometer = %f uT\r\n",
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fdd4 	bl	8000428 <__aeabi_f2d>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003886:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800388a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800388e:	e9cd 4500 	strd	r4, r5, [sp]
 8003892:	4642      	mov	r2, r8
 8003894:	464b      	mov	r3, r9
 8003896:	4807      	ldr	r0, [pc, #28]	; (80038b4 <LSM9DS1_ReadData+0x1ac>)
 8003898:	f7fd fcce 	bl	8001238 <myDebug>
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038a6:	bf00      	nop
 80038a8:	20000568 	.word	0x20000568
 80038ac:	3d6d9168 	.word	0x3d6d9168
 80038b0:	08010090 	.word	0x08010090
 80038b4:	0801009c 	.word	0x0801009c

080038b8 <WAIT_FOR_HANDSHAKE>:
extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

//extern uint8_t tx[5] = {1,2,3,4,5};

void WAIT_FOR_HANDSHAKE() {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 80038be:	2207      	movs	r2, #7
 80038c0:	2100      	movs	r1, #0
 80038c2:	485b      	ldr	r0, [pc, #364]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 80038c4:	f005 f84e 	bl	8008964 <memset>
	OBC_HANDSHAKE_FLAG = 0;
 80038c8:	4b5a      	ldr	r3, [pc, #360]	; (8003a34 <WAIT_FOR_HANDSHAKE+0x17c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart3, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK){
 80038ce:	f641 3358 	movw	r3, #7000	; 0x1b58
 80038d2:	2207      	movs	r2, #7
 80038d4:	4956      	ldr	r1, [pc, #344]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 80038d6:	4858      	ldr	r0, [pc, #352]	; (8003a38 <WAIT_FOR_HANDSHAKE+0x180>)
 80038d8:	f004 fa03 	bl	8007ce2 <HAL_UART_Receive>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8094 	bne.w	8003a0c <WAIT_FOR_HANDSHAKE+0x154>
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 80038e4:	4855      	ldr	r0, [pc, #340]	; (8003a3c <WAIT_FOR_HANDSHAKE+0x184>)
 80038e6:	f7fd fca7 	bl	8001238 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e00a      	b.n	8003906 <WAIT_FOR_HANDSHAKE+0x4e>
			myDebug("%02x ", MainCMDHs[i]);
 80038f0:	4a4f      	ldr	r2, [pc, #316]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4413      	add	r3, r2
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	4851      	ldr	r0, [pc, #324]	; (8003a40 <WAIT_FOR_HANDSHAKE+0x188>)
 80038fc:	f7fd fc9c 	bl	8001238 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3301      	adds	r3, #1
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b06      	cmp	r3, #6
 800390a:	ddf1      	ble.n	80038f0 <WAIT_FOR_HANDSHAKE+0x38>
		}
		myDebug("\n");
 800390c:	484d      	ldr	r0, [pc, #308]	; (8003a44 <WAIT_FOR_HANDSHAKE+0x18c>)
 800390e:	f7fd fc93 	bl	8001238 <myDebug>

		uint8_t header = 0x00;
 8003912:	2300      	movs	r3, #0
 8003914:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	79fa      	ldrb	r2, [r7, #7]
 800391c:	429a      	cmp	r2, r3
 800391e:	d111      	bne.n	8003944 <WAIT_FOR_HANDSHAKE+0x8c>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e00b      	b.n	800393e <WAIT_FOR_HANDSHAKE+0x86>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	3301      	adds	r3, #1
 800392a:	4a41      	ldr	r2, [pc, #260]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 800392c:	5cd1      	ldrb	r1, [r2, r3]
 800392e:	4a40      	ldr	r2, [pc, #256]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	460a      	mov	r2, r1
 8003936:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	3301      	adds	r3, #1
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b06      	cmp	r3, #6
 8003942:	d9f0      	bls.n	8003926 <WAIT_FOR_HANDSHAKE+0x6e>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 8003944:	4b3a      	ldr	r3, [pc, #232]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b53      	cmp	r3, #83	; 0x53
 800394a:	d130      	bne.n	80039ae <WAIT_FOR_HANDSHAKE+0xf6>
 800394c:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 800394e:	795b      	ldrb	r3, [r3, #5]
 8003950:	2b7e      	cmp	r3, #126	; 0x7e
 8003952:	d12c      	bne.n	80039ae <WAIT_FOR_HANDSHAKE+0xf6>
			myDebug("--> Command Acknowledged successful!\n");
 8003954:	483c      	ldr	r0, [pc, #240]	; (8003a48 <WAIT_FOR_HANDSHAKE+0x190>)
 8003956:	f7fd fc6f 	bl	8001238 <myDebug>
			if (HAL_UART_Transmit(&huart3, MainCMDHs, ACK_LENGTH, 2000)
 800395a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800395e:	2207      	movs	r2, #7
 8003960:	4933      	ldr	r1, [pc, #204]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 8003962:	4835      	ldr	r0, [pc, #212]	; (8003a38 <WAIT_FOR_HANDSHAKE+0x180>)
 8003964:	f004 f932 	bl	8007bcc <HAL_UART_Transmit>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d15c      	bne.n	8003a28 <WAIT_FOR_HANDSHAKE+0x170>
					== HAL_OK){
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 800396e:	4837      	ldr	r0, [pc, #220]	; (8003a4c <WAIT_FOR_HANDSHAKE+0x194>)
 8003970:	f7fd fc62 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e00a      	b.n	8003990 <WAIT_FOR_HANDSHAKE+0xd8>
					myDebug("%02x ", MainCMDHs[i]);
 800397a:	4a2d      	ldr	r2, [pc, #180]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	482e      	ldr	r0, [pc, #184]	; (8003a40 <WAIT_FOR_HANDSHAKE+0x188>)
 8003986:	f7fd fc57 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3301      	adds	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b06      	cmp	r3, #6
 8003994:	ddf1      	ble.n	800397a <WAIT_FOR_HANDSHAKE+0xc2>
				}
				myDebug("\n");
 8003996:	482b      	ldr	r0, [pc, #172]	; (8003a44 <WAIT_FOR_HANDSHAKE+0x18c>)
 8003998:	f7fd fc4e 	bl	8001238 <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <WAIT_FOR_HANDSHAKE+0x17c>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 80039a2:	2207      	movs	r2, #7
 80039a4:	2100      	movs	r1, #0
 80039a6:	4822      	ldr	r0, [pc, #136]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 80039a8:	f004 ffdc 	bl	8008964 <memset>
			if (HAL_UART_Transmit(&huart3, MainCMDHs, ACK_LENGTH, 2000)
 80039ac:	e03c      	b.n	8003a28 <WAIT_FOR_HANDSHAKE+0x170>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 80039ae:	4828      	ldr	r0, [pc, #160]	; (8003a50 <WAIT_FOR_HANDSHAKE+0x198>)
 80039b0:	f7fd fc42 	bl	8001238 <myDebug>
			if (HAL_UART_Transmit(&huart3, MainCMDHs, ACK_LENGTH, 2000)
 80039b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039b8:	2207      	movs	r2, #7
 80039ba:	491d      	ldr	r1, [pc, #116]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 80039bc:	481e      	ldr	r0, [pc, #120]	; (8003a38 <WAIT_FOR_HANDSHAKE+0x180>)
 80039be:	f004 f905 	bl	8007bcc <HAL_UART_Transmit>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d12f      	bne.n	8003a28 <WAIT_FOR_HANDSHAKE+0x170>
					== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 80039c8:	4822      	ldr	r0, [pc, #136]	; (8003a54 <WAIT_FOR_HANDSHAKE+0x19c>)
 80039ca:	f7fd fc35 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	e00a      	b.n	80039ea <WAIT_FOR_HANDSHAKE+0x132>
					myDebug("%02x ", MainCMDHs[i]);
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	4619      	mov	r1, r3
 80039de:	4818      	ldr	r0, [pc, #96]	; (8003a40 <WAIT_FOR_HANDSHAKE+0x188>)
 80039e0:	f7fd fc2a 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	ddf1      	ble.n	80039d4 <WAIT_FOR_HANDSHAKE+0x11c>
				}
				myDebug("\n");
 80039f0:	4814      	ldr	r0, [pc, #80]	; (8003a44 <WAIT_FOR_HANDSHAKE+0x18c>)
 80039f2:	f7fd fc21 	bl	8001238 <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 80039f6:	2207      	movs	r2, #7
 80039f8:	2100      	movs	r1, #0
 80039fa:	480d      	ldr	r0, [pc, #52]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 80039fc:	f004 ffb2 	bl	8008964 <memset>
				OBC_HANDSHAKE_FLAG = 0;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <WAIT_FOR_HANDSHAKE+0x17c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 8003a06:	f7ff ff57 	bl	80038b8 <WAIT_FOR_HANDSHAKE>
		OBC_HANDSHAKE_FLAG = 0;
		myDebug("*** Handshake Command receive failed, try again!\n");
		memset(MainCMDHs, '\0', ACK_LENGTH);
		WAIT_FOR_HANDSHAKE();
	}
}
 8003a0a:	e00d      	b.n	8003a28 <WAIT_FOR_HANDSHAKE+0x170>
		OBC_HANDSHAKE_FLAG = 0;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <WAIT_FOR_HANDSHAKE+0x17c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 8003a12:	4811      	ldr	r0, [pc, #68]	; (8003a58 <WAIT_FOR_HANDSHAKE+0x1a0>)
 8003a14:	f7fd fc10 	bl	8001238 <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 8003a18:	2207      	movs	r2, #7
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4804      	ldr	r0, [pc, #16]	; (8003a30 <WAIT_FOR_HANDSHAKE+0x178>)
 8003a1e:	f004 ffa1 	bl	8008964 <memset>
		WAIT_FOR_HANDSHAKE();
 8003a22:	f7ff ff49 	bl	80038b8 <WAIT_FOR_HANDSHAKE>
}
 8003a26:	e7ff      	b.n	8003a28 <WAIT_FOR_HANDSHAKE+0x170>
 8003a28:	bf00      	nop
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200002a4 	.word	0x200002a4
 8003a34:	20000489 	.word	0x20000489
 8003a38:	2000035c 	.word	0x2000035c
 8003a3c:	080100d8 	.word	0x080100d8
 8003a40:	08010108 	.word	0x08010108
 8003a44:	08010110 	.word	0x08010110
 8003a48:	08010114 	.word	0x08010114
 8003a4c:	0801013c 	.word	0x0801013c
 8003a50:	08010168 	.word	0x08010168
 8003a54:	08010194 	.word	0x08010194
 8003a58:	080101c4 	.word	0x080101c4

08003a5c <RCFilter_Init>:
 *      Author: Dell
 */

#include "RCFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (2.0f * 3.1416f * cutoffFreqHz);
 8003a68:	4918      	ldr	r1, [pc, #96]	; (8003acc <RCFilter_Init+0x70>)
 8003a6a:	68b8      	ldr	r0, [r7, #8]
 8003a6c:	f7fd f98a 	bl	8000d84 <__aeabi_fmul>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4619      	mov	r1, r3
 8003a74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a78:	f7fd fa38 	bl	8000eec <__aeabi_fdiv>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	617b      	str	r3, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8003a80:	6979      	ldr	r1, [r7, #20]
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f876 	bl	8000b74 <__addsf3>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fd fa2d 	bl	8000eec <__aeabi_fdiv>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fd f869 	bl	8000b74 <__addsf3>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7fd fa20 	bl	8000eec <__aeabi_fdiv>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	605a      	str	r2, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]

}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40c90ff9 	.word	0x40c90ff9

08003ad0 <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6839      	ldr	r1, [r7, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f94b 	bl	8000d84 <__aeabi_fmul>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461c      	mov	r4, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7fd f941 	bl	8000d84 <__aeabi_fmul>
 8003b02:	4603      	mov	r3, r0
 8003b04:	4619      	mov	r1, r3
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7fd f834 	bl	8000b74 <__addsf3>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd90      	pop	{r4, r7, pc}

08003b20 <Attitude_genEstimate>:

extern sat_attitude attitude_sat;
extern sat_att_combined combined_sat_att;
extern imu_filter imu_filter_data;

void Attitude_genEstimate(imu_filter *filt, sat_attitude *att) {
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
	float phiHat_deg_ = 0.0f;
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
	float thetaHat_deg_ = 0.0f;
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	phiHat_deg_ = atanf(filt->ay_mps2 / (filt->az_mps2 + epsilon)) * RAD2DEG;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685c      	ldr	r4, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	499c      	ldr	r1, [pc, #624]	; (8003db0 <Attitude_genEstimate+0x290>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd f817 	bl	8000b74 <__addsf3>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7fd f9ce 	bl	8000eec <__aeabi_fdiv>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f009 fb8e 	bl	800d274 <atanf>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fc64 	bl	8000428 <__aeabi_f2d>
 8003b60:	a38f      	add	r3, pc, #572	; (adr r3, 8003da0 <Attitude_genEstimate+0x280>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f7fc fcb7 	bl	80004d8 <__aeabi_dmul>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	f7fc ffa9 	bl	8000ac8 <__aeabi_d2f>
 8003b76:	4603      	mov	r3, r0
 8003b78:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2) * RAD2DEG;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	498d      	ldr	r1, [pc, #564]	; (8003db4 <Attitude_genEstimate+0x294>)
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd f9b3 	bl	8000eec <__aeabi_fdiv>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f009 fd3d 	bl	800d608 <asinf>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fc49 	bl	8000428 <__aeabi_f2d>
 8003b96:	a382      	add	r3, pc, #520	; (adr r3, 8003da0 <Attitude_genEstimate+0x280>)
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f7fc fc9c 	bl	80004d8 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f7fc ff8e 	bl	8000ac8 <__aeabi_d2f>
 8003bac:	4603      	mov	r3, r0
 8003bae:	613b      	str	r3, [r7, #16]
//	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2);

//	myDebug("Accel phiHat_deg : %.2f\n", (double) phiHat_deg_);
//	myDebug("Accel thetahat_deg : %.2f\n", (double) thetaHat_deg_);

	att->accel_phiHat = phiHat_deg_;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	601a      	str	r2, [r3, #0]
	att->accel_thetaHat = thetaHat_deg_;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	605a      	str	r2, [r3, #4]

	phiHat_deg_ = 0.0f;    //just try need to be actually on code
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = 0.0f;
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]

//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope reading
	float phiDot_rps = filt->p_rps
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_deg_ * DEG2RAD)
 8003bcc:	6938      	ldr	r0, [r7, #16]
 8003bce:	f7fc fc2b 	bl	8000428 <__aeabi_f2d>
 8003bd2:	a375      	add	r3, pc, #468	; (adr r3, 8003da8 <Attitude_genEstimate+0x288>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fc7e 	bl	80004d8 <__aeabi_dmul>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	f7fc ff70 	bl	8000ac8 <__aeabi_d2f>
 8003be8:	4603      	mov	r3, r0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f009 fcbc 	bl	800d568 <tanf>
 8003bf0:	4605      	mov	r5, r0
					* (sinf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7fc fc18 	bl	8000428 <__aeabi_f2d>
 8003bf8:	a36b      	add	r3, pc, #428	; (adr r3, 8003da8 <Attitude_genEstimate+0x288>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc fc6b 	bl	80004d8 <__aeabi_dmul>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f7fc ff5d 	bl	8000ac8 <__aeabi_d2f>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f009 fc73 	bl	800d4fc <sinf>
 8003c16:	4602      	mov	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7fd f8b0 	bl	8000d84 <__aeabi_fmul>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461e      	mov	r6, r3
							+ cosf(phiHat_deg_ * DEG2RAD) * filt->r_rps);
 8003c28:	6978      	ldr	r0, [r7, #20]
 8003c2a:	f7fc fbfd 	bl	8000428 <__aeabi_f2d>
 8003c2e:	a35e      	add	r3, pc, #376	; (adr r3, 8003da8 <Attitude_genEstimate+0x288>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc fc50 	bl	80004d8 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f7fc ff42 	bl	8000ac8 <__aeabi_d2f>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f009 fc20 	bl	800d48c <cosf>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fd f895 	bl	8000d84 <__aeabi_fmul>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f7fc ff88 	bl	8000b74 <__addsf3>
 8003c64:	4603      	mov	r3, r0
					* (sinf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 8003c66:	4619      	mov	r1, r3
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f7fd f88b 	bl	8000d84 <__aeabi_fmul>
 8003c6e:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 8003c70:	4619      	mov	r1, r3
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7fc ff7e 	bl	8000b74 <__addsf3>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 8003c7c:	6978      	ldr	r0, [r7, #20]
 8003c7e:	f7fc fbd3 	bl	8000428 <__aeabi_f2d>
 8003c82:	a349      	add	r3, pc, #292	; (adr r3, 8003da8 <Attitude_genEstimate+0x288>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc fc26 	bl	80004d8 <__aeabi_dmul>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f7fc ff18 	bl	8000ac8 <__aeabi_d2f>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f009 fbf6 	bl	800d48c <cosf>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fd f86b 	bl	8000d84 <__aeabi_fmul>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461c      	mov	r4, r3
			- sinf(phiHat_deg_ * DEG2RAD) * filt->r_rps;
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7fc fbb8 	bl	8000428 <__aeabi_f2d>
 8003cb8:	a33b      	add	r3, pc, #236	; (adr r3, 8003da8 <Attitude_genEstimate+0x288>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f7fc fc0b 	bl	80004d8 <__aeabi_dmul>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f7fc fefd 	bl	8000ac8 <__aeabi_d2f>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f009 fc13 	bl	800d4fc <sinf>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f7fd f850 	bl	8000d84 <__aeabi_fmul>
 8003ce4:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f7fc ff41 	bl	8000b70 <__aeabi_fsub>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	60bb      	str	r3, [r7, #8]

	//Integrate Euler rates to get estimate of roll and pitch angles
	phiHat_deg_ = (phiHat_deg_ * DEG2RAD
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f7fc fb98 	bl	8000428 <__aeabi_f2d>
 8003cf8:	a32b      	add	r3, pc, #172	; (adr r3, 8003da8 <Attitude_genEstimate+0x288>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fbeb 	bl	80004d8 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4614      	mov	r4, r2
 8003d08:	461d      	mov	r5, r3
			+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps) * RAD2DEG;
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7fc fb8c 	bl	8000428 <__aeabi_f2d>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4620      	mov	r0, r4
 8003d16:	4629      	mov	r1, r5
 8003d18:	f7fc fa28 	bl	800016c <__adddf3>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	a31e      	add	r3, pc, #120	; (adr r3, 8003da0 <Attitude_genEstimate+0x280>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fbd5 	bl	80004d8 <__aeabi_dmul>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
	phiHat_deg_ = (phiHat_deg_ * DEG2RAD
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7fc fec7 	bl	8000ac8 <__aeabi_d2f>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = (thetaHat_deg_ * DEG2RAD
 8003d3e:	6938      	ldr	r0, [r7, #16]
 8003d40:	f7fc fb72 	bl	8000428 <__aeabi_f2d>
 8003d44:	a318      	add	r3, pc, #96	; (adr r3, 8003da8 <Attitude_genEstimate+0x288>)
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f7fc fbc5 	bl	80004d8 <__aeabi_dmul>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4614      	mov	r4, r2
 8003d54:	461d      	mov	r5, r3
			+ (SAMPLE_TIME_MS_USB_ / 1000.0F) * thetaDot_rps) * RAD2DEG;
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	f7fc fb66 	bl	8000428 <__aeabi_f2d>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4620      	mov	r0, r4
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7fc fa02 	bl	800016c <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	a30b      	add	r3, pc, #44	; (adr r3, 8003da0 <Attitude_genEstimate+0x280>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc fbaf 	bl	80004d8 <__aeabi_dmul>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
	thetaHat_deg_ = (thetaHat_deg_ * DEG2RAD
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	f7fc fea1 	bl	8000ac8 <__aeabi_d2f>
 8003d86:	4603      	mov	r3, r0
 8003d88:	613b      	str	r3, [r7, #16]

//	myDebug("Gyro phiHat_deg: %.2f\n", (double) phiHat_deg_);
//	myDebug("Gyro thetaHat_deg: %.2f\n", (double) thetaHat_deg_);

	att->gyro_phiHat = phiHat_deg_;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	609a      	str	r2, [r3, #8]
	att->gyro_thetaHat = thetaHat_deg_;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	60da      	str	r2, [r3, #12]
	return;
 8003d96:	bf00      	nop
}
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	1a63cbb0 	.word	0x1a63cbb0
 8003da4:	404ca5dc 	.word	0x404ca5dc
 8003da8:	a226e211 	.word	0xa226e211
 8003dac:	3f91df46 	.word	0x3f91df46
 8003db0:	358637bd 	.word	0x358637bd
 8003db4:	411cf5c3 	.word	0x411cf5c3

08003db8 <Attitude_compleEstimate>:

void Attitude_compleEstimate(imu_filter *filt, sat_att_combined *att) {
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

//	float thetaHat_rad_comb = 0.0f;
//	float phiHat_rad_comb = 0.0f;

	float thetaHat_rad_comb = att->pitch;   //use just to try
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61fb      	str	r3, [r7, #28]
	float phiHat_rad_comb = att->roll;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	61bb      	str	r3, [r7, #24]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	float phiHat_acc_rad = atanf(filt->ay_mps2 / (filt->az_mps2 + epsilon));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685c      	ldr	r4, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	4956      	ldr	r1, [pc, #344]	; (8003f30 <Attitude_compleEstimate+0x178>)
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc fecb 	bl	8000b74 <__addsf3>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4619      	mov	r1, r3
 8003de2:	4620      	mov	r0, r4
 8003de4:	f7fd f882 	bl	8000eec <__aeabi_fdiv>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f009 fa42 	bl	800d274 <atanf>
 8003df0:	6178      	str	r0, [r7, #20]
	float thetaHat_acc_rad = asinf(filt->ax_mps2 / G_MPS2);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	494f      	ldr	r1, [pc, #316]	; (8003f34 <Attitude_compleEstimate+0x17c>)
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd f877 	bl	8000eec <__aeabi_fdiv>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f009 fc01 	bl	800d608 <asinf>
 8003e06:	6138      	str	r0, [r7, #16]

//	myDebug("accel phiHat_rad : %.2f\n", (double) phiHat_acc_rad);
//	myDebug("accel thetaHat_rad : %.2f\n", (double) thetaHat_acc_rad);

//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope readings
	float phiDot_rps = filt->p_rps
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_rad_comb)
 8003e0c:	69f8      	ldr	r0, [r7, #28]
 8003e0e:	f009 fbab 	bl	800d568 <tanf>
 8003e12:	4605      	mov	r5, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 8003e14:	69b8      	ldr	r0, [r7, #24]
 8003e16:	f009 fb71 	bl	800d4fc <sinf>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f7fc ffae 	bl	8000d84 <__aeabi_fmul>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461e      	mov	r6, r3
							+ cosf(phiHat_rad_comb) * filt->r_rps);
 8003e2c:	69b8      	ldr	r0, [r7, #24]
 8003e2e:	f009 fb2d 	bl	800d48c <cosf>
 8003e32:	4602      	mov	r2, r0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7fc ffa2 	bl	8000d84 <__aeabi_fmul>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4619      	mov	r1, r3
 8003e44:	4630      	mov	r0, r6
 8003e46:	f7fc fe95 	bl	8000b74 <__addsf3>
 8003e4a:	4603      	mov	r3, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f7fc ff98 	bl	8000d84 <__aeabi_fmul>
 8003e54:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 8003e56:	4619      	mov	r1, r3
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7fc fe8b 	bl	8000b74 <__addsf3>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 8003e62:	69b8      	ldr	r0, [r7, #24]
 8003e64:	f009 fb12 	bl	800d48c <cosf>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f7fc ff87 	bl	8000d84 <__aeabi_fmul>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461c      	mov	r4, r3
			- sinf(phiHat_rad_comb) * filt->r_rps;
 8003e7a:	69b8      	ldr	r0, [r7, #24]
 8003e7c:	f009 fb3e 	bl	800d4fc <sinf>
 8003e80:	4602      	mov	r2, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7fc ff7b 	bl	8000d84 <__aeabi_fmul>
 8003e8e:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 8003e90:	4619      	mov	r1, r3
 8003e92:	4620      	mov	r0, r4
 8003e94:	f7fc fe6c 	bl	8000b70 <__aeabi_fsub>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	60bb      	str	r3, [r7, #8]

//	myDebug("Gryo phidot_rps : %.2f\n", (double) phiDot_rps);
//	myDebug("Gyro thetadot_rps : %.2f\n", (double) thetaDot_rps);

//Combining Accel and Gyro data for complementary filter
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 8003e9c:	4926      	ldr	r1, [pc, #152]	; (8003f38 <Attitude_compleEstimate+0x180>)
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f7fc ff70 	bl	8000d84 <__aeabi_fmul>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (phiHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps));
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	69b8      	ldr	r0, [r7, #24]
 8003eac:	f7fc fe62 	bl	8000b74 <__addsf3>
 8003eb0:	4603      	mov	r3, r0
					* (phiHat_rad_comb
 8003eb2:	4922      	ldr	r1, [pc, #136]	; (8003f3c <Attitude_compleEstimate+0x184>)
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc ff65 	bl	8000d84 <__aeabi_fmul>
 8003eba:	4603      	mov	r3, r0
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7fc fe58 	bl	8000b74 <__addsf3>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	61bb      	str	r3, [r7, #24]
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 8003ec8:	491b      	ldr	r1, [pc, #108]	; (8003f38 <Attitude_compleEstimate+0x180>)
 8003eca:	6938      	ldr	r0, [r7, #16]
 8003ecc:	f7fc ff5a 	bl	8000d84 <__aeabi_fmul>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (thetaHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * thetaDot_rps));
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	69f8      	ldr	r0, [r7, #28]
 8003ed8:	f7fc fe4c 	bl	8000b74 <__addsf3>
 8003edc:	4603      	mov	r3, r0
					* (thetaHat_rad_comb
 8003ede:	4917      	ldr	r1, [pc, #92]	; (8003f3c <Attitude_compleEstimate+0x184>)
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc ff4f 	bl	8000d84 <__aeabi_fmul>
 8003ee6:	4603      	mov	r3, r0
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7fc fe42 	bl	8000b74 <__addsf3>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	61fb      	str	r3, [r7, #28]
//	att->pitch = RAD2DEG * thetaHat_rad_comb;
//	att->roll = RAD2DEG * phiHat_rad_comb;

	att->pitch = thetaHat_rad_comb;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	605a      	str	r2, [r3, #4]
	att->roll = phiHat_rad_comb;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	601a      	str	r2, [r3, #0]
	myDebug("\nComplementary filter roll: %.2f rad\n", (double) att->roll);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc fa8f 	bl	8000428 <__aeabi_f2d>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	480c      	ldr	r0, [pc, #48]	; (8003f40 <Attitude_compleEstimate+0x188>)
 8003f10:	f7fd f992 	bl	8001238 <myDebug>
	myDebug("Complementary filter pitch: %.2f rad\n", (double) att->pitch);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc fa85 	bl	8000428 <__aeabi_f2d>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4808      	ldr	r0, [pc, #32]	; (8003f44 <Attitude_compleEstimate+0x18c>)
 8003f24:	f7fd f988 	bl	8001238 <myDebug>

}
 8003f28:	bf00      	nop
 8003f2a:	3724      	adds	r7, #36	; 0x24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f30:	358637bd 	.word	0x358637bd
 8003f34:	411cf5c3 	.word	0x411cf5c3
 8003f38:	3d4ccccd 	.word	0x3d4ccccd
 8003f3c:	3f733333 	.word	0x3f733333
 8003f40:	080101f8 	.word	0x080101f8
 8003f44:	08010220 	.word	0x08010220

08003f48 <Attitude_ekfEstimate>:

void Attitude_ekfEstimate(imu_filter *filt, sat_att_combined *att) {
 8003f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f4c:	b0a2      	sub	sp, #136	; 0x88
 8003f4e:	af02      	add	r7, sp, #8
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]

	float KALMAN_P_INIT = 0.1f;
 8003f54:	4bbe      	ldr	r3, [pc, #760]	; (8004250 <Attitude_ekfEstimate+0x308>)
 8003f56:	67fb      	str	r3, [r7, #124]	; 0x7c
	float KALMAN_Q = 0.001f;
 8003f58:	4bbe      	ldr	r3, [pc, #760]	; (8004254 <Attitude_ekfEstimate+0x30c>)
 8003f5a:	67bb      	str	r3, [r7, #120]	; 0x78
	float KALMAN_R = 0.011f;
 8003f5c:	4bbe      	ldr	r3, [pc, #760]	; (8004258 <Attitude_ekfEstimate+0x310>)
 8003f5e:	677b      	str	r3, [r7, #116]	; 0x74
	float KalmanQ[2] = { KALMAN_Q, KALMAN_Q };
 8003f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f66:	653b      	str	r3, [r7, #80]	; 0x50
	float KalmanR[3] = { KALMAN_R, KALMAN_R, KALMAN_R };
 8003f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
	float Kalman_P_Init[2] = { KALMAN_P_INIT, KALMAN_P_INIT };
 8003f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	Eekf ekf_1;

	//Filtered accelerometer measurement
	float ax_mps2 = 0.0f;
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	673b      	str	r3, [r7, #112]	; 0x70
	float ay_mps2 = 0.0f;
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	66fb      	str	r3, [r7, #108]	; 0x6c
	float az_mps2 = 0.0f;
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	66bb      	str	r3, [r7, #104]	; 0x68
	//Filtered gyroscope measurement
	float p_rps = 0.0f;
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	667b      	str	r3, [r7, #100]	; 0x64
	float q_rps = 0.0f;
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
	float r_rps = 0.0f;
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	65fb      	str	r3, [r7, #92]	; 0x5c

	//Remapping axis data of Accel and Gyro
	ax_mps2 = (filt->ax_mps2);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	673b      	str	r3, [r7, #112]	; 0x70
	ay_mps2 = filt->ay_mps2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	66fb      	str	r3, [r7, #108]	; 0x6c
	az_mps2 = (filt->az_mps2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	66bb      	str	r3, [r7, #104]	; 0x68
	p_rps = (filt->p_rps);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	667b      	str	r3, [r7, #100]	; 0x64
	q_rps = filt->q_rps;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	663b      	str	r3, [r7, #96]	; 0x60
	r_rps = (filt->r_rps);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	65fb      	str	r3, [r7, #92]	; 0x5c

	//Initialize kalman filter
	EKF_Init(&ekf_1, Kalman_P_Init, KalmanQ, KalmanR);
 8003fc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fc8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003fcc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003fd0:	f107 000c 	add.w	r0, r7, #12
 8003fd4:	f7fd fc04 	bl	80017e0 <EKF_Init>
	//Prediction step using filtered gyro data
	EKF_Predict(&ekf_1, p_rps, q_rps, r_rps, 0.001f * KALMAN_PREDICT_PERIOD_MS);
 8003fd8:	f107 000c 	add.w	r0, r7, #12
 8003fdc:	4b9f      	ldr	r3, [pc, #636]	; (800425c <Attitude_ekfEstimate+0x314>)
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fe4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003fe6:	f7fd fc33 	bl	8001850 <EKF_Predict>

	//Update step using Accel data
	EKF_Update(&ekf_1, ax_mps2, ay_mps2, az_mps2);
 8003fea:	f107 000c 	add.w	r0, r7, #12
 8003fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ff2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003ff4:	f7fd fddd 	bl	8001bb2 <EKF_Update>

	att->pitch = ekf_1.theta_r;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
	att->roll = ekf_1.phi_r;
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	601a      	str	r2, [r3, #0]
	float Xm = imu_filter_data.mx_ut * cos(att->pitch)
 8004004:	4b96      	ldr	r3, [pc, #600]	; (8004260 <Attitude_ekfEstimate+0x318>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc fa0d 	bl	8000428 <__aeabi_f2d>
 800400e:	4604      	mov	r4, r0
 8004010:	460d      	mov	r5, r1
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fa06 	bl	8000428 <__aeabi_f2d>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f009 f89e 	bl	800d164 <cos>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4620      	mov	r0, r4
 800402e:	4629      	mov	r1, r5
 8004030:	f7fc fa52 	bl	80004d8 <__aeabi_dmul>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4690      	mov	r8, r2
 800403a:	4699      	mov	r9, r3
			- imu_filter_data.my_ut * sin(att->roll) * sin(att->pitch)
 800403c:	4b88      	ldr	r3, [pc, #544]	; (8004260 <Attitude_ekfEstimate+0x318>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc f9f1 	bl	8000428 <__aeabi_f2d>
 8004046:	4604      	mov	r4, r0
 8004048:	460d      	mov	r5, r1
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc f9ea 	bl	8000428 <__aeabi_f2d>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	f009 f8c4 	bl	800d1e8 <sin>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4620      	mov	r0, r4
 8004066:	4629      	mov	r1, r5
 8004068:	f7fc fa36 	bl	80004d8 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4614      	mov	r4, r2
 8004072:	461d      	mov	r5, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc f9d5 	bl	8000428 <__aeabi_f2d>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f009 f8af 	bl	800d1e8 <sin>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4620      	mov	r0, r4
 8004090:	4629      	mov	r1, r5
 8004092:	f7fc fa21 	bl	80004d8 <__aeabi_dmul>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4640      	mov	r0, r8
 800409c:	4649      	mov	r1, r9
 800409e:	f7fc f863 	bl	8000168 <__aeabi_dsub>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4690      	mov	r8, r2
 80040a8:	4699      	mov	r9, r3
			+ imu_filter_data.mz_ut * cos(att->roll) * sin(att->pitch);
 80040aa:	4b6d      	ldr	r3, [pc, #436]	; (8004260 <Attitude_ekfEstimate+0x318>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc f9ba 	bl	8000428 <__aeabi_f2d>
 80040b4:	4604      	mov	r4, r0
 80040b6:	460d      	mov	r5, r1
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc f9b3 	bl	8000428 <__aeabi_f2d>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	f009 f84b 	bl	800d164 <cos>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc f9ff 	bl	80004d8 <__aeabi_dmul>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4614      	mov	r4, r2
 80040e0:	461d      	mov	r5, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc f99e 	bl	8000428 <__aeabi_f2d>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	f009 f878 	bl	800d1e8 <sin>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4620      	mov	r0, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	f7fc f9ea 	bl	80004d8 <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4640      	mov	r0, r8
 800410a:	4649      	mov	r1, r9
 800410c:	f7fc f82e 	bl	800016c <__adddf3>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
	float Xm = imu_filter_data.mx_ut * cos(att->pitch)
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	f7fc fcd6 	bl	8000ac8 <__aeabi_d2f>
 800411c:	4603      	mov	r3, r0
 800411e:	65bb      	str	r3, [r7, #88]	; 0x58

	float Ym = imu_filter_data.my_ut * cos(att->roll)
 8004120:	4b4f      	ldr	r3, [pc, #316]	; (8004260 <Attitude_ekfEstimate+0x318>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc f97f 	bl	8000428 <__aeabi_f2d>
 800412a:	4604      	mov	r4, r0
 800412c:	460d      	mov	r5, r1
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc f978 	bl	8000428 <__aeabi_f2d>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	f009 f810 	bl	800d164 <cos>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc f9c4 	bl	80004d8 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4690      	mov	r8, r2
 8004156:	4699      	mov	r9, r3
			+ imu_filter_data.mz_ut * sin(att->roll);
 8004158:	4b41      	ldr	r3, [pc, #260]	; (8004260 <Attitude_ekfEstimate+0x318>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc f963 	bl	8000428 <__aeabi_f2d>
 8004162:	4604      	mov	r4, r0
 8004164:	460d      	mov	r5, r1
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f95c 	bl	8000428 <__aeabi_f2d>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	f009 f836 	bl	800d1e8 <sin>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4620      	mov	r0, r4
 8004182:	4629      	mov	r1, r5
 8004184:	f7fc f9a8 	bl	80004d8 <__aeabi_dmul>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4640      	mov	r0, r8
 800418e:	4649      	mov	r1, r9
 8004190:	f7fb ffec 	bl	800016c <__adddf3>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
	float Ym = imu_filter_data.my_ut * cos(att->roll)
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f7fc fc94 	bl	8000ac8 <__aeabi_d2f>
 80041a0:	4603      	mov	r3, r0
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54

	att->yaw = atan2(Ym, Xm);
 80041a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80041a6:	f7fc f93f 	bl	8000428 <__aeabi_f2d>
 80041aa:	4604      	mov	r4, r0
 80041ac:	460d      	mov	r5, r1
 80041ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80041b0:	f7fc f93a 	bl	8000428 <__aeabi_f2d>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4620      	mov	r0, r4
 80041ba:	4629      	mov	r1, r5
 80041bc:	f009 f9f6 	bl	800d5ac <atan2>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f7fc fc7e 	bl	8000ac8 <__aeabi_d2f>
 80041cc:	4602      	mov	r2, r0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	609a      	str	r2, [r3, #8]

	att->pitch = RAD2DEG * ekf_1.theta_r;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc f927 	bl	8000428 <__aeabi_f2d>
 80041da:	a31b      	add	r3, pc, #108	; (adr r3, 8004248 <Attitude_ekfEstimate+0x300>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc f97a 	bl	80004d8 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fc fc6c 	bl	8000ac8 <__aeabi_d2f>
 80041f0:	4602      	mov	r2, r0
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	605a      	str	r2, [r3, #4]
	att->roll = RAD2DEG * ekf_1.phi_r;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc f915 	bl	8000428 <__aeabi_f2d>
 80041fe:	a312      	add	r3, pc, #72	; (adr r3, 8004248 <Attitude_ekfEstimate+0x300>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f7fc f968 	bl	80004d8 <__aeabi_dmul>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f7fc fc5a 	bl	8000ac8 <__aeabi_d2f>
 8004214:	4602      	mov	r2, r0
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	601a      	str	r2, [r3, #0]
	att->yaw = RAD2DEG * att->yaw;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc f902 	bl	8000428 <__aeabi_f2d>
 8004224:	a308      	add	r3, pc, #32	; (adr r3, 8004248 <Attitude_ekfEstimate+0x300>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f7fc f955 	bl	80004d8 <__aeabi_dmul>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	f7fc fc47 	bl	8000ac8 <__aeabi_d2f>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	609a      	str	r2, [r3, #8]

	myDebug("\nEKF Update : pitch : %.2f deg\n", (double) att->pitch);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	e00d      	b.n	8004264 <Attitude_ekfEstimate+0x31c>
 8004248:	1a63cbb0 	.word	0x1a63cbb0
 800424c:	404ca5dc 	.word	0x404ca5dc
 8004250:	3dcccccd 	.word	0x3dcccccd
 8004254:	3a83126f 	.word	0x3a83126f
 8004258:	3c343958 	.word	0x3c343958
 800425c:	3c23d70b 	.word	0x3c23d70b
 8004260:	200003a8 	.word	0x200003a8
 8004264:	f7fc f8e0 	bl	8000428 <__aeabi_f2d>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	480d      	ldr	r0, [pc, #52]	; (80042a4 <Attitude_ekfEstimate+0x35c>)
 800426e:	f7fc ffe3 	bl	8001238 <myDebug>
	myDebug("EKF Update : roll : %.2f deg\n", (double) att->roll);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc f8d6 	bl	8000428 <__aeabi_f2d>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4809      	ldr	r0, [pc, #36]	; (80042a8 <Attitude_ekfEstimate+0x360>)
 8004282:	f7fc ffd9 	bl	8001238 <myDebug>
	myDebug("EKF Update : yaw : %.2f deg\n", (double) att->yaw);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f8cc 	bl	8000428 <__aeabi_f2d>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4805      	ldr	r0, [pc, #20]	; (80042ac <Attitude_ekfEstimate+0x364>)
 8004296:	f7fc ffcf 	bl	8001238 <myDebug>
}
 800429a:	bf00      	nop
 800429c:	3780      	adds	r7, #128	; 0x80
 800429e:	46bd      	mov	sp, r7
 80042a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042a4:	08010248 	.word	0x08010248
 80042a8:	08010268 	.word	0x08010268
 80042ac:	08010288 	.word	0x08010288

080042b0 <process_IMU_filt>:
void process_IMU_filt(imu_filter filt_imu) {
 80042b0:	b084      	sub	sp, #16
 80042b2:	b580      	push	{r7, lr}
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	f107 0c08 	add.w	ip, r7, #8
 80042ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Attitude_genEstimate(&filt_imu, &attitude_sat);
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <process_IMU_filt+0x38>)
 80042c0:	f107 0008 	add.w	r0, r7, #8
 80042c4:	f7ff fc2c 	bl	8003b20 <Attitude_genEstimate>
	Attitude_compleEstimate(&filt_imu, &combined_sat_att);
 80042c8:	4908      	ldr	r1, [pc, #32]	; (80042ec <process_IMU_filt+0x3c>)
 80042ca:	f107 0008 	add.w	r0, r7, #8
 80042ce:	f7ff fd73 	bl	8003db8 <Attitude_compleEstimate>
	Attitude_ekfEstimate(&filt_imu, &combined_sat_att);
 80042d2:	4906      	ldr	r1, [pc, #24]	; (80042ec <process_IMU_filt+0x3c>)
 80042d4:	f107 0008 	add.w	r0, r7, #8
 80042d8:	f7ff fe36 	bl	8003f48 <Attitude_ekfEstimate>

}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042e4:	b004      	add	sp, #16
 80042e6:	4770      	bx	lr
 80042e8:	20000420 	.word	0x20000420
 80042ec:	200002b0 	.word	0x200002b0

080042f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a36      	ldr	r2, [pc, #216]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d164      	bne.n	80043ca <HAL_TIM_PeriodElapsedCallback+0xda>
		mSEC++;
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a34      	ldr	r2, [pc, #208]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004308:	6013      	str	r3, [r2, #0]
		if (mSEC > 999) {
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004312:	d30c      	bcc.n	800432e <HAL_TIM_PeriodElapsedCallback+0x3e>
			sec++;
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	4a30      	ldr	r2, [pc, #192]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 800431c:	6013      	str	r3, [r2, #0]
			count++;
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a2e      	ldr	r2, [pc, #184]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004326:	6013      	str	r3, [r2, #0]
			mSEC = 0;
 8004328:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
		}

		if (count == 10) {
 800432e:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b0a      	cmp	r3, #10
 8004334:	d149      	bne.n	80043ca <HAL_TIM_PeriodElapsedCallback+0xda>
			MTQ_Disable();
 8004336:	f7fd f9e7 	bl	8001708 <MTQ_Disable>
			count = 0;
 800433a:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
			myDebug("MTQ Disable\r\n");
 8004340:	4828      	ldr	r0, [pc, #160]	; (80043e4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004342:	f7fc ff79 	bl	8001238 <myDebug>

			HAL_TIM_Base_Stop_IT(&htim1);
 8004346:	4823      	ldr	r0, [pc, #140]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004348:	f002 fd12 	bl	8006d70 <HAL_TIM_Base_Stop_IT>

			rxToOBC[6] = imu_filter_data.p_rps;
 800434c:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fc ff19 	bl	8001188 <__aeabi_f2uiz>
 8004356:	4603      	mov	r3, r0
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800435c:	719a      	strb	r2, [r3, #6]
			rxToOBC[7] = imu_filter_data.q_rps;
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc ff10 	bl	8001188 <__aeabi_f2uiz>
 8004368:	4603      	mov	r3, r0
 800436a:	b2da      	uxtb	r2, r3
 800436c:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800436e:	71da      	strb	r2, [r3, #7]
			rxToOBC[8] = imu_filter_data.r_rps;
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc ff07 	bl	8001188 <__aeabi_f2uiz>
 800437a:	4603      	mov	r3, r0
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004380:	721a      	strb	r2, [r3, #8]

			myDebug("-----Data send to OBC -----\r\n");
 8004382:	481b      	ldr	r0, [pc, #108]	; (80043f0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004384:	f7fc ff58 	bl	8001238 <myDebug>
			if (HAL_UART_Transmit(&huart3, rxToOBC, sizeof(rxToOBC), 1000)
 8004388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438c:	2209      	movs	r2, #9
 800438e:	4917      	ldr	r1, [pc, #92]	; (80043ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004390:	4818      	ldr	r0, [pc, #96]	; (80043f4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004392:	f003 fc1b 	bl	8007bcc <HAL_UART_Transmit>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d110      	bne.n	80043be <HAL_TIM_PeriodElapsedCallback+0xce>
					== HAL_OK) {
				for (int i = 0; i < sizeof(rxToOBC); i++) {
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e00a      	b.n	80043b8 <HAL_TIM_PeriodElapsedCallback+0xc8>
					myDebug("%02x", rxToOBC[i]);
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	4619      	mov	r1, r3
 80043ac:	4812      	ldr	r0, [pc, #72]	; (80043f8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80043ae:	f7fc ff43 	bl	8001238 <myDebug>
				for (int i = 0; i < sizeof(rxToOBC); i++) {
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d9f1      	bls.n	80043a2 <HAL_TIM_PeriodElapsedCallback+0xb2>
				}
			}
			mSEC = 0;
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
			sec = 0;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
		}
	}
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200004bc 	.word	0x200004bc
 80043d8:	20000268 	.word	0x20000268
 80043dc:	2000026c 	.word	0x2000026c
 80043e0:	20000270 	.word	0x20000270
 80043e4:	080102a8 	.word	0x080102a8
 80043e8:	200003a8 	.word	0x200003a8
 80043ec:	200004b0 	.word	0x200004b0
 80043f0:	080102b8 	.word	0x080102b8
 80043f4:	2000035c 	.word	0x2000035c
 80043f8:	080102d8 	.word	0x080102d8

080043fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80043fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fe:	b099      	sub	sp, #100	; 0x64
 8004400:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004402:	f000 fe8f 	bl	8005124 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004406:	f000 f8b7 	bl	8004578 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800440a:	f000 fad7 	bl	80049bc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800440e:	f000 fa81 	bl	8004914 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8004412:	f000 faa9 	bl	8004968 <MX_USART3_UART_Init>
	MX_SPI1_Init();
 8004416:	f000 f8f5 	bl	8004604 <MX_SPI1_Init>
	MX_TIM3_Init();
 800441a:	f000 f9af 	bl	800477c <MX_TIM3_Init>
	MX_TIM4_Init();
 800441e:	f000 fa13 	bl	8004848 <MX_TIM4_Init>
	MX_TIM1_Init();
 8004422:	f000 f95b 	bl	80046dc <MX_TIM1_Init>
	MX_SPI2_Init();
 8004426:	f000 f923 	bl	8004670 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	myDebug("##### Welcome to Active ADCS Debug Zone #####\r\n");
 800442a:	484a      	ldr	r0, [pc, #296]	; (8004554 <main+0x158>)
 800442c:	f7fc ff04 	bl	8001238 <myDebug>
	myDebug("----- Waiting for Handshake command from OBC -----\r\n");
 8004430:	4849      	ldr	r0, [pc, #292]	; (8004558 <main+0x15c>)
 8004432:	f7fc ff01 	bl	8001238 <myDebug>

//	OBC_HANDSHAKE_FLAG = 1;

	while (OBC_HANDSHAKE_FLAG == 0) {
 8004436:	e001      	b.n	800443c <main+0x40>
		WAIT_FOR_HANDSHAKE();
 8004438:	f7ff fa3e 	bl	80038b8 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 800443c:	4b47      	ldr	r3, [pc, #284]	; (800455c <main+0x160>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f9      	beq.n	8004438 <main+0x3c>
	}

	OBC_HANDSHAKE_FLAG = 0;
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <main+0x160>)
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]

	myDebug("----- Waiting Enable command from OBC -----\r\n");
 800444a:	4845      	ldr	r0, [pc, #276]	; (8004560 <main+0x164>)
 800444c:	f7fc fef4 	bl	8001238 <myDebug>

	while (OBC_HANDSHAKE_FLAG == 0) {
 8004450:	e001      	b.n	8004456 <main+0x5a>
		WAIT_FOR_HANDSHAKE();
 8004452:	f7ff fa31 	bl	80038b8 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8004456:	4b41      	ldr	r3, [pc, #260]	; (800455c <main+0x160>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f9      	beq.n	8004452 <main+0x56>
	while (1) {

//		HAL_UART_Transmit(&huart3, adcs_tx, sizeof(adcs_tx), 1000);
//		HAL_UART_Receive(&huart3, adcs_rx, sizeof(adcs_rx), 1000);

		if (OBC_HANDSHAKE_FLAG == 1) {
 800445e:	4b3f      	ldr	r3, [pc, #252]	; (800455c <main+0x160>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d1fb      	bne.n	800445e <main+0x62>
			IMU_Setup(&DEFAULT_MPU6500); //initialization and calibration
 8004466:	483f      	ldr	r0, [pc, #252]	; (8004564 <main+0x168>)
 8004468:	f7fe fa5e 	bl	8002928 <IMU_Setup>
			HAL_Delay(1000);
 800446c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004470:	f000 feba 	bl	80051e8 <HAL_Delay>

			imu_filter_data = IMU_Get_Data(&DEFAULT_MPU6500, &DEFAULT_LSM9DS1); //IMU filtered data
 8004474:	4c3c      	ldr	r4, [pc, #240]	; (8004568 <main+0x16c>)
 8004476:	463b      	mov	r3, r7
 8004478:	4a3c      	ldr	r2, [pc, #240]	; (800456c <main+0x170>)
 800447a:	493a      	ldr	r1, [pc, #232]	; (8004564 <main+0x168>)
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fcb9 	bl	8002df4 <IMU_Get_Data>
 8004482:	4625      	mov	r5, r4
 8004484:	463c      	mov	r4, r7
 8004486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800448a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800448c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800448e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004492:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			HAL_Delay(1000);
 8004496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800449a:	f000 fea5 	bl	80051e8 <HAL_Delay>

			process_IMU_filt(imu_filter_data);
 800449e:	4e32      	ldr	r6, [pc, #200]	; (8004568 <main+0x16c>)
 80044a0:	466d      	mov	r5, sp
 80044a2:	f106 0410 	add.w	r4, r6, #16
 80044a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044b6:	f7ff fefb 	bl	80042b0 <process_IMU_filt>
			rxToOBC[0] = combined_sat_att.roll;
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <main+0x174>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fe62 	bl	8001188 <__aeabi_f2uiz>
 80044c4:	4603      	mov	r3, r0
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <main+0x178>)
 80044ca:	701a      	strb	r2, [r3, #0]
			rxToOBC[1] = combined_sat_att.pitch;
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <main+0x174>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc fe59 	bl	8001188 <__aeabi_f2uiz>
 80044d6:	4603      	mov	r3, r0
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <main+0x178>)
 80044dc:	705a      	strb	r2, [r3, #1]
			rxToOBC[2] = combined_sat_att.yaw;
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <main+0x174>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fe50 	bl	8001188 <__aeabi_f2uiz>
 80044e8:	4603      	mov	r3, r0
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <main+0x178>)
 80044ee:	709a      	strb	r2, [r3, #2]
			rxToOBC[3] = imu_filter_data.p_rps;
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <main+0x16c>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc fe47 	bl	8001188 <__aeabi_f2uiz>
 80044fa:	4603      	mov	r3, r0
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <main+0x178>)
 8004500:	70da      	strb	r2, [r3, #3]
			rxToOBC[4] = imu_filter_data.q_rps;
 8004502:	4b19      	ldr	r3, [pc, #100]	; (8004568 <main+0x16c>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc fe3e 	bl	8001188 <__aeabi_f2uiz>
 800450c:	4603      	mov	r3, r0
 800450e:	b2da      	uxtb	r2, r3
 8004510:	4b18      	ldr	r3, [pc, #96]	; (8004574 <main+0x178>)
 8004512:	711a      	strb	r2, [r3, #4]
			rxToOBC[5] = imu_filter_data.r_rps;
 8004514:	4b14      	ldr	r3, [pc, #80]	; (8004568 <main+0x16c>)
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	4618      	mov	r0, r3
 800451a:	f7fc fe35 	bl	8001188 <__aeabi_f2uiz>
 800451e:	4603      	mov	r3, r0
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <main+0x178>)
 8004524:	715a      	strb	r2, [r3, #5]
			CalTorque(imu_filter_data, &DEFAULT_LSM9DS1, combined_sat_att);
 8004526:	4e10      	ldr	r6, [pc, #64]	; (8004568 <main+0x16c>)
 8004528:	4a11      	ldr	r2, [pc, #68]	; (8004570 <main+0x174>)
 800452a:	ab09      	add	r3, sp, #36	; 0x24
 800452c:	ca07      	ldmia	r2, {r0, r1, r2}
 800452e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004532:	4b0e      	ldr	r3, [pc, #56]	; (800456c <main+0x170>)
 8004534:	9308      	str	r3, [sp, #32]
 8004536:	466d      	mov	r5, sp
 8004538:	f106 0410 	add.w	r4, r6, #16
 800453c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800453e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004544:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004548:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800454c:	f7fc feb0 	bl	80012b0 <CalTorque>
		if (OBC_HANDSHAKE_FLAG == 1) {
 8004550:	e785      	b.n	800445e <main+0x62>
 8004552:	bf00      	nop
 8004554:	080102e0 	.word	0x080102e0
 8004558:	08010310 	.word	0x08010310
 800455c:	20000489 	.word	0x20000489
 8004560:	08010348 	.word	0x08010348
 8004564:	20000504 	.word	0x20000504
 8004568:	200003a8 	.word	0x200003a8
 800456c:	200005c0 	.word	0x200005c0
 8004570:	200002b0 	.word	0x200002b0
 8004574:	200004b0 	.word	0x200004b0

08004578 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b090      	sub	sp, #64	; 0x40
 800457c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800457e:	f107 0318 	add.w	r3, r7, #24
 8004582:	2228      	movs	r2, #40	; 0x28
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f004 f9ec 	bl	8008964 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	60da      	str	r2, [r3, #12]
 8004598:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800459e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80045a4:	2300      	movs	r3, #0
 80045a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045a8:	2301      	movs	r3, #1
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045ac:	2302      	movs	r3, #2
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80045bc:	f107 0318 	add.w	r3, r7, #24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f001 f991 	bl	80058e8 <HAL_RCC_OscConfig>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <SystemClock_Config+0x58>
		Error_Handler();
 80045cc:	f000 fa56 	bl	8004a7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80045d0:	230f      	movs	r3, #15
 80045d2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045d4:	2302      	movs	r3, #2
 80045d6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fbfc 	bl	8005de8 <HAL_RCC_ClockConfig>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <SystemClock_Config+0x82>
		Error_Handler();
 80045f6:	f000 fa41 	bl	8004a7c <Error_Handler>
	}
}
 80045fa:	bf00      	nop
 80045fc:	3740      	adds	r7, #64	; 0x40
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <MX_SPI1_Init+0x64>)
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <MX_SPI1_Init+0x68>)
 800460c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800460e:	4b16      	ldr	r3, [pc, #88]	; (8004668 <MX_SPI1_Init+0x64>)
 8004610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004614:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <MX_SPI1_Init+0x64>)
 8004618:	2200      	movs	r2, #0
 800461a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800461c:	4b12      	ldr	r3, [pc, #72]	; (8004668 <MX_SPI1_Init+0x64>)
 800461e:	2200      	movs	r2, #0
 8004620:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <MX_SPI1_Init+0x64>)
 8004624:	2200      	movs	r2, #0
 8004626:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <MX_SPI1_Init+0x64>)
 800462a:	2200      	movs	r2, #0
 800462c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <MX_SPI1_Init+0x64>)
 8004630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004634:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <MX_SPI1_Init+0x64>)
 8004638:	2220      	movs	r2, #32
 800463a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <MX_SPI1_Init+0x64>)
 800463e:	2200      	movs	r2, #0
 8004640:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <MX_SPI1_Init+0x64>)
 8004644:	2200      	movs	r2, #0
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <MX_SPI1_Init+0x64>)
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <MX_SPI1_Init+0x64>)
 8004650:	220a      	movs	r2, #10
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004654:	4804      	ldr	r0, [pc, #16]	; (8004668 <MX_SPI1_Init+0x64>)
 8004656:	f001 fd55 	bl	8006104 <HAL_SPI_Init>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <MX_SPI1_Init+0x60>
		Error_Handler();
 8004660:	f000 fa0c 	bl	8004a7c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000568 	.word	0x20000568
 800466c:	40013000 	.word	0x40013000

08004670 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8004674:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <MX_SPI2_Init+0x64>)
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <MX_SPI2_Init+0x68>)
 8004678:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <MX_SPI2_Init+0x64>)
 800467c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004680:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <MX_SPI2_Init+0x64>)
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004688:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <MX_SPI2_Init+0x64>)
 800468a:	2200      	movs	r2, #0
 800468c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <MX_SPI2_Init+0x64>)
 8004690:	2200      	movs	r2, #0
 8004692:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004694:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <MX_SPI2_Init+0x64>)
 8004696:	2200      	movs	r2, #0
 8004698:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800469a:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <MX_SPI2_Init+0x64>)
 800469c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046a0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <MX_SPI2_Init+0x64>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <MX_SPI2_Init+0x64>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <MX_SPI2_Init+0x64>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <MX_SPI2_Init+0x64>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <MX_SPI2_Init+0x64>)
 80046bc:	220a      	movs	r2, #10
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80046c0:	4804      	ldr	r0, [pc, #16]	; (80046d4 <MX_SPI2_Init+0x64>)
 80046c2:	f001 fd1f 	bl	8006104 <HAL_SPI_Init>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80046cc:	f000 f9d6 	bl	8004a7c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80046d0:	bf00      	nop
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	200002bc 	.word	0x200002bc
 80046d8:	40003800 	.word	0x40003800

080046dc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	609a      	str	r2, [r3, #8]
 80046ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80046f0:	463b      	mov	r3, r7
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <MX_TIM1_Init+0x98>)
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <MX_TIM1_Init+0x9c>)
 80046fc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <MX_TIM1_Init+0x98>)
 8004700:	2247      	movs	r2, #71	; 0x47
 8004702:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <MX_TIM1_Init+0x98>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <MX_TIM1_Init+0x98>)
 800470c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004710:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <MX_TIM1_Init+0x98>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <MX_TIM1_Init+0x98>)
 800471a:	2200      	movs	r2, #0
 800471c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <MX_TIM1_Init+0x98>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004724:	4813      	ldr	r0, [pc, #76]	; (8004774 <MX_TIM1_Init+0x98>)
 8004726:	f002 fa82 	bl	8006c2e <HAL_TIM_Base_Init>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_TIM1_Init+0x58>
		Error_Handler();
 8004730:	f000 f9a4 	bl	8004a7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004738:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4619      	mov	r1, r3
 8004740:	480c      	ldr	r0, [pc, #48]	; (8004774 <MX_TIM1_Init+0x98>)
 8004742:	f002 fde7 	bl	8007314 <HAL_TIM_ConfigClockSource>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_TIM1_Init+0x74>
		Error_Handler();
 800474c:	f000 f996 	bl	8004a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004750:	2300      	movs	r3, #0
 8004752:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004754:	2300      	movs	r3, #0
 8004756:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8004758:	463b      	mov	r3, r7
 800475a:	4619      	mov	r1, r3
 800475c:	4805      	ldr	r0, [pc, #20]	; (8004774 <MX_TIM1_Init+0x98>)
 800475e:	f003 f975 	bl	8007a4c <HAL_TIMEx_MasterConfigSynchronization>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8004768:	f000 f988 	bl	8004a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800476c:	bf00      	nop
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	200004bc 	.word	0x200004bc
 8004778:	40012c00 	.word	0x40012c00

0800477c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004782:	f107 0320 	add.w	r3, r7, #32
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	611a      	str	r2, [r3, #16]
 800479a:	615a      	str	r2, [r3, #20]
 800479c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800479e:	4b28      	ldr	r3, [pc, #160]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <MX_TIM3_Init+0xc8>)
 80047a2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2000 - 1;
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80047aa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 36000 - 1;
 80047b2:	4b23      	ldr	r3, [pc, #140]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047b4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80047b8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ba:	4b21      	ldr	r3, [pc, #132]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047bc:	2200      	movs	r2, #0
 80047be:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047c0:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80047c6:	481e      	ldr	r0, [pc, #120]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047c8:	f002 fb00 	bl	8006dcc <HAL_TIM_PWM_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_TIM3_Init+0x5a>
		Error_Handler();
 80047d2:	f000 f953 	bl	8004a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80047de:	f107 0320 	add.w	r3, r7, #32
 80047e2:	4619      	mov	r1, r3
 80047e4:	4816      	ldr	r0, [pc, #88]	; (8004840 <MX_TIM3_Init+0xc4>)
 80047e6:	f003 f931 	bl	8007a4c <HAL_TIMEx_MasterConfigSynchronization>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80047f0:	f000 f944 	bl	8004a7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047f4:	2360      	movs	r3, #96	; 0x60
 80047f6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	2200      	movs	r2, #0
 8004808:	4619      	mov	r1, r3
 800480a:	480d      	ldr	r0, [pc, #52]	; (8004840 <MX_TIM3_Init+0xc4>)
 800480c:	f002 fcc0 	bl	8007190 <HAL_TIM_PWM_ConfigChannel>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8004816:	f000 f931 	bl	8004a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800481a:	1d3b      	adds	r3, r7, #4
 800481c:	2204      	movs	r2, #4
 800481e:	4619      	mov	r1, r3
 8004820:	4807      	ldr	r0, [pc, #28]	; (8004840 <MX_TIM3_Init+0xc4>)
 8004822:	f002 fcb5 	bl	8007190 <HAL_TIM_PWM_ConfigChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_TIM3_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 800482c:	f000 f926 	bl	8004a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8004830:	4803      	ldr	r0, [pc, #12]	; (8004840 <MX_TIM3_Init+0xc4>)
 8004832:	f000 fa39 	bl	8004ca8 <HAL_TIM_MspPostInit>

}
 8004836:	bf00      	nop
 8004838:	3728      	adds	r7, #40	; 0x28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200003d8 	.word	0x200003d8
 8004844:	40000400 	.word	0x40000400

08004848 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800484e:	f107 0320 	add.w	r3, r7, #32
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]
 8004860:	609a      	str	r2, [r3, #8]
 8004862:	60da      	str	r2, [r3, #12]
 8004864:	611a      	str	r2, [r3, #16]
 8004866:	615a      	str	r2, [r3, #20]
 8004868:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800486a:	4b28      	ldr	r3, [pc, #160]	; (800490c <MX_TIM4_Init+0xc4>)
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <MX_TIM4_Init+0xc8>)
 800486e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 2000 - 1;
 8004870:	4b26      	ldr	r3, [pc, #152]	; (800490c <MX_TIM4_Init+0xc4>)
 8004872:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004876:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <MX_TIM4_Init+0xc4>)
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 36000 - 1;
 800487e:	4b23      	ldr	r3, [pc, #140]	; (800490c <MX_TIM4_Init+0xc4>)
 8004880:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8004884:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004886:	4b21      	ldr	r3, [pc, #132]	; (800490c <MX_TIM4_Init+0xc4>)
 8004888:	2200      	movs	r2, #0
 800488a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <MX_TIM4_Init+0xc4>)
 800488e:	2200      	movs	r2, #0
 8004890:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8004892:	481e      	ldr	r0, [pc, #120]	; (800490c <MX_TIM4_Init+0xc4>)
 8004894:	f002 fa9a 	bl	8006dcc <HAL_TIM_PWM_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <MX_TIM4_Init+0x5a>
		Error_Handler();
 800489e:	f000 f8ed 	bl	8004a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80048aa:	f107 0320 	add.w	r3, r7, #32
 80048ae:	4619      	mov	r1, r3
 80048b0:	4816      	ldr	r0, [pc, #88]	; (800490c <MX_TIM4_Init+0xc4>)
 80048b2:	f003 f8cb 	bl	8007a4c <HAL_TIMEx_MasterConfigSynchronization>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80048bc:	f000 f8de 	bl	8004a7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048c0:	2360      	movs	r3, #96	; 0x60
 80048c2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80048d0:	1d3b      	adds	r3, r7, #4
 80048d2:	2208      	movs	r2, #8
 80048d4:	4619      	mov	r1, r3
 80048d6:	480d      	ldr	r0, [pc, #52]	; (800490c <MX_TIM4_Init+0xc4>)
 80048d8:	f002 fc5a 	bl	8007190 <HAL_TIM_PWM_ConfigChannel>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80048e2:	f000 f8cb 	bl	8004a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	220c      	movs	r2, #12
 80048ea:	4619      	mov	r1, r3
 80048ec:	4807      	ldr	r0, [pc, #28]	; (800490c <MX_TIM4_Init+0xc4>)
 80048ee:	f002 fc4f 	bl	8007190 <HAL_TIM_PWM_ConfigChannel>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80048f8:	f000 f8c0 	bl	8004a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80048fc:	4803      	ldr	r0, [pc, #12]	; (800490c <MX_TIM4_Init+0xc4>)
 80048fe:	f000 f9d3 	bl	8004ca8 <HAL_TIM_MspPostInit>

}
 8004902:	bf00      	nop
 8004904:	3728      	adds	r7, #40	; 0x28
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000314 	.word	0x20000314
 8004910:	40000800 	.word	0x40000800

08004914 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <MX_USART1_UART_Init+0x50>)
 800491c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 8004920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004924:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 8004928:	2200      	movs	r2, #0
 800492a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 800492e:	2200      	movs	r2, #0
 8004930:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 800493a:	220c      	movs	r2, #12
 800493c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800494a:	4805      	ldr	r0, [pc, #20]	; (8004960 <MX_USART1_UART_Init+0x4c>)
 800494c:	f003 f8ee 	bl	8007b2c <HAL_UART_Init>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8004956:	f000 f891 	bl	8004a7c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000430 	.word	0x20000430
 8004964:	40013800 	.word	0x40013800

08004968 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 800496e:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <MX_USART3_UART_Init+0x50>)
 8004970:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 8004974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004978:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800497a:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 800498e:	220c      	movs	r2, #12
 8004990:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 8004994:	2200      	movs	r2, #0
 8004996:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 800499a:	2200      	movs	r2, #0
 800499c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800499e:	4805      	ldr	r0, [pc, #20]	; (80049b4 <MX_USART3_UART_Init+0x4c>)
 80049a0:	f003 f8c4 	bl	8007b2c <HAL_UART_Init>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80049aa:	f000 f867 	bl	8004a7c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	2000035c 	.word	0x2000035c
 80049b8:	40004800 	.word	0x40004800

080049bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80049c2:	f107 0310 	add.w	r3, r7, #16
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	609a      	str	r2, [r3, #8]
 80049ce:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <MX_GPIO_Init+0xb4>)
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <MX_GPIO_Init+0xb4>)
 80049d6:	f043 0320 	orr.w	r3, r3, #32
 80049da:	6193      	str	r3, [r2, #24]
 80049dc:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <MX_GPIO_Init+0xb4>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <MX_GPIO_Init+0xb4>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <MX_GPIO_Init+0xb4>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	6193      	str	r3, [r2, #24]
 80049f4:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <MX_GPIO_Init+0xb4>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <MX_GPIO_Init+0xb4>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <MX_GPIO_Init+0xb4>)
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	6193      	str	r3, [r2, #24]
 8004a0c:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <MX_GPIO_Init+0xb4>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_MAG_GPIO_Port, CS_MAG_Pin, GPIO_PIN_RESET);
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2110      	movs	r1, #16
 8004a1c:	4815      	ldr	r0, [pc, #84]	; (8004a74 <MX_GPIO_Init+0xb8>)
 8004a1e:	f000 ff4b 	bl	80058b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_MPU_Pin | MTQEN_5V_Pin, GPIO_PIN_RESET);
 8004a22:	2200      	movs	r2, #0
 8004a24:	f241 0108 	movw	r1, #4104	; 0x1008
 8004a28:	4813      	ldr	r0, [pc, #76]	; (8004a78 <MX_GPIO_Init+0xbc>)
 8004a2a:	f000 ff45 	bl	80058b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_MAG_Pin */
	GPIO_InitStruct.Pin = CS_MAG_Pin;
 8004a2e:	2310      	movs	r3, #16
 8004a30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a32:	2301      	movs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_MAG_GPIO_Port, &GPIO_InitStruct);
 8004a3e:	f107 0310 	add.w	r3, r7, #16
 8004a42:	4619      	mov	r1, r3
 8004a44:	480b      	ldr	r0, [pc, #44]	; (8004a74 <MX_GPIO_Init+0xb8>)
 8004a46:	f000 fdb3 	bl	80055b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_MPU_Pin MTQEN_5V_Pin */
	GPIO_InitStruct.Pin = CS_MPU_Pin | MTQEN_5V_Pin;
 8004a4a:	f241 0308 	movw	r3, #4104	; 0x1008
 8004a4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a50:	2301      	movs	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a5c:	f107 0310 	add.w	r3, r7, #16
 8004a60:	4619      	mov	r1, r3
 8004a62:	4805      	ldr	r0, [pc, #20]	; (8004a78 <MX_GPIO_Init+0xbc>)
 8004a64:	f000 fda4 	bl	80055b0 <HAL_GPIO_Init>

}
 8004a68:	bf00      	nop
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40010800 	.word	0x40010800
 8004a78:	40010c00 	.word	0x40010c00

08004a7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a80:	b672      	cpsid	i
}
 8004a82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004a84:	e7fe      	b.n	8004a84 <Error_Handler+0x8>
	...

08004a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <HAL_MspInit+0x5c>)
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <HAL_MspInit+0x5c>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6193      	str	r3, [r2, #24]
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <HAL_MspInit+0x5c>)
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	60bb      	str	r3, [r7, #8]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <HAL_MspInit+0x5c>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <HAL_MspInit+0x5c>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	61d3      	str	r3, [r2, #28]
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <HAL_MspInit+0x5c>)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_MspInit+0x60>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <HAL_MspInit+0x60>)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40010000 	.word	0x40010000

08004aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af4:	f107 0318 	add.w	r3, r7, #24
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a37      	ldr	r2, [pc, #220]	; (8004be4 <HAL_SPI_MspInit+0xf8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d130      	bne.n	8004b6e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b0c:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	4a35      	ldr	r2, [pc, #212]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b16:	6193      	str	r3, [r2, #24]
 8004b18:	4b33      	ldr	r3, [pc, #204]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b24:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	4a2f      	ldr	r2, [pc, #188]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b2a:	f043 0304 	orr.w	r3, r3, #4
 8004b2e:	6193      	str	r3, [r2, #24]
 8004b30:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SEN_SCK_Pin|SEN_MOSI_Pin;
 8004b3c:	23a0      	movs	r3, #160	; 0xa0
 8004b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b40:	2302      	movs	r3, #2
 8004b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b44:	2303      	movs	r3, #3
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b48:	f107 0318 	add.w	r3, r7, #24
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4827      	ldr	r0, [pc, #156]	; (8004bec <HAL_SPI_MspInit+0x100>)
 8004b50:	f000 fd2e 	bl	80055b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEN_MISO_Pin;
 8004b54:	2340      	movs	r3, #64	; 0x40
 8004b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SEN_MISO_GPIO_Port, &GPIO_InitStruct);
 8004b60:	f107 0318 	add.w	r3, r7, #24
 8004b64:	4619      	mov	r1, r3
 8004b66:	4821      	ldr	r0, [pc, #132]	; (8004bec <HAL_SPI_MspInit+0x100>)
 8004b68:	f000 fd22 	bl	80055b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004b6c:	e036      	b.n	8004bdc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_SPI_MspInit+0x104>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d131      	bne.n	8004bdc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b82:	61d3      	str	r3, [r2, #28]
 8004b84:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b90:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b96:	f043 0308 	orr.w	r3, r3, #8
 8004b9a:	6193      	str	r3, [r2, #24]
 8004b9c:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_SPI_MspInit+0xfc>)
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004ba8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb6:	f107 0318 	add.w	r3, r7, #24
 8004bba:	4619      	mov	r1, r3
 8004bbc:	480d      	ldr	r0, [pc, #52]	; (8004bf4 <HAL_SPI_MspInit+0x108>)
 8004bbe:	f000 fcf7 	bl	80055b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd0:	f107 0318 	add.w	r3, r7, #24
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4807      	ldr	r0, [pc, #28]	; (8004bf4 <HAL_SPI_MspInit+0x108>)
 8004bd8:	f000 fcea 	bl	80055b0 <HAL_GPIO_Init>
}
 8004bdc:	bf00      	nop
 8004bde:	3728      	adds	r7, #40	; 0x28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40013000 	.word	0x40013000
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40010800 	.word	0x40010800
 8004bf0:	40003800 	.word	0x40003800
 8004bf4:	40010c00 	.word	0x40010c00

08004bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <HAL_TIM_Base_MspInit+0x44>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d113      	bne.n	8004c32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <HAL_TIM_Base_MspInit+0x48>)
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <HAL_TIM_Base_MspInit+0x48>)
 8004c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c14:	6193      	str	r3, [r2, #24]
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <HAL_TIM_Base_MspInit+0x48>)
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004c22:	2200      	movs	r2, #0
 8004c24:	2100      	movs	r1, #0
 8004c26:	2019      	movs	r0, #25
 8004c28:	f000 fbd9 	bl	80053de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004c2c:	2019      	movs	r0, #25
 8004c2e:	f000 fbf2 	bl	8005416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40021000 	.word	0x40021000

08004c44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <HAL_TIM_PWM_MspInit+0x58>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10c      	bne.n	8004c70 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c5c:	f043 0302 	orr.w	r3, r3, #2
 8004c60:	61d3      	str	r3, [r2, #28]
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c6e:	e010      	b.n	8004c92 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <HAL_TIM_PWM_MspInit+0x60>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10b      	bne.n	8004c92 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	61d3      	str	r3, [r2, #28]
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40000800 	.word	0x40000800

08004ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a28      	ldr	r2, [pc, #160]	; (8004d64 <HAL_TIM_MspPostInit+0xbc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d12a      	bne.n	8004d1e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_TIM_MspPostInit+0xc0>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <HAL_TIM_MspPostInit+0xc0>)
 8004cce:	f043 0308 	orr.w	r3, r3, #8
 8004cd2:	6193      	str	r3, [r2, #24]
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <HAL_TIM_MspPostInit+0xc0>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004ce0:	2330      	movs	r3, #48	; 0x30
 8004ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	481e      	ldr	r0, [pc, #120]	; (8004d6c <HAL_TIM_MspPostInit+0xc4>)
 8004cf4:	f000 fc5c 	bl	80055b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_TIM_MspPostInit+0xc8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIM_MspPostInit+0xc8>)
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004d1c:	e01d      	b.n	8004d5a <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <HAL_TIM_MspPostInit+0xcc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d118      	bne.n	8004d5a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_TIM_MspPostInit+0xc0>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4a0e      	ldr	r2, [pc, #56]	; (8004d68 <HAL_TIM_MspPostInit+0xc0>)
 8004d2e:	f043 0308 	orr.w	r3, r3, #8
 8004d32:	6193      	str	r3, [r2, #24]
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_TIM_MspPostInit+0xc0>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d46:	2302      	movs	r3, #2
 8004d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d4e:	f107 0314 	add.w	r3, r7, #20
 8004d52:	4619      	mov	r1, r3
 8004d54:	4805      	ldr	r0, [pc, #20]	; (8004d6c <HAL_TIM_MspPostInit+0xc4>)
 8004d56:	f000 fc2b 	bl	80055b0 <HAL_GPIO_Init>
}
 8004d5a:	bf00      	nop
 8004d5c:	3728      	adds	r7, #40	; 0x28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40010c00 	.word	0x40010c00
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000800 	.word	0x40000800

08004d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	; 0x30
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a46      	ldr	r2, [pc, #280]	; (8004eac <HAL_UART_MspInit+0x134>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d146      	bne.n	8004e26 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d98:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	4a44      	ldr	r2, [pc, #272]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da2:	6193      	str	r3, [r2, #24]
 8004da4:	4b42      	ldr	r3, [pc, #264]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db0:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	4a3e      	ldr	r2, [pc, #248]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004db6:	f043 0308 	orr.w	r3, r3, #8
 8004dba:	6193      	str	r3, [r2, #24]
 8004dbc:	4b3c      	ldr	r3, [pc, #240]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004dc8:	2340      	movs	r3, #64	; 0x40
 8004dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd4:	f107 031c 	add.w	r3, r7, #28
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4836      	ldr	r0, [pc, #216]	; (8004eb4 <HAL_UART_MspInit+0x13c>)
 8004ddc:	f000 fbe8 	bl	80055b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004de4:	2300      	movs	r3, #0
 8004de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dec:	f107 031c 	add.w	r3, r7, #28
 8004df0:	4619      	mov	r1, r3
 8004df2:	4830      	ldr	r0, [pc, #192]	; (8004eb4 <HAL_UART_MspInit+0x13c>)
 8004df4:	f000 fbdc 	bl	80055b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004df8:	4b2f      	ldr	r3, [pc, #188]	; (8004eb8 <HAL_UART_MspInit+0x140>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <HAL_UART_MspInit+0x140>)
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e14:	2200      	movs	r2, #0
 8004e16:	2100      	movs	r1, #0
 8004e18:	2025      	movs	r0, #37	; 0x25
 8004e1a:	f000 fae0 	bl	80053de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e1e:	2025      	movs	r0, #37	; 0x25
 8004e20:	f000 faf9 	bl	8005416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004e24:	e03e      	b.n	8004ea4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a24      	ldr	r2, [pc, #144]	; (8004ebc <HAL_UART_MspInit+0x144>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d139      	bne.n	8004ea4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e30:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e3a:	61d3      	str	r3, [r2, #28]
 8004e3c:	4b1c      	ldr	r3, [pc, #112]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e48:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004e4e:	f043 0308 	orr.w	r3, r3, #8
 8004e52:	6193      	str	r3, [r2, #24]
 8004e54:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <HAL_UART_MspInit+0x138>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e66:	2302      	movs	r3, #2
 8004e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e6e:	f107 031c 	add.w	r3, r7, #28
 8004e72:	4619      	mov	r1, r3
 8004e74:	480f      	ldr	r0, [pc, #60]	; (8004eb4 <HAL_UART_MspInit+0x13c>)
 8004e76:	f000 fb9b 	bl	80055b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e80:	2300      	movs	r3, #0
 8004e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e88:	f107 031c 	add.w	r3, r7, #28
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4809      	ldr	r0, [pc, #36]	; (8004eb4 <HAL_UART_MspInit+0x13c>)
 8004e90:	f000 fb8e 	bl	80055b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004e94:	2200      	movs	r2, #0
 8004e96:	2100      	movs	r1, #0
 8004e98:	2027      	movs	r0, #39	; 0x27
 8004e9a:	f000 faa0 	bl	80053de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004e9e:	2027      	movs	r0, #39	; 0x27
 8004ea0:	f000 fab9 	bl	8005416 <HAL_NVIC_EnableIRQ>
}
 8004ea4:	bf00      	nop
 8004ea6:	3730      	adds	r7, #48	; 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40013800 	.word	0x40013800
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40010c00 	.word	0x40010c00
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40004800 	.word	0x40004800

08004ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ec4:	e7fe      	b.n	8004ec4 <NMI_Handler+0x4>

08004ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eca:	e7fe      	b.n	8004eca <HardFault_Handler+0x4>

08004ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ed0:	e7fe      	b.n	8004ed0 <MemManage_Handler+0x4>

08004ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed6:	e7fe      	b.n	8004ed6 <BusFault_Handler+0x4>

08004ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004edc:	e7fe      	b.n	8004edc <UsageFault_Handler+0x4>

08004ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f06:	f000 f953 	bl	80051b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f14:	4802      	ldr	r0, [pc, #8]	; (8004f20 <TIM1_UP_IRQHandler+0x10>)
 8004f16:	f002 f84b 	bl	8006fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200004bc 	.word	0x200004bc

08004f24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f28:	4802      	ldr	r0, [pc, #8]	; (8004f34 <USART1_IRQHandler+0x10>)
 8004f2a:	f002 ff71 	bl	8007e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000430 	.word	0x20000430

08004f38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <USART3_IRQHandler+0x10>)
 8004f3e:	f002 ff67 	bl	8007e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2000035c 	.word	0x2000035c

08004f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
	return 1;
 8004f50:	2301      	movs	r3, #1
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <_kill>:

int _kill(int pid, int sig)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f64:	f003 fcac 	bl	80088c0 <__errno>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2216      	movs	r2, #22
 8004f6c:	601a      	str	r2, [r3, #0]
	return -1;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_exit>:

void _exit (int status)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f82:	f04f 31ff 	mov.w	r1, #4294967295
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ffe7 	bl	8004f5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f8c:	e7fe      	b.n	8004f8c <_exit+0x12>

08004f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e00a      	b.n	8004fb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fa0:	f3af 8000 	nop.w
 8004fa4:	4601      	mov	r1, r0
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	60ba      	str	r2, [r7, #8]
 8004fac:	b2ca      	uxtb	r2, r1
 8004fae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	dbf0      	blt.n	8004fa0 <_read+0x12>
	}

return len;
 8004fbe:	687b      	ldr	r3, [r7, #4]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e009      	b.n	8004fee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	60ba      	str	r2, [r7, #8]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3301      	adds	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	dbf1      	blt.n	8004fda <_write+0x12>
	}
	return len;
 8004ff6:	687b      	ldr	r3, [r7, #4]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_close>:

int _close(int file)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	return -1;
 8005008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005026:	605a      	str	r2, [r3, #4]
	return 0;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <_isatty>:

int _isatty(int file)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	return 1;
 800503c:	2301      	movs	r3, #1
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <_sbrk+0x5c>)
 800506a:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <_sbrk+0x60>)
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005074:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <_sbrk+0x64>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <_sbrk+0x64>)
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <_sbrk+0x68>)
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005082:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <_sbrk+0x64>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	429a      	cmp	r2, r3
 800508e:	d207      	bcs.n	80050a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005090:	f003 fc16 	bl	80088c0 <__errno>
 8005094:	4603      	mov	r3, r0
 8005096:	220c      	movs	r2, #12
 8005098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	e009      	b.n	80050b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <_sbrk+0x64>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <_sbrk+0x64>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <_sbrk+0x64>)
 80050b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20005000 	.word	0x20005000
 80050c0:	00000400 	.word	0x00000400
 80050c4:	20000274 	.word	0x20000274
 80050c8:	20000600 	.word	0x20000600

080050cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80050d8:	f7ff fff8 	bl	80050cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050dc:	480b      	ldr	r0, [pc, #44]	; (800510c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80050de:	490c      	ldr	r1, [pc, #48]	; (8005110 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80050e0:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <LoopFillZerobss+0x16>)
  movs r3, #0
 80050e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e4:	e002      	b.n	80050ec <LoopCopyDataInit>

080050e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ea:	3304      	adds	r3, #4

080050ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050f0:	d3f9      	bcc.n	80050e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050f2:	4a09      	ldr	r2, [pc, #36]	; (8005118 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80050f4:	4c09      	ldr	r4, [pc, #36]	; (800511c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f8:	e001      	b.n	80050fe <LoopFillZerobss>

080050fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050fc:	3204      	adds	r2, #4

080050fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005100:	d3fb      	bcc.n	80050fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005102:	f003 fbf5 	bl	80088f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005106:	f7ff f979 	bl	80043fc <main>
  bx lr
 800510a:	4770      	bx	lr
  ldr r0, =_sdata
 800510c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005110:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005114:	08010e98 	.word	0x08010e98
  ldr r2, =_sbss
 8005118:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800511c:	200005fc 	.word	0x200005fc

08005120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005120:	e7fe      	b.n	8005120 <ADC1_2_IRQHandler>
	...

08005124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <HAL_Init+0x28>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a07      	ldr	r2, [pc, #28]	; (800514c <HAL_Init+0x28>)
 800512e:	f043 0310 	orr.w	r3, r3, #16
 8005132:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005134:	2003      	movs	r0, #3
 8005136:	f000 f947 	bl	80053c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800513a:	200f      	movs	r0, #15
 800513c:	f000 f808 	bl	8005150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005140:	f7ff fca2 	bl	8004a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40022000 	.word	0x40022000

08005150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_InitTick+0x54>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_InitTick+0x58>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005166:	fbb3 f3f1 	udiv	r3, r3, r1
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f95f 	bl	8005432 <HAL_SYSTICK_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e00e      	b.n	800519c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b0f      	cmp	r3, #15
 8005182:	d80a      	bhi.n	800519a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005184:	2200      	movs	r2, #0
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	f000 f927 	bl	80053de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005190:	4a06      	ldr	r2, [pc, #24]	; (80051ac <HAL_InitTick+0x5c>)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000000 	.word	0x20000000
 80051a8:	20000008 	.word	0x20000008
 80051ac:	20000004 	.word	0x20000004

080051b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_IncTick+0x1c>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_IncTick+0x20>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4413      	add	r3, r2
 80051c0:	4a03      	ldr	r2, [pc, #12]	; (80051d0 <HAL_IncTick+0x20>)
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	20000008 	.word	0x20000008
 80051d0:	200005e8 	.word	0x200005e8

080051d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return uwTick;
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <HAL_GetTick+0x10>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	200005e8 	.word	0x200005e8

080051e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051f0:	f7ff fff0 	bl	80051d4 <HAL_GetTick>
 80051f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d005      	beq.n	800520e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <HAL_Delay+0x44>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800520e:	bf00      	nop
 8005210:	f7ff ffe0 	bl	80051d4 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	429a      	cmp	r2, r3
 800521e:	d8f7      	bhi.n	8005210 <HAL_Delay+0x28>
  {
  }
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000008 	.word	0x20000008

08005230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005240:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <__NVIC_SetPriorityGrouping+0x44>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800524c:	4013      	ands	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800525c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005262:	4a04      	ldr	r2, [pc, #16]	; (8005274 <__NVIC_SetPriorityGrouping+0x44>)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	60d3      	str	r3, [r2, #12]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	e000ed00 	.word	0xe000ed00

08005278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800527c:	4b04      	ldr	r3, [pc, #16]	; (8005290 <__NVIC_GetPriorityGrouping+0x18>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	f003 0307 	and.w	r3, r3, #7
}
 8005286:	4618      	mov	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	db0b      	blt.n	80052be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	f003 021f 	and.w	r2, r3, #31
 80052ac:	4906      	ldr	r1, [pc, #24]	; (80052c8 <__NVIC_EnableIRQ+0x34>)
 80052ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2001      	movs	r0, #1
 80052b6:	fa00 f202 	lsl.w	r2, r0, r2
 80052ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	e000e100 	.word	0xe000e100

080052cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	6039      	str	r1, [r7, #0]
 80052d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	db0a      	blt.n	80052f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	490c      	ldr	r1, [pc, #48]	; (8005318 <__NVIC_SetPriority+0x4c>)
 80052e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	440b      	add	r3, r1
 80052f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052f4:	e00a      	b.n	800530c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4908      	ldr	r1, [pc, #32]	; (800531c <__NVIC_SetPriority+0x50>)
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	3b04      	subs	r3, #4
 8005304:	0112      	lsls	r2, r2, #4
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	440b      	add	r3, r1
 800530a:	761a      	strb	r2, [r3, #24]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	e000e100 	.word	0xe000e100
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	; 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f1c3 0307 	rsb	r3, r3, #7
 800533a:	2b04      	cmp	r3, #4
 800533c:	bf28      	it	cs
 800533e:	2304      	movcs	r3, #4
 8005340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3304      	adds	r3, #4
 8005346:	2b06      	cmp	r3, #6
 8005348:	d902      	bls.n	8005350 <NVIC_EncodePriority+0x30>
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3b03      	subs	r3, #3
 800534e:	e000      	b.n	8005352 <NVIC_EncodePriority+0x32>
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43da      	mvns	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	401a      	ands	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005368:	f04f 31ff 	mov.w	r1, #4294967295
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	fa01 f303 	lsl.w	r3, r1, r3
 8005372:	43d9      	mvns	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005378:	4313      	orrs	r3, r2
         );
}
 800537a:	4618      	mov	r0, r3
 800537c:	3724      	adds	r7, #36	; 0x24
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3b01      	subs	r3, #1
 8005390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005394:	d301      	bcc.n	800539a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005396:	2301      	movs	r3, #1
 8005398:	e00f      	b.n	80053ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800539a:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <SysTick_Config+0x40>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053a2:	210f      	movs	r1, #15
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	f7ff ff90 	bl	80052cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <SysTick_Config+0x40>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053b2:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <SysTick_Config+0x40>)
 80053b4:	2207      	movs	r2, #7
 80053b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	e000e010 	.word	0xe000e010

080053c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff2d 	bl	8005230 <__NVIC_SetPriorityGrouping>
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053de:	b580      	push	{r7, lr}
 80053e0:	b086      	sub	sp, #24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	4603      	mov	r3, r0
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053f0:	f7ff ff42 	bl	8005278 <__NVIC_GetPriorityGrouping>
 80053f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f7ff ff90 	bl	8005320 <NVIC_EncodePriority>
 8005400:	4602      	mov	r2, r0
 8005402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff5f 	bl	80052cc <__NVIC_SetPriority>
}
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	4603      	mov	r3, r0
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ff35 	bl	8005294 <__NVIC_EnableIRQ>
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ffa2 	bl	8005384 <SysTick_Config>
 8005440:	4603      	mov	r3, r0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d008      	beq.n	8005474 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2204      	movs	r2, #4
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e020      	b.n	80054b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 020e 	bic.w	r2, r2, #14
 8005482:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	2101      	movs	r1, #1
 800549e:	fa01 f202 	lsl.w	r2, r1, r2
 80054a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d005      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
 80054e2:	e051      	b.n	8005588 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 020e 	bic.w	r2, r2, #14
 80054f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a22      	ldr	r2, [pc, #136]	; (8005594 <HAL_DMA_Abort_IT+0xd4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d029      	beq.n	8005562 <HAL_DMA_Abort_IT+0xa2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a21      	ldr	r2, [pc, #132]	; (8005598 <HAL_DMA_Abort_IT+0xd8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d022      	beq.n	800555e <HAL_DMA_Abort_IT+0x9e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_DMA_Abort_IT+0xdc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01a      	beq.n	8005558 <HAL_DMA_Abort_IT+0x98>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_DMA_Abort_IT+0xe0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d012      	beq.n	8005552 <HAL_DMA_Abort_IT+0x92>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_DMA_Abort_IT+0xe4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00a      	beq.n	800554c <HAL_DMA_Abort_IT+0x8c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <HAL_DMA_Abort_IT+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d102      	bne.n	8005546 <HAL_DMA_Abort_IT+0x86>
 8005540:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005544:	e00e      	b.n	8005564 <HAL_DMA_Abort_IT+0xa4>
 8005546:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800554a:	e00b      	b.n	8005564 <HAL_DMA_Abort_IT+0xa4>
 800554c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005550:	e008      	b.n	8005564 <HAL_DMA_Abort_IT+0xa4>
 8005552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005556:	e005      	b.n	8005564 <HAL_DMA_Abort_IT+0xa4>
 8005558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800555c:	e002      	b.n	8005564 <HAL_DMA_Abort_IT+0xa4>
 800555e:	2310      	movs	r3, #16
 8005560:	e000      	b.n	8005564 <HAL_DMA_Abort_IT+0xa4>
 8005562:	2301      	movs	r3, #1
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <HAL_DMA_Abort_IT+0xec>)
 8005566:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
    } 
  }
  return status;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40020008 	.word	0x40020008
 8005598:	4002001c 	.word	0x4002001c
 800559c:	40020030 	.word	0x40020030
 80055a0:	40020044 	.word	0x40020044
 80055a4:	40020058 	.word	0x40020058
 80055a8:	4002006c 	.word	0x4002006c
 80055ac:	40020000 	.word	0x40020000

080055b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b08b      	sub	sp, #44	; 0x2c
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055ba:	2300      	movs	r3, #0
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80055be:	2300      	movs	r3, #0
 80055c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055c2:	e169      	b.n	8005898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80055c4:	2201      	movs	r2, #1
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	429a      	cmp	r2, r3
 80055de:	f040 8158 	bne.w	8005892 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4a9a      	ldr	r2, [pc, #616]	; (8005850 <HAL_GPIO_Init+0x2a0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d05e      	beq.n	80056aa <HAL_GPIO_Init+0xfa>
 80055ec:	4a98      	ldr	r2, [pc, #608]	; (8005850 <HAL_GPIO_Init+0x2a0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d875      	bhi.n	80056de <HAL_GPIO_Init+0x12e>
 80055f2:	4a98      	ldr	r2, [pc, #608]	; (8005854 <HAL_GPIO_Init+0x2a4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d058      	beq.n	80056aa <HAL_GPIO_Init+0xfa>
 80055f8:	4a96      	ldr	r2, [pc, #600]	; (8005854 <HAL_GPIO_Init+0x2a4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d86f      	bhi.n	80056de <HAL_GPIO_Init+0x12e>
 80055fe:	4a96      	ldr	r2, [pc, #600]	; (8005858 <HAL_GPIO_Init+0x2a8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d052      	beq.n	80056aa <HAL_GPIO_Init+0xfa>
 8005604:	4a94      	ldr	r2, [pc, #592]	; (8005858 <HAL_GPIO_Init+0x2a8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d869      	bhi.n	80056de <HAL_GPIO_Init+0x12e>
 800560a:	4a94      	ldr	r2, [pc, #592]	; (800585c <HAL_GPIO_Init+0x2ac>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d04c      	beq.n	80056aa <HAL_GPIO_Init+0xfa>
 8005610:	4a92      	ldr	r2, [pc, #584]	; (800585c <HAL_GPIO_Init+0x2ac>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d863      	bhi.n	80056de <HAL_GPIO_Init+0x12e>
 8005616:	4a92      	ldr	r2, [pc, #584]	; (8005860 <HAL_GPIO_Init+0x2b0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d046      	beq.n	80056aa <HAL_GPIO_Init+0xfa>
 800561c:	4a90      	ldr	r2, [pc, #576]	; (8005860 <HAL_GPIO_Init+0x2b0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d85d      	bhi.n	80056de <HAL_GPIO_Init+0x12e>
 8005622:	2b12      	cmp	r3, #18
 8005624:	d82a      	bhi.n	800567c <HAL_GPIO_Init+0xcc>
 8005626:	2b12      	cmp	r3, #18
 8005628:	d859      	bhi.n	80056de <HAL_GPIO_Init+0x12e>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <HAL_GPIO_Init+0x80>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	080056ab 	.word	0x080056ab
 8005634:	08005685 	.word	0x08005685
 8005638:	08005697 	.word	0x08005697
 800563c:	080056d9 	.word	0x080056d9
 8005640:	080056df 	.word	0x080056df
 8005644:	080056df 	.word	0x080056df
 8005648:	080056df 	.word	0x080056df
 800564c:	080056df 	.word	0x080056df
 8005650:	080056df 	.word	0x080056df
 8005654:	080056df 	.word	0x080056df
 8005658:	080056df 	.word	0x080056df
 800565c:	080056df 	.word	0x080056df
 8005660:	080056df 	.word	0x080056df
 8005664:	080056df 	.word	0x080056df
 8005668:	080056df 	.word	0x080056df
 800566c:	080056df 	.word	0x080056df
 8005670:	080056df 	.word	0x080056df
 8005674:	0800568d 	.word	0x0800568d
 8005678:	080056a1 	.word	0x080056a1
 800567c:	4a79      	ldr	r2, [pc, #484]	; (8005864 <HAL_GPIO_Init+0x2b4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005682:	e02c      	b.n	80056de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	623b      	str	r3, [r7, #32]
          break;
 800568a:	e029      	b.n	80056e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	3304      	adds	r3, #4
 8005692:	623b      	str	r3, [r7, #32]
          break;
 8005694:	e024      	b.n	80056e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	3308      	adds	r3, #8
 800569c:	623b      	str	r3, [r7, #32]
          break;
 800569e:	e01f      	b.n	80056e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	330c      	adds	r3, #12
 80056a6:	623b      	str	r3, [r7, #32]
          break;
 80056a8:	e01a      	b.n	80056e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80056b2:	2304      	movs	r3, #4
 80056b4:	623b      	str	r3, [r7, #32]
          break;
 80056b6:	e013      	b.n	80056e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80056c0:	2308      	movs	r3, #8
 80056c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	611a      	str	r2, [r3, #16]
          break;
 80056ca:	e009      	b.n	80056e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80056cc:	2308      	movs	r3, #8
 80056ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	615a      	str	r2, [r3, #20]
          break;
 80056d6:	e003      	b.n	80056e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80056d8:	2300      	movs	r3, #0
 80056da:	623b      	str	r3, [r7, #32]
          break;
 80056dc:	e000      	b.n	80056e0 <HAL_GPIO_Init+0x130>
          break;
 80056de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2bff      	cmp	r3, #255	; 0xff
 80056e4:	d801      	bhi.n	80056ea <HAL_GPIO_Init+0x13a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	e001      	b.n	80056ee <HAL_GPIO_Init+0x13e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3304      	adds	r3, #4
 80056ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2bff      	cmp	r3, #255	; 0xff
 80056f4:	d802      	bhi.n	80056fc <HAL_GPIO_Init+0x14c>
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	e002      	b.n	8005702 <HAL_GPIO_Init+0x152>
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	3b08      	subs	r3, #8
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	210f      	movs	r1, #15
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	6a39      	ldr	r1, [r7, #32]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	fa01 f303 	lsl.w	r3, r1, r3
 800571c:	431a      	orrs	r2, r3
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80b1 	beq.w	8005892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005730:	4b4d      	ldr	r3, [pc, #308]	; (8005868 <HAL_GPIO_Init+0x2b8>)
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	4a4c      	ldr	r2, [pc, #304]	; (8005868 <HAL_GPIO_Init+0x2b8>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6193      	str	r3, [r2, #24]
 800573c:	4b4a      	ldr	r3, [pc, #296]	; (8005868 <HAL_GPIO_Init+0x2b8>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005748:	4a48      	ldr	r2, [pc, #288]	; (800586c <HAL_GPIO_Init+0x2bc>)
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	089b      	lsrs	r3, r3, #2
 800574e:	3302      	adds	r3, #2
 8005750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	220f      	movs	r2, #15
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a40      	ldr	r2, [pc, #256]	; (8005870 <HAL_GPIO_Init+0x2c0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_GPIO_Init+0x1ec>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <HAL_GPIO_Init+0x2c4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00d      	beq.n	8005798 <HAL_GPIO_Init+0x1e8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3e      	ldr	r2, [pc, #248]	; (8005878 <HAL_GPIO_Init+0x2c8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <HAL_GPIO_Init+0x1e4>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3d      	ldr	r2, [pc, #244]	; (800587c <HAL_GPIO_Init+0x2cc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d101      	bne.n	8005790 <HAL_GPIO_Init+0x1e0>
 800578c:	2303      	movs	r3, #3
 800578e:	e006      	b.n	800579e <HAL_GPIO_Init+0x1ee>
 8005790:	2304      	movs	r3, #4
 8005792:	e004      	b.n	800579e <HAL_GPIO_Init+0x1ee>
 8005794:	2302      	movs	r3, #2
 8005796:	e002      	b.n	800579e <HAL_GPIO_Init+0x1ee>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_GPIO_Init+0x1ee>
 800579c:	2300      	movs	r3, #0
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	f002 0203 	and.w	r2, r2, #3
 80057a4:	0092      	lsls	r2, r2, #2
 80057a6:	4093      	lsls	r3, r2
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80057ae:	492f      	ldr	r1, [pc, #188]	; (800586c <HAL_GPIO_Init+0x2bc>)
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	3302      	adds	r3, #2
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d006      	beq.n	80057d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80057c8:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	492c      	ldr	r1, [pc, #176]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
 80057d4:	e006      	b.n	80057e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	43db      	mvns	r3, r3
 80057de:	4928      	ldr	r1, [pc, #160]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d006      	beq.n	80057fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80057f0:	4b23      	ldr	r3, [pc, #140]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	4922      	ldr	r1, [pc, #136]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60cb      	str	r3, [r1, #12]
 80057fc:	e006      	b.n	800580c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80057fe:	4b20      	ldr	r3, [pc, #128]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	43db      	mvns	r3, r3
 8005806:	491e      	ldr	r1, [pc, #120]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 8005808:	4013      	ands	r3, r2
 800580a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005818:	4b19      	ldr	r3, [pc, #100]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	4918      	ldr	r1, [pc, #96]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	604b      	str	r3, [r1, #4]
 8005824:	e006      	b.n	8005834 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005826:	4b16      	ldr	r3, [pc, #88]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	43db      	mvns	r3, r3
 800582e:	4914      	ldr	r1, [pc, #80]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 8005830:	4013      	ands	r3, r2
 8005832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d021      	beq.n	8005884 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005840:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	490e      	ldr	r1, [pc, #56]	; (8005880 <HAL_GPIO_Init+0x2d0>)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]
 800584c:	e021      	b.n	8005892 <HAL_GPIO_Init+0x2e2>
 800584e:	bf00      	nop
 8005850:	10320000 	.word	0x10320000
 8005854:	10310000 	.word	0x10310000
 8005858:	10220000 	.word	0x10220000
 800585c:	10210000 	.word	0x10210000
 8005860:	10120000 	.word	0x10120000
 8005864:	10110000 	.word	0x10110000
 8005868:	40021000 	.word	0x40021000
 800586c:	40010000 	.word	0x40010000
 8005870:	40010800 	.word	0x40010800
 8005874:	40010c00 	.word	0x40010c00
 8005878:	40011000 	.word	0x40011000
 800587c:	40011400 	.word	0x40011400
 8005880:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_GPIO_Init+0x304>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	43db      	mvns	r3, r3
 800588c:	4909      	ldr	r1, [pc, #36]	; (80058b4 <HAL_GPIO_Init+0x304>)
 800588e:	4013      	ands	r3, r2
 8005890:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	3301      	adds	r3, #1
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f47f ae8e 	bne.w	80055c4 <HAL_GPIO_Init+0x14>
  }
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	372c      	adds	r7, #44	; 0x2c
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr
 80058b4:	40010400 	.word	0x40010400

080058b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
 80058c4:	4613      	mov	r3, r2
 80058c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80058d4:	e003      	b.n	80058de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	041a      	lsls	r2, r3, #16
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e26c      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8087 	beq.w	8005a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005908:	4b92      	ldr	r3, [pc, #584]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b04      	cmp	r3, #4
 8005912:	d00c      	beq.n	800592e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005914:	4b8f      	ldr	r3, [pc, #572]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b08      	cmp	r3, #8
 800591e:	d112      	bne.n	8005946 <HAL_RCC_OscConfig+0x5e>
 8005920:	4b8c      	ldr	r3, [pc, #560]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d10b      	bne.n	8005946 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592e:	4b89      	ldr	r3, [pc, #548]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d06c      	beq.n	8005a14 <HAL_RCC_OscConfig+0x12c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d168      	bne.n	8005a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e246      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x76>
 8005950:	4b80      	ldr	r3, [pc, #512]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a7f      	ldr	r2, [pc, #508]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e02e      	b.n	80059bc <HAL_RCC_OscConfig+0xd4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x98>
 8005966:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 800596c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b78      	ldr	r3, [pc, #480]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a77      	ldr	r2, [pc, #476]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e01d      	b.n	80059bc <HAL_RCC_OscConfig+0xd4>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005988:	d10c      	bne.n	80059a4 <HAL_RCC_OscConfig+0xbc>
 800598a:	4b72      	ldr	r3, [pc, #456]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a71      	ldr	r2, [pc, #452]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	4b6f      	ldr	r3, [pc, #444]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6e      	ldr	r2, [pc, #440]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e00b      	b.n	80059bc <HAL_RCC_OscConfig+0xd4>
 80059a4:	4b6b      	ldr	r3, [pc, #428]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a6a      	ldr	r2, [pc, #424]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 80059aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b68      	ldr	r3, [pc, #416]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a67      	ldr	r2, [pc, #412]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 80059b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d013      	beq.n	80059ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c4:	f7ff fc06 	bl	80051d4 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059cc:	f7ff fc02 	bl	80051d4 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b64      	cmp	r3, #100	; 0x64
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e1fa      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059de:	4b5d      	ldr	r3, [pc, #372]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0xe4>
 80059ea:	e014      	b.n	8005a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ec:	f7ff fbf2 	bl	80051d4 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f4:	f7ff fbee 	bl	80051d4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e1e6      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a06:	4b53      	ldr	r3, [pc, #332]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0x10c>
 8005a12:	e000      	b.n	8005a16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d063      	beq.n	8005aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a22:	4b4c      	ldr	r3, [pc, #304]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a2e:	4b49      	ldr	r3, [pc, #292]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d11c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x18c>
 8005a3a:	4b46      	ldr	r3, [pc, #280]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d116      	bne.n	8005a74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a46:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_RCC_OscConfig+0x176>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d001      	beq.n	8005a5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e1ba      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5e:	4b3d      	ldr	r3, [pc, #244]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4939      	ldr	r1, [pc, #228]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a72:	e03a      	b.n	8005aea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d020      	beq.n	8005abe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a7c:	4b36      	ldr	r3, [pc, #216]	; (8005b58 <HAL_RCC_OscConfig+0x270>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7ff fba7 	bl	80051d4 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a8a:	f7ff fba3 	bl	80051d4 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e19b      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9c:	4b2d      	ldr	r3, [pc, #180]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa8:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4927      	ldr	r1, [pc, #156]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	600b      	str	r3, [r1, #0]
 8005abc:	e015      	b.n	8005aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005abe:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <HAL_RCC_OscConfig+0x270>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac4:	f7ff fb86 	bl	80051d4 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005acc:	f7ff fb82 	bl	80051d4 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e17a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ade:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d03a      	beq.n	8005b6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d019      	beq.n	8005b32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afe:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <HAL_RCC_OscConfig+0x274>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b04:	f7ff fb66 	bl	80051d4 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0c:	f7ff fb62 	bl	80051d4 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e15a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	f000 facc 	bl	80060c8 <RCC_Delay>
 8005b30:	e01c      	b.n	8005b6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <HAL_RCC_OscConfig+0x274>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b38:	f7ff fb4c 	bl	80051d4 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b3e:	e00f      	b.n	8005b60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b40:	f7ff fb48 	bl	80051d4 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d908      	bls.n	8005b60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e140      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000
 8005b58:	42420000 	.word	0x42420000
 8005b5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b60:	4b9e      	ldr	r3, [pc, #632]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e9      	bne.n	8005b40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80a6 	beq.w	8005cc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b7e:	4b97      	ldr	r3, [pc, #604]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10d      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	4b94      	ldr	r3, [pc, #592]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	4a93      	ldr	r2, [pc, #588]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b94:	61d3      	str	r3, [r2, #28]
 8005b96:	4b91      	ldr	r3, [pc, #580]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba6:	4b8e      	ldr	r3, [pc, #568]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d118      	bne.n	8005be4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb2:	4b8b      	ldr	r3, [pc, #556]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a8a      	ldr	r2, [pc, #552]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bbe:	f7ff fb09 	bl	80051d4 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc6:	f7ff fb05 	bl	80051d4 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b64      	cmp	r3, #100	; 0x64
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0fd      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd8:	4b81      	ldr	r3, [pc, #516]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d106      	bne.n	8005bfa <HAL_RCC_OscConfig+0x312>
 8005bec:	4b7b      	ldr	r3, [pc, #492]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	4a7a      	ldr	r2, [pc, #488]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	6213      	str	r3, [r2, #32]
 8005bf8:	e02d      	b.n	8005c56 <HAL_RCC_OscConfig+0x36e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10c      	bne.n	8005c1c <HAL_RCC_OscConfig+0x334>
 8005c02:	4b76      	ldr	r3, [pc, #472]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	4a75      	ldr	r2, [pc, #468]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	6213      	str	r3, [r2, #32]
 8005c0e:	4b73      	ldr	r3, [pc, #460]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	4a72      	ldr	r2, [pc, #456]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c14:	f023 0304 	bic.w	r3, r3, #4
 8005c18:	6213      	str	r3, [r2, #32]
 8005c1a:	e01c      	b.n	8005c56 <HAL_RCC_OscConfig+0x36e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b05      	cmp	r3, #5
 8005c22:	d10c      	bne.n	8005c3e <HAL_RCC_OscConfig+0x356>
 8005c24:	4b6d      	ldr	r3, [pc, #436]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	4a6c      	ldr	r2, [pc, #432]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c2a:	f043 0304 	orr.w	r3, r3, #4
 8005c2e:	6213      	str	r3, [r2, #32]
 8005c30:	4b6a      	ldr	r3, [pc, #424]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	4a69      	ldr	r2, [pc, #420]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	6213      	str	r3, [r2, #32]
 8005c3c:	e00b      	b.n	8005c56 <HAL_RCC_OscConfig+0x36e>
 8005c3e:	4b67      	ldr	r3, [pc, #412]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	4a66      	ldr	r2, [pc, #408]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	6213      	str	r3, [r2, #32]
 8005c4a:	4b64      	ldr	r3, [pc, #400]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	4a63      	ldr	r2, [pc, #396]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c50:	f023 0304 	bic.w	r3, r3, #4
 8005c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d015      	beq.n	8005c8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c5e:	f7ff fab9 	bl	80051d4 <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c64:	e00a      	b.n	8005c7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c66:	f7ff fab5 	bl	80051d4 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e0ab      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c7c:	4b57      	ldr	r3, [pc, #348]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0ee      	beq.n	8005c66 <HAL_RCC_OscConfig+0x37e>
 8005c88:	e014      	b.n	8005cb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8a:	f7ff faa3 	bl	80051d4 <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c90:	e00a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c92:	f7ff fa9f 	bl	80051d4 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e095      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca8:	4b4c      	ldr	r3, [pc, #304]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1ee      	bne.n	8005c92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d105      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cba:	4b48      	ldr	r3, [pc, #288]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	4a47      	ldr	r2, [pc, #284]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8081 	beq.w	8005dd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cd0:	4b42      	ldr	r3, [pc, #264]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 030c 	and.w	r3, r3, #12
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d061      	beq.n	8005da0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d146      	bne.n	8005d72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce4:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <HAL_RCC_OscConfig+0x4fc>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cea:	f7ff fa73 	bl	80051d4 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf2:	f7ff fa6f 	bl	80051d4 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e067      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d04:	4b35      	ldr	r3, [pc, #212]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f0      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d18:	d108      	bne.n	8005d2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d1a:	4b30      	ldr	r3, [pc, #192]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	492d      	ldr	r1, [pc, #180]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a19      	ldr	r1, [r3, #32]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	4927      	ldr	r1, [pc, #156]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d44:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <HAL_RCC_OscConfig+0x4fc>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4a:	f7ff fa43 	bl	80051d4 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d52:	f7ff fa3f 	bl	80051d4 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e037      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d64:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCC_OscConfig+0x46a>
 8005d70:	e02f      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <HAL_RCC_OscConfig+0x4fc>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7ff fa2c 	bl	80051d4 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d80:	f7ff fa28 	bl	80051d4 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e020      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d92:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0x498>
 8005d9e:	e018      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e013      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <HAL_RCC_OscConfig+0x4f4>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d106      	bne.n	8005dce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d001      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40007000 	.word	0x40007000
 8005de4:	42420060 	.word	0x42420060

08005de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0d0      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b6a      	ldr	r3, [pc, #424]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d910      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b67      	ldr	r3, [pc, #412]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 0207 	bic.w	r2, r3, #7
 8005e12:	4965      	ldr	r1, [pc, #404]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b63      	ldr	r3, [pc, #396]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0b8      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e44:	4b59      	ldr	r3, [pc, #356]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a58      	ldr	r2, [pc, #352]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005e4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a52      	ldr	r2, [pc, #328]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005e62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e68:	4b50      	ldr	r3, [pc, #320]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	494d      	ldr	r1, [pc, #308]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d040      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d107      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8e:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d115      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e07f      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea6:	4b41      	ldr	r3, [pc, #260]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e073      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb6:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e06b      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ec6:	4b39      	ldr	r3, [pc, #228]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f023 0203 	bic.w	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4936      	ldr	r1, [pc, #216]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ed8:	f7ff f97c 	bl	80051d4 <HAL_GetTick>
 8005edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ede:	e00a      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee0:	f7ff f978 	bl	80051d4 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e053      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef6:	4b2d      	ldr	r3, [pc, #180]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f003 020c 	and.w	r2, r3, #12
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1eb      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f08:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d210      	bcs.n	8005f38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 0207 	bic.w	r2, r3, #7
 8005f1e:	4922      	ldr	r1, [pc, #136]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d001      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e032      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f44:	4b19      	ldr	r3, [pc, #100]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	4916      	ldr	r1, [pc, #88]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f62:	4b12      	ldr	r3, [pc, #72]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	490e      	ldr	r1, [pc, #56]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f76:	f000 f821 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	091b      	lsrs	r3, r3, #4
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	490a      	ldr	r1, [pc, #40]	; (8005fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f88:	5ccb      	ldrb	r3, [r1, r3]
 8005f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8005f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f92:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff f8da 	bl	8005150 <HAL_InitTick>

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40022000 	.word	0x40022000
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	08010378 	.word	0x08010378
 8005fb4:	20000000 	.word	0x20000000
 8005fb8:	20000004 	.word	0x20000004

08005fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005fd6:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 030c 	and.w	r3, r3, #12
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d002      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0x30>
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x36>
 8005fea:	e027      	b.n	800603c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fec:	4b19      	ldr	r3, [pc, #100]	; (8006054 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fee:	613b      	str	r3, [r7, #16]
      break;
 8005ff0:	e027      	b.n	8006042 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	0c9b      	lsrs	r3, r3, #18
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ffc:	5cd3      	ldrb	r3, [r2, r3]
 8005ffe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d010      	beq.n	800602c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_RCC_GetSysClockFreq+0x94>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	0c5b      	lsrs	r3, r3, #17
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006016:	5cd3      	ldrb	r3, [r2, r3]
 8006018:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a0d      	ldr	r2, [pc, #52]	; (8006054 <HAL_RCC_GetSysClockFreq+0x98>)
 800601e:	fb02 f203 	mul.w	r2, r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e004      	b.n	8006036 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a0c      	ldr	r2, [pc, #48]	; (8006060 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	613b      	str	r3, [r7, #16]
      break;
 800603a:	e002      	b.n	8006042 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <HAL_RCC_GetSysClockFreq+0x98>)
 800603e:	613b      	str	r3, [r7, #16]
      break;
 8006040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006042:	693b      	ldr	r3, [r7, #16]
}
 8006044:	4618      	mov	r0, r3
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40021000 	.word	0x40021000
 8006054:	007a1200 	.word	0x007a1200
 8006058:	08010390 	.word	0x08010390
 800605c:	080103a0 	.word	0x080103a0
 8006060:	003d0900 	.word	0x003d0900

08006064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006068:	4b02      	ldr	r3, [pc, #8]	; (8006074 <HAL_RCC_GetHCLKFreq+0x10>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr
 8006074:	20000000 	.word	0x20000000

08006078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800607c:	f7ff fff2 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4903      	ldr	r1, [pc, #12]	; (800609c <HAL_RCC_GetPCLK1Freq+0x24>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40021000 	.word	0x40021000
 800609c:	08010388 	.word	0x08010388

080060a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060a4:	f7ff ffde 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	0adb      	lsrs	r3, r3, #11
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	08010388 	.word	0x08010388

080060c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <RCC_Delay+0x34>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <RCC_Delay+0x38>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	0a5b      	lsrs	r3, r3, #9
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060e4:	bf00      	nop
  }
  while (Delay --);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1e5a      	subs	r2, r3, #1
 80060ea:	60fa      	str	r2, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f9      	bne.n	80060e4 <RCC_Delay+0x1c>
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	20000000 	.word	0x20000000
 8006100:	10624dd3 	.word	0x10624dd3

08006104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e076      	b.n	8006204 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d108      	bne.n	8006130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006126:	d009      	beq.n	800613c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	61da      	str	r2, [r3, #28]
 800612e:	e005      	b.n	800613c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fe fcc8 	bl	8004aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	ea42 0103 	orr.w	r1, r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	0c1a      	lsrs	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f002 0204 	and.w	r2, r2, #4
 80061e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800621c:	f7fe ffda 	bl	80051d4 <HAL_GetTick>
 8006220:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b01      	cmp	r3, #1
 8006230:	d001      	beq.n	8006236 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
 8006234:	e12a      	b.n	800648c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_Transmit+0x36>
 800623c:	88fb      	ldrh	r3, [r7, #6]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e122      	b.n	800648c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_SPI_Transmit+0x48>
 8006250:	2302      	movs	r3, #2
 8006252:	e11b      	b.n	800648c <HAL_SPI_Transmit+0x280>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2203      	movs	r2, #3
 8006260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a2:	d10f      	bne.n	80062c4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d007      	beq.n	80062e2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ea:	d152      	bne.n	8006392 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_SPI_Transmit+0xee>
 80062f4:	8b7b      	ldrh	r3, [r7, #26]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d145      	bne.n	8006386 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	881a      	ldrh	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800631e:	e032      	b.n	8006386 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d112      	bne.n	8006354 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	881a      	ldrh	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	1c9a      	adds	r2, r3, #2
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	86da      	strh	r2, [r3, #54]	; 0x36
 8006352:	e018      	b.n	8006386 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006354:	f7fe ff3e 	bl	80051d4 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d803      	bhi.n	800636c <HAL_SPI_Transmit+0x160>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636a:	d102      	bne.n	8006372 <HAL_SPI_Transmit+0x166>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e082      	b.n	800648c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1c7      	bne.n	8006320 <HAL_SPI_Transmit+0x114>
 8006390:	e053      	b.n	800643a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Transmit+0x194>
 800639a:	8b7b      	ldrh	r3, [r7, #26]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d147      	bne.n	8006430 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063c6:	e033      	b.n	8006430 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d113      	bne.n	80063fe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	7812      	ldrb	r2, [r2, #0]
 80063e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80063fc:	e018      	b.n	8006430 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063fe:	f7fe fee9 	bl	80051d4 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d803      	bhi.n	8006416 <HAL_SPI_Transmit+0x20a>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d102      	bne.n	800641c <HAL_SPI_Transmit+0x210>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e02d      	b.n	800648c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1c6      	bne.n	80063c8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fbc4 	bl	8006bcc <SPI_EndRxTxTransaction>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800648a:	2300      	movs	r3, #0
  }
}
 800648c:	4618      	mov	r0, r3
 800648e:	3720      	adds	r7, #32
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d001      	beq.n	80064b4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
 80064b2:	e104      	b.n	80066be <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064bc:	d112      	bne.n	80064e4 <HAL_SPI_Receive+0x50>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10e      	bne.n	80064e4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2204      	movs	r2, #4
 80064ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f8f3 	bl	80066c6 <HAL_SPI_TransmitReceive>
 80064e0:	4603      	mov	r3, r0
 80064e2:	e0ec      	b.n	80066be <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064e4:	f7fe fe76 	bl	80051d4 <HAL_GetTick>
 80064e8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_Receive+0x62>
 80064f0:	88fb      	ldrh	r3, [r7, #6]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e0e1      	b.n	80066be <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_SPI_Receive+0x74>
 8006504:	2302      	movs	r3, #2
 8006506:	e0da      	b.n	80066be <HAL_SPI_Receive+0x22a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2204      	movs	r2, #4
 8006514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006556:	d10f      	bne.n	8006578 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006566:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006576:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d007      	beq.n	8006596 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d170      	bne.n	8006680 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800659e:	e035      	b.n	800660c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d115      	bne.n	80065da <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f103 020c 	add.w	r2, r3, #12
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d8:	e018      	b.n	800660c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065da:	f7fe fdfb 	bl	80051d4 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d803      	bhi.n	80065f2 <HAL_SPI_Receive+0x15e>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d102      	bne.n	80065f8 <HAL_SPI_Receive+0x164>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e058      	b.n	80066be <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1c4      	bne.n	80065a0 <HAL_SPI_Receive+0x10c>
 8006616:	e038      	b.n	800668a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d113      	bne.n	800664e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	b292      	uxth	r2, r2
 8006632:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800664c:	e018      	b.n	8006680 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800664e:	f7fe fdc1 	bl	80051d4 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d803      	bhi.n	8006666 <HAL_SPI_Receive+0x1d2>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d102      	bne.n	800666c <HAL_SPI_Receive+0x1d8>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e01e      	b.n	80066be <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1c6      	bne.n	8006618 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 fa4a 	bl	8006b28 <SPI_EndRxTransaction>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80066bc:	2300      	movs	r3, #0
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b08a      	sub	sp, #40	; 0x28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066d4:	2301      	movs	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066d8:	f7fe fd7c 	bl	80051d4 <HAL_GetTick>
 80066dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80066ec:	887b      	ldrh	r3, [r7, #2]
 80066ee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066f0:	7ffb      	ldrb	r3, [r7, #31]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d00c      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x4a>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066fc:	d106      	bne.n	800670c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <HAL_SPI_TransmitReceive+0x46>
 8006706:	7ffb      	ldrb	r3, [r7, #31]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d001      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800670c:	2302      	movs	r3, #2
 800670e:	e17f      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x5c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x5c>
 800671c:	887b      	ldrh	r3, [r7, #2]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e174      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x6e>
 8006730:	2302      	movs	r3, #2
 8006732:	e16d      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x34a>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b04      	cmp	r3, #4
 8006746:	d003      	beq.n	8006750 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2205      	movs	r2, #5
 800674c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	887a      	ldrh	r2, [r7, #2]
 8006766:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	887a      	ldrh	r2, [r7, #2]
 8006772:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	887a      	ldrh	r2, [r7, #2]
 8006778:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	d007      	beq.n	80067a4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ac:	d17e      	bne.n	80068ac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_SPI_TransmitReceive+0xf6>
 80067b6:	8afb      	ldrh	r3, [r7, #22]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d16c      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	881a      	ldrh	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e0:	e059      	b.n	8006896 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d11b      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x162>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d016      	beq.n	8006828 <HAL_SPI_TransmitReceive+0x162>
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d113      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	1c9a      	adds	r2, r3, #2
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681a:	b29b      	uxth	r3, r3
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b01      	cmp	r3, #1
 8006834:	d119      	bne.n	800686a <HAL_SPI_TransmitReceive+0x1a4>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d014      	beq.n	800686a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	b292      	uxth	r2, r2
 800684c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	1c9a      	adds	r2, r3, #2
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006866:	2301      	movs	r3, #1
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800686a:	f7fe fcb3 	bl	80051d4 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	429a      	cmp	r2, r3
 8006878:	d80d      	bhi.n	8006896 <HAL_SPI_TransmitReceive+0x1d0>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d009      	beq.n	8006896 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e0bc      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1a0      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x11c>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d19b      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x11c>
 80068aa:	e082      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_SPI_TransmitReceive+0x1f4>
 80068b4:	8afb      	ldrh	r3, [r7, #22]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d171      	bne.n	800699e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068e0:	e05d      	b.n	800699e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d11c      	bne.n	800692a <HAL_SPI_TransmitReceive+0x264>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d017      	beq.n	800692a <HAL_SPI_TransmitReceive+0x264>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d114      	bne.n	800692a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d119      	bne.n	800696c <HAL_SPI_TransmitReceive+0x2a6>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d014      	beq.n	800696c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006968:	2301      	movs	r3, #1
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800696c:	f7fe fc32 	bl	80051d4 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006978:	429a      	cmp	r2, r3
 800697a:	d803      	bhi.n	8006984 <HAL_SPI_TransmitReceive+0x2be>
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d102      	bne.n	800698a <HAL_SPI_TransmitReceive+0x2c4>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d109      	bne.n	800699e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e038      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d19c      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x21c>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d197      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f908 	bl	8006bcc <SPI_EndRxTxTransaction>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d008      	beq.n	80069d4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e01d      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
  }
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3728      	adds	r7, #40	; 0x28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a28:	f7fe fbd4 	bl	80051d4 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a38:	f7fe fbcc 	bl	80051d4 <HAL_GetTick>
 8006a3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a3e:	4b39      	ldr	r3, [pc, #228]	; (8006b24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	015b      	lsls	r3, r3, #5
 8006a44:	0d1b      	lsrs	r3, r3, #20
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
 8006a4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a4e:	e054      	b.n	8006afa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a56:	d050      	beq.n	8006afa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a58:	f7fe fbbc 	bl	80051d4 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d902      	bls.n	8006a6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d13d      	bne.n	8006aea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a86:	d111      	bne.n	8006aac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a90:	d004      	beq.n	8006a9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9a:	d107      	bne.n	8006aac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab4:	d10f      	bne.n	8006ad6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ad4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e017      	b.n	8006b1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	bf0c      	ite	eq
 8006b0a:	2301      	moveq	r3, #1
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d19b      	bne.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000000 	.word	0x20000000

08006b28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3c:	d111      	bne.n	8006b62 <SPI_EndRxTransaction+0x3a>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b46:	d004      	beq.n	8006b52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d107      	bne.n	8006b62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b60:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b6a:	d117      	bne.n	8006b9c <SPI_EndRxTransaction+0x74>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b74:	d112      	bne.n	8006b9c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2101      	movs	r1, #1
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff ff49 	bl	8006a18 <SPI_WaitFlagStateUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01a      	beq.n	8006bc2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b90:	f043 0220 	orr.w	r2, r3, #32
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e013      	b.n	8006bc4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2180      	movs	r1, #128	; 0x80
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff ff36 	bl	8006a18 <SPI_WaitFlagStateUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb6:	f043 0220 	orr.w	r2, r3, #32
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e000      	b.n	8006bc4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2201      	movs	r2, #1
 8006be0:	2102      	movs	r1, #2
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff ff18 	bl	8006a18 <SPI_WaitFlagStateUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	f043 0220 	orr.w	r2, r3, #32
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e013      	b.n	8006c26 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2200      	movs	r2, #0
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7ff ff05 	bl	8006a18 <SPI_WaitFlagStateUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e000      	b.n	8006c26 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e041      	b.n	8006cc4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fd ffcf 	bl	8004bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f000 fc3d 	bl	80074ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d001      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e03a      	b.n	8006d5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <HAL_TIM_Base_Start_IT+0x98>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00e      	beq.n	8006d24 <HAL_TIM_Base_Start_IT+0x58>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0e:	d009      	beq.n	8006d24 <HAL_TIM_Base_Start_IT+0x58>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <HAL_TIM_Base_Start_IT+0x58>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d111      	bne.n	8006d48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b06      	cmp	r3, #6
 8006d34:	d010      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d46:	e007      	b.n	8006d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800

08006d70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0201 	bic.w	r2, r2, #1
 8006d86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10f      	bne.n	8006db8 <HAL_TIM_Base_Stop_IT+0x48>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	f240 4344 	movw	r3, #1092	; 0x444
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d107      	bne.n	8006db8 <HAL_TIM_Base_Stop_IT+0x48>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0201 	bic.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e041      	b.n	8006e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fd ff26 	bl	8004c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3304      	adds	r3, #4
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	f000 fb6e 	bl	80074ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d109      	bne.n	8006e90 <HAL_TIM_PWM_Start+0x24>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	e022      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x6a>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d109      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x3e>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	bf14      	ite	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	2300      	moveq	r3, #0
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	e015      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x6a>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d109      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x58>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e008      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x6a>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	bf14      	ite	ne
 8006ed0:	2301      	movne	r3, #1
 8006ed2:	2300      	moveq	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e05e      	b.n	8006f9c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_PWM_Start+0x82>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eec:	e013      	b.n	8006f16 <HAL_TIM_PWM_Start+0xaa>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_PWM_Start+0x92>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006efc:	e00b      	b.n	8006f16 <HAL_TIM_PWM_Start+0xaa>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_PWM_Start+0xa2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f0c:	e003      	b.n	8006f16 <HAL_TIM_PWM_Start+0xaa>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fd70 	bl	8007a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <HAL_TIM_PWM_Start+0x138>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d107      	bne.n	8006f3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <HAL_TIM_PWM_Start+0x138>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00e      	beq.n	8006f66 <HAL_TIM_PWM_Start+0xfa>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f50:	d009      	beq.n	8006f66 <HAL_TIM_PWM_Start+0xfa>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a14      	ldr	r2, [pc, #80]	; (8006fa8 <HAL_TIM_PWM_Start+0x13c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_TIM_PWM_Start+0xfa>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a12      	ldr	r2, [pc, #72]	; (8006fac <HAL_TIM_PWM_Start+0x140>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d111      	bne.n	8006f8a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b06      	cmp	r3, #6
 8006f76:	d010      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f88:	e007      	b.n	8006f9a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40012c00 	.word	0x40012c00
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800

08006fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d020      	beq.n	8007014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01b      	beq.n	8007014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0202 	mvn.w	r2, #2
 8006fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa5a 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa4d 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fa5c 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d020      	beq.n	8007060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01b      	beq.n	8007060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0204 	mvn.w	r2, #4
 8007030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa34 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 800704c:	e005      	b.n	800705a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa27 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa36 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d020      	beq.n	80070ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01b      	beq.n	80070ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0208 	mvn.w	r2, #8
 800707c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2204      	movs	r2, #4
 8007082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa0e 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa01 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa10 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d020      	beq.n	80070f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01b      	beq.n	80070f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0210 	mvn.w	r2, #16
 80070c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2208      	movs	r2, #8
 80070ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9e8 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 80070e4:	e005      	b.n	80070f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9db 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f9ea 	bl	80074c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00c      	beq.n	800711c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0201 	mvn.w	r2, #1
 8007114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fd f8ea 	bl	80042f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fced 	bl	8007b1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00c      	beq.n	8007164 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800715c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f9ba 	bl	80074d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d007      	beq.n	8007188 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0220 	mvn.w	r2, #32
 8007180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fcc0 	bl	8007b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e0ae      	b.n	800730c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b0c      	cmp	r3, #12
 80071ba:	f200 809f 	bhi.w	80072fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071f9 	.word	0x080071f9
 80071c8:	080072fd 	.word	0x080072fd
 80071cc:	080072fd 	.word	0x080072fd
 80071d0:	080072fd 	.word	0x080072fd
 80071d4:	08007239 	.word	0x08007239
 80071d8:	080072fd 	.word	0x080072fd
 80071dc:	080072fd 	.word	0x080072fd
 80071e0:	080072fd 	.word	0x080072fd
 80071e4:	0800727b 	.word	0x0800727b
 80071e8:	080072fd 	.word	0x080072fd
 80071ec:	080072fd 	.word	0x080072fd
 80071f0:	080072fd 	.word	0x080072fd
 80071f4:	080072bb 	.word	0x080072bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f9e2 	bl	80075c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0204 	bic.w	r2, r2, #4
 8007222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6999      	ldr	r1, [r3, #24]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
      break;
 8007236:	e064      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fa28 	bl	8007694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6999      	ldr	r1, [r3, #24]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	021a      	lsls	r2, r3, #8
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	619a      	str	r2, [r3, #24]
      break;
 8007278:	e043      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fa71 	bl	8007768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0208 	orr.w	r2, r2, #8
 8007294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0204 	bic.w	r2, r2, #4
 80072a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69d9      	ldr	r1, [r3, #28]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	61da      	str	r2, [r3, #28]
      break;
 80072b8:	e023      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fabb 	bl	800783c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69d9      	ldr	r1, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	021a      	lsls	r2, r3, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	61da      	str	r2, [r3, #28]
      break;
 80072fa:	e002      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_TIM_ConfigClockSource+0x1c>
 800732c:	2302      	movs	r3, #2
 800732e:	e0b4      	b.n	800749a <HAL_TIM_ConfigClockSource+0x186>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800734e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007368:	d03e      	beq.n	80073e8 <HAL_TIM_ConfigClockSource+0xd4>
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	f200 8087 	bhi.w	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007376:	f000 8086 	beq.w	8007486 <HAL_TIM_ConfigClockSource+0x172>
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737e:	d87f      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007380:	2b70      	cmp	r3, #112	; 0x70
 8007382:	d01a      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0xa6>
 8007384:	2b70      	cmp	r3, #112	; 0x70
 8007386:	d87b      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007388:	2b60      	cmp	r3, #96	; 0x60
 800738a:	d050      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x11a>
 800738c:	2b60      	cmp	r3, #96	; 0x60
 800738e:	d877      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007390:	2b50      	cmp	r3, #80	; 0x50
 8007392:	d03c      	beq.n	800740e <HAL_TIM_ConfigClockSource+0xfa>
 8007394:	2b50      	cmp	r3, #80	; 0x50
 8007396:	d873      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d058      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x13a>
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d86f      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b30      	cmp	r3, #48	; 0x30
 80073a2:	d064      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073a4:	2b30      	cmp	r3, #48	; 0x30
 80073a6:	d86b      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d060      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d867      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05c      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d05a      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073b8:	e062      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6899      	ldr	r1, [r3, #8]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f000 fafc 	bl	80079c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	609a      	str	r2, [r3, #8]
      break;
 80073e6:	e04f      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	6899      	ldr	r1, [r3, #8]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f000 fae5 	bl	80079c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800740a:	609a      	str	r2, [r3, #8]
      break;
 800740c:	e03c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6859      	ldr	r1, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	461a      	mov	r2, r3
 800741c:	f000 fa5c 	bl	80078d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2150      	movs	r1, #80	; 0x50
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fab3 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800742c:	e02c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	461a      	mov	r2, r3
 800743c:	f000 fa7a 	bl	8007934 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2160      	movs	r1, #96	; 0x60
 8007446:	4618      	mov	r0, r3
 8007448:	f000 faa3 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800744c:	e01c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fa3c 	bl	80078d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2140      	movs	r1, #64	; 0x40
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fa93 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800746c:	e00c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f000 fa8a 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800747e:	e003      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	73fb      	strb	r3, [r7, #15]
      break;
 8007484:	e000      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bc80      	pop	{r7}
 80074c4:	4770      	bx	lr

080074c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr
	...

080074ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a2f      	ldr	r2, [pc, #188]	; (80075bc <TIM_Base_SetConfig+0xd0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00b      	beq.n	800751c <TIM_Base_SetConfig+0x30>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750a:	d007      	beq.n	800751c <TIM_Base_SetConfig+0x30>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a2c      	ldr	r2, [pc, #176]	; (80075c0 <TIM_Base_SetConfig+0xd4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_Base_SetConfig+0x30>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a2b      	ldr	r2, [pc, #172]	; (80075c4 <TIM_Base_SetConfig+0xd8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d108      	bne.n	800752e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a22      	ldr	r2, [pc, #136]	; (80075bc <TIM_Base_SetConfig+0xd0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00b      	beq.n	800754e <TIM_Base_SetConfig+0x62>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753c:	d007      	beq.n	800754e <TIM_Base_SetConfig+0x62>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a1f      	ldr	r2, [pc, #124]	; (80075c0 <TIM_Base_SetConfig+0xd4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d003      	beq.n	800754e <TIM_Base_SetConfig+0x62>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <TIM_Base_SetConfig+0xd8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d108      	bne.n	8007560 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a0d      	ldr	r2, [pc, #52]	; (80075bc <TIM_Base_SetConfig+0xd0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d103      	bne.n	8007594 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f023 0201 	bic.w	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	611a      	str	r2, [r3, #16]
  }
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800

080075c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	f023 0201 	bic.w	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 0302 	bic.w	r3, r3, #2
 8007610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <TIM_OC1_SetConfig+0xc8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d10c      	bne.n	800763e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f023 0308 	bic.w	r3, r3, #8
 800762a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f023 0304 	bic.w	r3, r3, #4
 800763c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a13      	ldr	r2, [pc, #76]	; (8007690 <TIM_OC1_SetConfig+0xc8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d111      	bne.n	800766a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800764c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	621a      	str	r2, [r3, #32]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40012c00 	.word	0x40012c00

08007694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f023 0210 	bic.w	r2, r3, #16
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f023 0320 	bic.w	r3, r3, #32
 80076de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <TIM_OC2_SetConfig+0xd0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d10d      	bne.n	8007710 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a14      	ldr	r2, [pc, #80]	; (8007764 <TIM_OC2_SetConfig+0xd0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d113      	bne.n	8007740 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800771e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4313      	orrs	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr
 8007764:	40012c00 	.word	0x40012c00

08007768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <TIM_OC3_SetConfig+0xd0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d10d      	bne.n	80077e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a14      	ldr	r2, [pc, #80]	; (8007838 <TIM_OC3_SetConfig+0xd0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d113      	bne.n	8007812 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4313      	orrs	r3, r2
 8007804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	621a      	str	r2, [r3, #32]
}
 800782c:	bf00      	nop
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	40012c00 	.word	0x40012c00

0800783c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	031b      	lsls	r3, r3, #12
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a0f      	ldr	r2, [pc, #60]	; (80078d4 <TIM_OC4_SetConfig+0x98>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d109      	bne.n	80078b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	019b      	lsls	r3, r3, #6
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr
 80078d4:	40012c00 	.word	0x40012c00

080078d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f023 0201 	bic.w	r2, r3, #1
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f023 030a 	bic.w	r3, r3, #10
 8007914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f023 0210 	bic.w	r2, r3, #16
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800795e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	031b      	lsls	r3, r3, #12
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4313      	orrs	r3, r2
 8007968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007970:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	621a      	str	r2, [r3, #32]
}
 8007988:	bf00      	nop
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr

08007992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f043 0307 	orr.w	r3, r3, #7
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	609a      	str	r2, [r3, #8]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr

080079c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b087      	sub	sp, #28
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	021a      	lsls	r2, r3, #8
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	431a      	orrs	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	609a      	str	r2, [r3, #8]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bc80      	pop	{r7}
 8007a02:	4770      	bx	lr

08007a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f003 031f 	and.w	r3, r3, #31
 8007a16:	2201      	movs	r2, #1
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1a      	ldr	r2, [r3, #32]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	43db      	mvns	r3, r3
 8007a26:	401a      	ands	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a1a      	ldr	r2, [r3, #32]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	621a      	str	r2, [r3, #32]
}
 8007a42:	bf00      	nop
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e046      	b.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a16      	ldr	r2, [pc, #88]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab0:	d009      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a12      	ldr	r2, [pc, #72]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a10      	ldr	r2, [pc, #64]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d10c      	bne.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800

08007b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e042      	b.n	8007bc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fd f910 	bl	8004d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2224      	movs	r2, #36	; 0x24
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fdf9 	bl	8008768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695a      	ldr	r2, [r3, #20]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d175      	bne.n	8007cd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <HAL_UART_Transmit+0x2c>
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e06e      	b.n	8007cda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2221      	movs	r2, #33	; 0x21
 8007c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c0a:	f7fd fae3 	bl	80051d4 <HAL_GetTick>
 8007c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	88fa      	ldrh	r2, [r7, #6]
 8007c14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	88fa      	ldrh	r2, [r7, #6]
 8007c1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c24:	d108      	bne.n	8007c38 <HAL_UART_Transmit+0x6c>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	e003      	b.n	8007c40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c40:	e02e      	b.n	8007ca0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fb97 	bl	8008380 <UART_WaitOnFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e03a      	b.n	8007cda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	e007      	b.n	8007c92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1cb      	bne.n	8007c42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2140      	movs	r1, #64	; 0x40
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 fb63 	bl	8008380 <UART_WaitOnFlagUntilTimeout>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e006      	b.n	8007cda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e000      	b.n	8007cda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007cd8:	2302      	movs	r3, #2
  }
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3720      	adds	r7, #32
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b08a      	sub	sp, #40	; 0x28
 8007ce6:	af02      	add	r7, sp, #8
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	f040 8081 	bne.w	8007e06 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <HAL_UART_Receive+0x2e>
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e079      	b.n	8007e08 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2222      	movs	r2, #34	; 0x22
 8007d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d28:	f7fd fa54 	bl	80051d4 <HAL_GetTick>
 8007d2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d42:	d108      	bne.n	8007d56 <HAL_UART_Receive+0x74>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d104      	bne.n	8007d56 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	61bb      	str	r3, [r7, #24]
 8007d54:	e003      	b.n	8007d5e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007d5e:	e047      	b.n	8007df0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2200      	movs	r2, #0
 8007d68:	2120      	movs	r1, #32
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fb08 	bl	8008380 <UART_WaitOnFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e042      	b.n	8007e08 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10c      	bne.n	8007da2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	e01f      	b.n	8007de2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	d007      	beq.n	8007dbc <HAL_UART_Receive+0xda>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <HAL_UART_Receive+0xe8>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	e008      	b.n	8007ddc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	3301      	adds	r3, #1
 8007de0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1b2      	bne.n	8007d60 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	e000      	b.n	8007e08 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007e06:	2302      	movs	r3, #2
  }
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b0ba      	sub	sp, #232	; 0xe8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10f      	bne.n	8007e76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <HAL_UART_IRQHandler+0x66>
 8007e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fbbc 	bl	80085ec <UART_Receive_IT>
      return;
 8007e74:	e25b      	b.n	800832e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 80de 	beq.w	800803c <HAL_UART_IRQHandler+0x22c>
 8007e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80d1 	beq.w	800803c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <HAL_UART_IRQHandler+0xae>
 8007ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb6:	f043 0201 	orr.w	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <HAL_UART_IRQHandler+0xd2>
 8007eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	f043 0202 	orr.w	r2, r3, #2
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_UART_IRQHandler+0xf6>
 8007eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efe:	f043 0204 	orr.w	r2, r3, #4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d011      	beq.n	8007f36 <HAL_UART_IRQHandler+0x126>
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d105      	bne.n	8007f2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2e:	f043 0208 	orr.w	r2, r3, #8
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 81f2 	beq.w	8008324 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <HAL_UART_IRQHandler+0x14e>
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fb47 	bl	80085ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bf14      	ite	ne
 8007f6c:	2301      	movne	r3, #1
 8007f6e:	2300      	moveq	r3, #0
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <HAL_UART_IRQHandler+0x17a>
 8007f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d04f      	beq.n	800802a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa51 	bl	8008432 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d041      	beq.n	8008022 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3314      	adds	r3, #20
 8007fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1d9      	bne.n	8007f9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d013      	beq.n	800801a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	4a7e      	ldr	r2, [pc, #504]	; (80081f0 <HAL_UART_IRQHandler+0x3e0>)
 8007ff8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd fa5e 	bl	80054c0 <HAL_DMA_Abort_IT>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d016      	beq.n	8008038 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	e00e      	b.n	8008038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f99c 	bl	8008358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008020:	e00a      	b.n	8008038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f998 	bl	8008358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	e006      	b.n	8008038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f994 	bl	8008358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008036:	e175      	b.n	8008324 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008038:	bf00      	nop
    return;
 800803a:	e173      	b.n	8008324 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	2b01      	cmp	r3, #1
 8008042:	f040 814f 	bne.w	80082e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	f003 0310 	and.w	r3, r3, #16
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 8148 	beq.w	80082e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8141 	beq.w	80082e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008062:	2300      	movs	r3, #0
 8008064:	60bb      	str	r3, [r7, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60bb      	str	r3, [r7, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80b6 	beq.w	80081f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8145 	beq.w	8008328 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080a6:	429a      	cmp	r2, r3
 80080a8:	f080 813e 	bcs.w	8008328 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	f000 8088 	beq.w	80081d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	330c      	adds	r3, #12
 80080c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	330c      	adds	r3, #12
 80080e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1d9      	bne.n	80080c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3314      	adds	r3, #20
 8008112:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800811c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800811e:	f023 0301 	bic.w	r3, r3, #1
 8008122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008130:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008134:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008138:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e1      	bne.n	800810c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3314      	adds	r3, #20
 800814e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800815a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3314      	adds	r3, #20
 8008168:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800816c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800816e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800817a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e3      	bne.n	8008148 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2220      	movs	r2, #32
 8008184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	330c      	adds	r3, #12
 8008194:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800819e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a0:	f023 0310 	bic.w	r3, r3, #16
 80081a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	330c      	adds	r3, #12
 80081ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80081b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e3      	bne.n	800818e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fd f93d 	bl	800544a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081de:	b29b      	uxth	r3, r3
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8bf 	bl	800836a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081ec:	e09c      	b.n	8008328 <HAL_UART_IRQHandler+0x518>
 80081ee:	bf00      	nop
 80081f0:	080084f7 	.word	0x080084f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 808e 	beq.w	800832c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8089 	beq.w	800832c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800822a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800823e:	647a      	str	r2, [r7, #68]	; 0x44
 8008240:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800824c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e3      	bne.n	800821a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3314      	adds	r3, #20
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	623b      	str	r3, [r7, #32]
   return(result);
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3314      	adds	r3, #20
 8008272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008276:	633a      	str	r2, [r7, #48]	; 0x30
 8008278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800827c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e3      	bne.n	8008252 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	330c      	adds	r3, #12
 800829e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0310 	bic.w	r3, r3, #16
 80082ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	330c      	adds	r3, #12
 80082b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082bc:	61fa      	str	r2, [r7, #28]
 80082be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	69b9      	ldr	r1, [r7, #24]
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	617b      	str	r3, [r7, #20]
   return(result);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e3      	bne.n	8008298 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f844 	bl	800836a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082e2:	e023      	b.n	800832c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d009      	beq.n	8008304 <HAL_UART_IRQHandler+0x4f4>
 80082f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f90e 	bl	800851e <UART_Transmit_IT>
    return;
 8008302:	e014      	b.n	800832e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00e      	beq.n	800832e <HAL_UART_IRQHandler+0x51e>
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	d008      	beq.n	800832e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f94d 	bl	80085bc <UART_EndTransmit_IT>
    return;
 8008322:	e004      	b.n	800832e <HAL_UART_IRQHandler+0x51e>
    return;
 8008324:	bf00      	nop
 8008326:	e002      	b.n	800832e <HAL_UART_IRQHandler+0x51e>
      return;
 8008328:	bf00      	nop
 800832a:	e000      	b.n	800832e <HAL_UART_IRQHandler+0x51e>
      return;
 800832c:	bf00      	nop
  }
}
 800832e:	37e8      	adds	r7, #232	; 0xe8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	bc80      	pop	{r7}
 8008356:	4770      	bx	lr

08008358 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr

0800836a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	603b      	str	r3, [r7, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008390:	e03b      	b.n	800840a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d037      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800839a:	f7fc ff1b 	bl	80051d4 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	6a3a      	ldr	r2, [r7, #32]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d302      	bcc.n	80083b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e03a      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d023      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x8a>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b80      	cmp	r3, #128	; 0x80
 80083c6:	d020      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x8a>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d01d      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d116      	bne.n	800840a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f81d 	bl	8008432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2208      	movs	r2, #8
 80083fc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e00f      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4013      	ands	r3, r2
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d0b4      	beq.n	8008392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008432:	b480      	push	{r7}
 8008434:	b095      	sub	sp, #84	; 0x54
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	330c      	adds	r3, #12
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800845a:	643a      	str	r2, [r7, #64]	; 0x40
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e5      	bne.n	800843a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3314      	adds	r3, #20
 8008474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	61fb      	str	r3, [r7, #28]
   return(result);
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	64bb      	str	r3, [r7, #72]	; 0x48
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3314      	adds	r3, #20
 800848c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e5      	bne.n	800846e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d119      	bne.n	80084de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f023 0310 	bic.w	r3, r3, #16
 80084c0:	647b      	str	r3, [r7, #68]	; 0x44
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	330c      	adds	r3, #12
 80084c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084ca:	61ba      	str	r2, [r7, #24]
 80084cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	6979      	ldr	r1, [r7, #20]
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	613b      	str	r3, [r7, #16]
   return(result);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e5      	bne.n	80084aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084ec:	bf00      	nop
 80084ee:	3754      	adds	r7, #84	; 0x54
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr

080084f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7ff ff21 	bl	8008358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008516:	bf00      	nop
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b21      	cmp	r3, #33	; 0x21
 8008530:	d13e      	bne.n	80085b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853a:	d114      	bne.n	8008566 <UART_Transmit_IT+0x48>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d110      	bne.n	8008566 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008558:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	1c9a      	adds	r2, r3, #2
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	621a      	str	r2, [r3, #32]
 8008564:	e008      	b.n	8008578 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	1c59      	adds	r1, r3, #1
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	6211      	str	r1, [r2, #32]
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29b      	uxth	r3, r3
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4619      	mov	r1, r3
 8008586:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10f      	bne.n	80085ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800859a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e000      	b.n	80085b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085b0:	2302      	movs	r3, #2
  }
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fea9 	bl	8008334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08c      	sub	sp, #48	; 0x30
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b22      	cmp	r3, #34	; 0x22
 80085fe:	f040 80ae 	bne.w	800875e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860a:	d117      	bne.n	800863c <UART_Receive_IT+0x50>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d113      	bne.n	800863c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008614:	2300      	movs	r3, #0
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862a:	b29a      	uxth	r2, r3
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	1c9a      	adds	r2, r3, #2
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	629a      	str	r2, [r3, #40]	; 0x28
 800863a:	e026      	b.n	800868a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800864e:	d007      	beq.n	8008660 <UART_Receive_IT+0x74>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <UART_Receive_IT+0x82>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d106      	bne.n	800866e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	e008      	b.n	8008680 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867a:	b2da      	uxtb	r2, r3
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b01      	subs	r3, #1
 8008692:	b29b      	uxth	r3, r3
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4619      	mov	r1, r3
 8008698:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800869a:	2b00      	cmp	r3, #0
 800869c:	d15d      	bne.n	800875a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0220 	bic.w	r2, r2, #32
 80086ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	695a      	ldr	r2, [r3, #20]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0201 	bic.w	r2, r2, #1
 80086cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d135      	bne.n	8008750 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	613b      	str	r3, [r7, #16]
   return(result);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f023 0310 	bic.w	r3, r3, #16
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	623a      	str	r2, [r7, #32]
 800870c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	69f9      	ldr	r1, [r7, #28]
 8008710:	6a3a      	ldr	r2, [r7, #32]
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	61bb      	str	r3, [r7, #24]
   return(result);
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e5      	bne.n	80086ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b10      	cmp	r3, #16
 800872a:	d10a      	bne.n	8008742 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fe0e 	bl	800836a <HAL_UARTEx_RxEventCallback>
 800874e:	e002      	b.n	8008756 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff fdf8 	bl	8008346 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	e002      	b.n	8008760 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	e000      	b.n	8008760 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800875e:	2302      	movs	r3, #2
  }
}
 8008760:	4618      	mov	r0, r3
 8008762:	3730      	adds	r7, #48	; 0x30
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	431a      	orrs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80087a2:	f023 030c 	bic.w	r3, r3, #12
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	430b      	orrs	r3, r1
 80087ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <UART_SetConfig+0x114>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d103      	bne.n	80087d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80087d0:	f7fd fc66 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	e002      	b.n	80087de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80087d8:	f7fd fc4e 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 80087dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009a      	lsls	r2, r3, #2
 80087e8:	441a      	add	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	4a22      	ldr	r2, [pc, #136]	; (8008880 <UART_SetConfig+0x118>)
 80087f6:	fba2 2303 	umull	r2, r3, r2, r3
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	0119      	lsls	r1, r3, #4
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009a      	lsls	r2, r3, #2
 8008808:	441a      	add	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	fbb2 f2f3 	udiv	r2, r2, r3
 8008814:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <UART_SetConfig+0x118>)
 8008816:	fba3 0302 	umull	r0, r3, r3, r2
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	2064      	movs	r0, #100	; 0x64
 800881e:	fb00 f303 	mul.w	r3, r0, r3
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	3332      	adds	r3, #50	; 0x32
 8008828:	4a15      	ldr	r2, [pc, #84]	; (8008880 <UART_SetConfig+0x118>)
 800882a:	fba2 2303 	umull	r2, r3, r2, r3
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008834:	4419      	add	r1, r3
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009a      	lsls	r2, r3, #2
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	fbb2 f2f3 	udiv	r2, r2, r3
 800884c:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <UART_SetConfig+0x118>)
 800884e:	fba3 0302 	umull	r0, r3, r3, r2
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	2064      	movs	r0, #100	; 0x64
 8008856:	fb00 f303 	mul.w	r3, r0, r3
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	3332      	adds	r3, #50	; 0x32
 8008860:	4a07      	ldr	r2, [pc, #28]	; (8008880 <UART_SetConfig+0x118>)
 8008862:	fba2 2303 	umull	r2, r3, r2, r3
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	440a      	add	r2, r1
 8008872:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40013800 	.word	0x40013800
 8008880:	51eb851f 	.word	0x51eb851f

08008884 <__assert_func>:
 8008884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008886:	4614      	mov	r4, r2
 8008888:	461a      	mov	r2, r3
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <__assert_func+0x2c>)
 800888c:	4605      	mov	r5, r0
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68d8      	ldr	r0, [r3, #12]
 8008892:	b14c      	cbz	r4, 80088a8 <__assert_func+0x24>
 8008894:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <__assert_func+0x30>)
 8008896:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800889a:	9100      	str	r1, [sp, #0]
 800889c:	462b      	mov	r3, r5
 800889e:	4906      	ldr	r1, [pc, #24]	; (80088b8 <__assert_func+0x34>)
 80088a0:	f000 f814 	bl	80088cc <fiprintf>
 80088a4:	f002 f8a8 	bl	800a9f8 <abort>
 80088a8:	4b04      	ldr	r3, [pc, #16]	; (80088bc <__assert_func+0x38>)
 80088aa:	461c      	mov	r4, r3
 80088ac:	e7f3      	b.n	8008896 <__assert_func+0x12>
 80088ae:	bf00      	nop
 80088b0:	2000000c 	.word	0x2000000c
 80088b4:	080103a2 	.word	0x080103a2
 80088b8:	080103af 	.word	0x080103af
 80088bc:	080103dd 	.word	0x080103dd

080088c0 <__errno>:
 80088c0:	4b01      	ldr	r3, [pc, #4]	; (80088c8 <__errno+0x8>)
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	2000000c 	.word	0x2000000c

080088cc <fiprintf>:
 80088cc:	b40e      	push	{r1, r2, r3}
 80088ce:	b503      	push	{r0, r1, lr}
 80088d0:	4601      	mov	r1, r0
 80088d2:	ab03      	add	r3, sp, #12
 80088d4:	4805      	ldr	r0, [pc, #20]	; (80088ec <fiprintf+0x20>)
 80088d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088da:	6800      	ldr	r0, [r0, #0]
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	f000 f917 	bl	8008b10 <_vfiprintf_r>
 80088e2:	b002      	add	sp, #8
 80088e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e8:	b003      	add	sp, #12
 80088ea:	4770      	bx	lr
 80088ec:	2000000c 	.word	0x2000000c

080088f0 <__libc_init_array>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	2600      	movs	r6, #0
 80088f4:	4d0c      	ldr	r5, [pc, #48]	; (8008928 <__libc_init_array+0x38>)
 80088f6:	4c0d      	ldr	r4, [pc, #52]	; (800892c <__libc_init_array+0x3c>)
 80088f8:	1b64      	subs	r4, r4, r5
 80088fa:	10a4      	asrs	r4, r4, #2
 80088fc:	42a6      	cmp	r6, r4
 80088fe:	d109      	bne.n	8008914 <__libc_init_array+0x24>
 8008900:	f007 f9ea 	bl	800fcd8 <_init>
 8008904:	2600      	movs	r6, #0
 8008906:	4d0a      	ldr	r5, [pc, #40]	; (8008930 <__libc_init_array+0x40>)
 8008908:	4c0a      	ldr	r4, [pc, #40]	; (8008934 <__libc_init_array+0x44>)
 800890a:	1b64      	subs	r4, r4, r5
 800890c:	10a4      	asrs	r4, r4, #2
 800890e:	42a6      	cmp	r6, r4
 8008910:	d105      	bne.n	800891e <__libc_init_array+0x2e>
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	f855 3b04 	ldr.w	r3, [r5], #4
 8008918:	4798      	blx	r3
 800891a:	3601      	adds	r6, #1
 800891c:	e7ee      	b.n	80088fc <__libc_init_array+0xc>
 800891e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008922:	4798      	blx	r3
 8008924:	3601      	adds	r6, #1
 8008926:	e7f2      	b.n	800890e <__libc_init_array+0x1e>
 8008928:	08010e90 	.word	0x08010e90
 800892c:	08010e90 	.word	0x08010e90
 8008930:	08010e90 	.word	0x08010e90
 8008934:	08010e94 	.word	0x08010e94

08008938 <malloc>:
 8008938:	4b02      	ldr	r3, [pc, #8]	; (8008944 <malloc+0xc>)
 800893a:	4601      	mov	r1, r0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f000 b865 	b.w	8008a0c <_malloc_r>
 8008942:	bf00      	nop
 8008944:	2000000c 	.word	0x2000000c

08008948 <memcpy>:
 8008948:	440a      	add	r2, r1
 800894a:	4291      	cmp	r1, r2
 800894c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008950:	d100      	bne.n	8008954 <memcpy+0xc>
 8008952:	4770      	bx	lr
 8008954:	b510      	push	{r4, lr}
 8008956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800895a:	4291      	cmp	r1, r2
 800895c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008960:	d1f9      	bne.n	8008956 <memcpy+0xe>
 8008962:	bd10      	pop	{r4, pc}

08008964 <memset>:
 8008964:	4603      	mov	r3, r0
 8008966:	4402      	add	r2, r0
 8008968:	4293      	cmp	r3, r2
 800896a:	d100      	bne.n	800896e <memset+0xa>
 800896c:	4770      	bx	lr
 800896e:	f803 1b01 	strb.w	r1, [r3], #1
 8008972:	e7f9      	b.n	8008968 <memset+0x4>

08008974 <_free_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4605      	mov	r5, r0
 8008978:	2900      	cmp	r1, #0
 800897a:	d043      	beq.n	8008a04 <_free_r+0x90>
 800897c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008980:	1f0c      	subs	r4, r1, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	bfb8      	it	lt
 8008986:	18e4      	addlt	r4, r4, r3
 8008988:	f003 fc7c 	bl	800c284 <__malloc_lock>
 800898c:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <_free_r+0x94>)
 800898e:	6813      	ldr	r3, [r2, #0]
 8008990:	4610      	mov	r0, r2
 8008992:	b933      	cbnz	r3, 80089a2 <_free_r+0x2e>
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	6014      	str	r4, [r2, #0]
 8008998:	4628      	mov	r0, r5
 800899a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800899e:	f003 bc77 	b.w	800c290 <__malloc_unlock>
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	d90a      	bls.n	80089bc <_free_r+0x48>
 80089a6:	6821      	ldr	r1, [r4, #0]
 80089a8:	1862      	adds	r2, r4, r1
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bf01      	itttt	eq
 80089ae:	681a      	ldreq	r2, [r3, #0]
 80089b0:	685b      	ldreq	r3, [r3, #4]
 80089b2:	1852      	addeq	r2, r2, r1
 80089b4:	6022      	streq	r2, [r4, #0]
 80089b6:	6063      	str	r3, [r4, #4]
 80089b8:	6004      	str	r4, [r0, #0]
 80089ba:	e7ed      	b.n	8008998 <_free_r+0x24>
 80089bc:	461a      	mov	r2, r3
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	b10b      	cbz	r3, 80089c6 <_free_r+0x52>
 80089c2:	42a3      	cmp	r3, r4
 80089c4:	d9fa      	bls.n	80089bc <_free_r+0x48>
 80089c6:	6811      	ldr	r1, [r2, #0]
 80089c8:	1850      	adds	r0, r2, r1
 80089ca:	42a0      	cmp	r0, r4
 80089cc:	d10b      	bne.n	80089e6 <_free_r+0x72>
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	4401      	add	r1, r0
 80089d2:	1850      	adds	r0, r2, r1
 80089d4:	4283      	cmp	r3, r0
 80089d6:	6011      	str	r1, [r2, #0]
 80089d8:	d1de      	bne.n	8008998 <_free_r+0x24>
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	4401      	add	r1, r0
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	6053      	str	r3, [r2, #4]
 80089e4:	e7d8      	b.n	8008998 <_free_r+0x24>
 80089e6:	d902      	bls.n	80089ee <_free_r+0x7a>
 80089e8:	230c      	movs	r3, #12
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	e7d4      	b.n	8008998 <_free_r+0x24>
 80089ee:	6820      	ldr	r0, [r4, #0]
 80089f0:	1821      	adds	r1, r4, r0
 80089f2:	428b      	cmp	r3, r1
 80089f4:	bf01      	itttt	eq
 80089f6:	6819      	ldreq	r1, [r3, #0]
 80089f8:	685b      	ldreq	r3, [r3, #4]
 80089fa:	1809      	addeq	r1, r1, r0
 80089fc:	6021      	streq	r1, [r4, #0]
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	6054      	str	r4, [r2, #4]
 8008a02:	e7c9      	b.n	8008998 <_free_r+0x24>
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
 8008a06:	bf00      	nop
 8008a08:	20000278 	.word	0x20000278

08008a0c <_malloc_r>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	1ccd      	adds	r5, r1, #3
 8008a10:	f025 0503 	bic.w	r5, r5, #3
 8008a14:	3508      	adds	r5, #8
 8008a16:	2d0c      	cmp	r5, #12
 8008a18:	bf38      	it	cc
 8008a1a:	250c      	movcc	r5, #12
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	4606      	mov	r6, r0
 8008a20:	db01      	blt.n	8008a26 <_malloc_r+0x1a>
 8008a22:	42a9      	cmp	r1, r5
 8008a24:	d903      	bls.n	8008a2e <_malloc_r+0x22>
 8008a26:	230c      	movs	r3, #12
 8008a28:	6033      	str	r3, [r6, #0]
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a2e:	f003 fc29 	bl	800c284 <__malloc_lock>
 8008a32:	4921      	ldr	r1, [pc, #132]	; (8008ab8 <_malloc_r+0xac>)
 8008a34:	680a      	ldr	r2, [r1, #0]
 8008a36:	4614      	mov	r4, r2
 8008a38:	b99c      	cbnz	r4, 8008a62 <_malloc_r+0x56>
 8008a3a:	4f20      	ldr	r7, [pc, #128]	; (8008abc <_malloc_r+0xb0>)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	b923      	cbnz	r3, 8008a4a <_malloc_r+0x3e>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4630      	mov	r0, r6
 8008a44:	f001 f806 	bl	8009a54 <_sbrk_r>
 8008a48:	6038      	str	r0, [r7, #0]
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f001 f801 	bl	8009a54 <_sbrk_r>
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	d123      	bne.n	8008a9e <_malloc_r+0x92>
 8008a56:	230c      	movs	r3, #12
 8008a58:	4630      	mov	r0, r6
 8008a5a:	6033      	str	r3, [r6, #0]
 8008a5c:	f003 fc18 	bl	800c290 <__malloc_unlock>
 8008a60:	e7e3      	b.n	8008a2a <_malloc_r+0x1e>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	1b5b      	subs	r3, r3, r5
 8008a66:	d417      	bmi.n	8008a98 <_malloc_r+0x8c>
 8008a68:	2b0b      	cmp	r3, #11
 8008a6a:	d903      	bls.n	8008a74 <_malloc_r+0x68>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	441c      	add	r4, r3
 8008a70:	6025      	str	r5, [r4, #0]
 8008a72:	e004      	b.n	8008a7e <_malloc_r+0x72>
 8008a74:	6863      	ldr	r3, [r4, #4]
 8008a76:	42a2      	cmp	r2, r4
 8008a78:	bf0c      	ite	eq
 8008a7a:	600b      	streq	r3, [r1, #0]
 8008a7c:	6053      	strne	r3, [r2, #4]
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f003 fc06 	bl	800c290 <__malloc_unlock>
 8008a84:	f104 000b 	add.w	r0, r4, #11
 8008a88:	1d23      	adds	r3, r4, #4
 8008a8a:	f020 0007 	bic.w	r0, r0, #7
 8008a8e:	1ac2      	subs	r2, r0, r3
 8008a90:	d0cc      	beq.n	8008a2c <_malloc_r+0x20>
 8008a92:	1a1b      	subs	r3, r3, r0
 8008a94:	50a3      	str	r3, [r4, r2]
 8008a96:	e7c9      	b.n	8008a2c <_malloc_r+0x20>
 8008a98:	4622      	mov	r2, r4
 8008a9a:	6864      	ldr	r4, [r4, #4]
 8008a9c:	e7cc      	b.n	8008a38 <_malloc_r+0x2c>
 8008a9e:	1cc4      	adds	r4, r0, #3
 8008aa0:	f024 0403 	bic.w	r4, r4, #3
 8008aa4:	42a0      	cmp	r0, r4
 8008aa6:	d0e3      	beq.n	8008a70 <_malloc_r+0x64>
 8008aa8:	1a21      	subs	r1, r4, r0
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f000 ffd2 	bl	8009a54 <_sbrk_r>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d1dd      	bne.n	8008a70 <_malloc_r+0x64>
 8008ab4:	e7cf      	b.n	8008a56 <_malloc_r+0x4a>
 8008ab6:	bf00      	nop
 8008ab8:	20000278 	.word	0x20000278
 8008abc:	2000027c 	.word	0x2000027c

08008ac0 <__sfputc_r>:
 8008ac0:	6893      	ldr	r3, [r2, #8]
 8008ac2:	b410      	push	{r4}
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	6093      	str	r3, [r2, #8]
 8008aca:	da07      	bge.n	8008adc <__sfputc_r+0x1c>
 8008acc:	6994      	ldr	r4, [r2, #24]
 8008ace:	42a3      	cmp	r3, r4
 8008ad0:	db01      	blt.n	8008ad6 <__sfputc_r+0x16>
 8008ad2:	290a      	cmp	r1, #10
 8008ad4:	d102      	bne.n	8008adc <__sfputc_r+0x1c>
 8008ad6:	bc10      	pop	{r4}
 8008ad8:	f001 bece 	b.w	800a878 <__swbuf_r>
 8008adc:	6813      	ldr	r3, [r2, #0]
 8008ade:	1c58      	adds	r0, r3, #1
 8008ae0:	6010      	str	r0, [r2, #0]
 8008ae2:	7019      	strb	r1, [r3, #0]
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	bc10      	pop	{r4}
 8008ae8:	4770      	bx	lr

08008aea <__sfputs_r>:
 8008aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aec:	4606      	mov	r6, r0
 8008aee:	460f      	mov	r7, r1
 8008af0:	4614      	mov	r4, r2
 8008af2:	18d5      	adds	r5, r2, r3
 8008af4:	42ac      	cmp	r4, r5
 8008af6:	d101      	bne.n	8008afc <__sfputs_r+0x12>
 8008af8:	2000      	movs	r0, #0
 8008afa:	e007      	b.n	8008b0c <__sfputs_r+0x22>
 8008afc:	463a      	mov	r2, r7
 8008afe:	4630      	mov	r0, r6
 8008b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b04:	f7ff ffdc 	bl	8008ac0 <__sfputc_r>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d1f3      	bne.n	8008af4 <__sfputs_r+0xa>
 8008b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b10 <_vfiprintf_r>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	460d      	mov	r5, r1
 8008b16:	4614      	mov	r4, r2
 8008b18:	4698      	mov	r8, r3
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	b09d      	sub	sp, #116	; 0x74
 8008b1e:	b118      	cbz	r0, 8008b28 <_vfiprintf_r+0x18>
 8008b20:	6983      	ldr	r3, [r0, #24]
 8008b22:	b90b      	cbnz	r3, 8008b28 <_vfiprintf_r+0x18>
 8008b24:	f002 ff04 	bl	800b930 <__sinit>
 8008b28:	4b89      	ldr	r3, [pc, #548]	; (8008d50 <_vfiprintf_r+0x240>)
 8008b2a:	429d      	cmp	r5, r3
 8008b2c:	d11b      	bne.n	8008b66 <_vfiprintf_r+0x56>
 8008b2e:	6875      	ldr	r5, [r6, #4]
 8008b30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b32:	07d9      	lsls	r1, r3, #31
 8008b34:	d405      	bmi.n	8008b42 <_vfiprintf_r+0x32>
 8008b36:	89ab      	ldrh	r3, [r5, #12]
 8008b38:	059a      	lsls	r2, r3, #22
 8008b3a:	d402      	bmi.n	8008b42 <_vfiprintf_r+0x32>
 8008b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b3e:	f003 fb00 	bl	800c142 <__retarget_lock_acquire_recursive>
 8008b42:	89ab      	ldrh	r3, [r5, #12]
 8008b44:	071b      	lsls	r3, r3, #28
 8008b46:	d501      	bpl.n	8008b4c <_vfiprintf_r+0x3c>
 8008b48:	692b      	ldr	r3, [r5, #16]
 8008b4a:	b9eb      	cbnz	r3, 8008b88 <_vfiprintf_r+0x78>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f001 fee4 	bl	800a91c <__swsetup_r>
 8008b54:	b1c0      	cbz	r0, 8008b88 <_vfiprintf_r+0x78>
 8008b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b58:	07dc      	lsls	r4, r3, #31
 8008b5a:	d50e      	bpl.n	8008b7a <_vfiprintf_r+0x6a>
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	b01d      	add	sp, #116	; 0x74
 8008b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b66:	4b7b      	ldr	r3, [pc, #492]	; (8008d54 <_vfiprintf_r+0x244>)
 8008b68:	429d      	cmp	r5, r3
 8008b6a:	d101      	bne.n	8008b70 <_vfiprintf_r+0x60>
 8008b6c:	68b5      	ldr	r5, [r6, #8]
 8008b6e:	e7df      	b.n	8008b30 <_vfiprintf_r+0x20>
 8008b70:	4b79      	ldr	r3, [pc, #484]	; (8008d58 <_vfiprintf_r+0x248>)
 8008b72:	429d      	cmp	r5, r3
 8008b74:	bf08      	it	eq
 8008b76:	68f5      	ldreq	r5, [r6, #12]
 8008b78:	e7da      	b.n	8008b30 <_vfiprintf_r+0x20>
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	0598      	lsls	r0, r3, #22
 8008b7e:	d4ed      	bmi.n	8008b5c <_vfiprintf_r+0x4c>
 8008b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b82:	f003 fadf 	bl	800c144 <__retarget_lock_release_recursive>
 8008b86:	e7e9      	b.n	8008b5c <_vfiprintf_r+0x4c>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b92:	2330      	movs	r3, #48	; 0x30
 8008b94:	f04f 0901 	mov.w	r9, #1
 8008b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d5c <_vfiprintf_r+0x24c>
 8008ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ba4:	4623      	mov	r3, r4
 8008ba6:	469a      	mov	sl, r3
 8008ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bac:	b10a      	cbz	r2, 8008bb2 <_vfiprintf_r+0xa2>
 8008bae:	2a25      	cmp	r2, #37	; 0x25
 8008bb0:	d1f9      	bne.n	8008ba6 <_vfiprintf_r+0x96>
 8008bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8008bb6:	d00b      	beq.n	8008bd0 <_vfiprintf_r+0xc0>
 8008bb8:	465b      	mov	r3, fp
 8008bba:	4622      	mov	r2, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f7ff ff93 	bl	8008aea <__sfputs_r>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	f000 80aa 	beq.w	8008d1e <_vfiprintf_r+0x20e>
 8008bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bcc:	445a      	add	r2, fp
 8008bce:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80a2 	beq.w	8008d1e <_vfiprintf_r+0x20e>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008be4:	f10a 0a01 	add.w	sl, sl, #1
 8008be8:	9304      	str	r3, [sp, #16]
 8008bea:	9307      	str	r3, [sp, #28]
 8008bec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bf0:	931a      	str	r3, [sp, #104]	; 0x68
 8008bf2:	4654      	mov	r4, sl
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfa:	4858      	ldr	r0, [pc, #352]	; (8008d5c <_vfiprintf_r+0x24c>)
 8008bfc:	f003 fb1a 	bl	800c234 <memchr>
 8008c00:	9a04      	ldr	r2, [sp, #16]
 8008c02:	b9d8      	cbnz	r0, 8008c3c <_vfiprintf_r+0x12c>
 8008c04:	06d1      	lsls	r1, r2, #27
 8008c06:	bf44      	itt	mi
 8008c08:	2320      	movmi	r3, #32
 8008c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c0e:	0713      	lsls	r3, r2, #28
 8008c10:	bf44      	itt	mi
 8008c12:	232b      	movmi	r3, #43	; 0x2b
 8008c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c18:	f89a 3000 	ldrb.w	r3, [sl]
 8008c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c1e:	d015      	beq.n	8008c4c <_vfiprintf_r+0x13c>
 8008c20:	4654      	mov	r4, sl
 8008c22:	2000      	movs	r0, #0
 8008c24:	f04f 0c0a 	mov.w	ip, #10
 8008c28:	9a07      	ldr	r2, [sp, #28]
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c30:	3b30      	subs	r3, #48	; 0x30
 8008c32:	2b09      	cmp	r3, #9
 8008c34:	d94e      	bls.n	8008cd4 <_vfiprintf_r+0x1c4>
 8008c36:	b1b0      	cbz	r0, 8008c66 <_vfiprintf_r+0x156>
 8008c38:	9207      	str	r2, [sp, #28]
 8008c3a:	e014      	b.n	8008c66 <_vfiprintf_r+0x156>
 8008c3c:	eba0 0308 	sub.w	r3, r0, r8
 8008c40:	fa09 f303 	lsl.w	r3, r9, r3
 8008c44:	4313      	orrs	r3, r2
 8008c46:	46a2      	mov	sl, r4
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	e7d2      	b.n	8008bf2 <_vfiprintf_r+0xe2>
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	1d19      	adds	r1, r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	9103      	str	r1, [sp, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bfbb      	ittet	lt
 8008c58:	425b      	neglt	r3, r3
 8008c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c5e:	9307      	strge	r3, [sp, #28]
 8008c60:	9307      	strlt	r3, [sp, #28]
 8008c62:	bfb8      	it	lt
 8008c64:	9204      	strlt	r2, [sp, #16]
 8008c66:	7823      	ldrb	r3, [r4, #0]
 8008c68:	2b2e      	cmp	r3, #46	; 0x2e
 8008c6a:	d10c      	bne.n	8008c86 <_vfiprintf_r+0x176>
 8008c6c:	7863      	ldrb	r3, [r4, #1]
 8008c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c70:	d135      	bne.n	8008cde <_vfiprintf_r+0x1ce>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	3402      	adds	r4, #2
 8008c76:	1d1a      	adds	r2, r3, #4
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	9203      	str	r2, [sp, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	bfb8      	it	lt
 8008c80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d6c <_vfiprintf_r+0x25c>
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	7821      	ldrb	r1, [r4, #0]
 8008c90:	f003 fad0 	bl	800c234 <memchr>
 8008c94:	b140      	cbz	r0, 8008ca8 <_vfiprintf_r+0x198>
 8008c96:	2340      	movs	r3, #64	; 0x40
 8008c98:	eba0 000a 	sub.w	r0, r0, sl
 8008c9c:	fa03 f000 	lsl.w	r0, r3, r0
 8008ca0:	9b04      	ldr	r3, [sp, #16]
 8008ca2:	3401      	adds	r4, #1
 8008ca4:	4303      	orrs	r3, r0
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cac:	2206      	movs	r2, #6
 8008cae:	482c      	ldr	r0, [pc, #176]	; (8008d60 <_vfiprintf_r+0x250>)
 8008cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cb4:	f003 fabe 	bl	800c234 <memchr>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d03f      	beq.n	8008d3c <_vfiprintf_r+0x22c>
 8008cbc:	4b29      	ldr	r3, [pc, #164]	; (8008d64 <_vfiprintf_r+0x254>)
 8008cbe:	bb1b      	cbnz	r3, 8008d08 <_vfiprintf_r+0x1f8>
 8008cc0:	9b03      	ldr	r3, [sp, #12]
 8008cc2:	3307      	adds	r3, #7
 8008cc4:	f023 0307 	bic.w	r3, r3, #7
 8008cc8:	3308      	adds	r3, #8
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cce:	443b      	add	r3, r7
 8008cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd2:	e767      	b.n	8008ba4 <_vfiprintf_r+0x94>
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cdc:	e7a5      	b.n	8008c2a <_vfiprintf_r+0x11a>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f04f 0c0a 	mov.w	ip, #10
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	9305      	str	r3, [sp, #20]
 8008cea:	4620      	mov	r0, r4
 8008cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf0:	3a30      	subs	r2, #48	; 0x30
 8008cf2:	2a09      	cmp	r2, #9
 8008cf4:	d903      	bls.n	8008cfe <_vfiprintf_r+0x1ee>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0c5      	beq.n	8008c86 <_vfiprintf_r+0x176>
 8008cfa:	9105      	str	r1, [sp, #20]
 8008cfc:	e7c3      	b.n	8008c86 <_vfiprintf_r+0x176>
 8008cfe:	4604      	mov	r4, r0
 8008d00:	2301      	movs	r3, #1
 8008d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d06:	e7f0      	b.n	8008cea <_vfiprintf_r+0x1da>
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	462a      	mov	r2, r5
 8008d0e:	4630      	mov	r0, r6
 8008d10:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <_vfiprintf_r+0x258>)
 8008d12:	a904      	add	r1, sp, #16
 8008d14:	f000 f8ca 	bl	8008eac <_printf_float>
 8008d18:	4607      	mov	r7, r0
 8008d1a:	1c78      	adds	r0, r7, #1
 8008d1c:	d1d6      	bne.n	8008ccc <_vfiprintf_r+0x1bc>
 8008d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d20:	07d9      	lsls	r1, r3, #31
 8008d22:	d405      	bmi.n	8008d30 <_vfiprintf_r+0x220>
 8008d24:	89ab      	ldrh	r3, [r5, #12]
 8008d26:	059a      	lsls	r2, r3, #22
 8008d28:	d402      	bmi.n	8008d30 <_vfiprintf_r+0x220>
 8008d2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d2c:	f003 fa0a 	bl	800c144 <__retarget_lock_release_recursive>
 8008d30:	89ab      	ldrh	r3, [r5, #12]
 8008d32:	065b      	lsls	r3, r3, #25
 8008d34:	f53f af12 	bmi.w	8008b5c <_vfiprintf_r+0x4c>
 8008d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d3a:	e711      	b.n	8008b60 <_vfiprintf_r+0x50>
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <_vfiprintf_r+0x258>)
 8008d46:	a904      	add	r1, sp, #16
 8008d48:	f000 fb4c 	bl	80093e4 <_printf_i>
 8008d4c:	e7e4      	b.n	8008d18 <_vfiprintf_r+0x208>
 8008d4e:	bf00      	nop
 8008d50:	08010638 	.word	0x08010638
 8008d54:	08010658 	.word	0x08010658
 8008d58:	08010618 	.word	0x08010618
 8008d5c:	080103e4 	.word	0x080103e4
 8008d60:	080103ee 	.word	0x080103ee
 8008d64:	08008ead 	.word	0x08008ead
 8008d68:	08008aeb 	.word	0x08008aeb
 8008d6c:	080103ea 	.word	0x080103ea

08008d70 <__cvt>:
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d76:	461f      	mov	r7, r3
 8008d78:	bfbb      	ittet	lt
 8008d7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008d7e:	461f      	movlt	r7, r3
 8008d80:	2300      	movge	r3, #0
 8008d82:	232d      	movlt	r3, #45	; 0x2d
 8008d84:	b088      	sub	sp, #32
 8008d86:	4614      	mov	r4, r2
 8008d88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d8c:	7013      	strb	r3, [r2, #0]
 8008d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008d94:	f023 0820 	bic.w	r8, r3, #32
 8008d98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d9c:	d005      	beq.n	8008daa <__cvt+0x3a>
 8008d9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008da2:	d100      	bne.n	8008da6 <__cvt+0x36>
 8008da4:	3501      	adds	r5, #1
 8008da6:	2302      	movs	r3, #2
 8008da8:	e000      	b.n	8008dac <__cvt+0x3c>
 8008daa:	2303      	movs	r3, #3
 8008dac:	aa07      	add	r2, sp, #28
 8008dae:	9204      	str	r2, [sp, #16]
 8008db0:	aa06      	add	r2, sp, #24
 8008db2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008db6:	e9cd 3500 	strd	r3, r5, [sp]
 8008dba:	4622      	mov	r2, r4
 8008dbc:	463b      	mov	r3, r7
 8008dbe:	f001 feaf 	bl	800ab20 <_dtoa_r>
 8008dc2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	d102      	bne.n	8008dd0 <__cvt+0x60>
 8008dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dcc:	07db      	lsls	r3, r3, #31
 8008dce:	d522      	bpl.n	8008e16 <__cvt+0xa6>
 8008dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dd4:	eb06 0905 	add.w	r9, r6, r5
 8008dd8:	d110      	bne.n	8008dfc <__cvt+0x8c>
 8008dda:	7833      	ldrb	r3, [r6, #0]
 8008ddc:	2b30      	cmp	r3, #48	; 0x30
 8008dde:	d10a      	bne.n	8008df6 <__cvt+0x86>
 8008de0:	2200      	movs	r2, #0
 8008de2:	2300      	movs	r3, #0
 8008de4:	4620      	mov	r0, r4
 8008de6:	4639      	mov	r1, r7
 8008de8:	f7f7 fdde 	bl	80009a8 <__aeabi_dcmpeq>
 8008dec:	b918      	cbnz	r0, 8008df6 <__cvt+0x86>
 8008dee:	f1c5 0501 	rsb	r5, r5, #1
 8008df2:	f8ca 5000 	str.w	r5, [sl]
 8008df6:	f8da 3000 	ldr.w	r3, [sl]
 8008dfa:	4499      	add	r9, r3
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4620      	mov	r0, r4
 8008e02:	4639      	mov	r1, r7
 8008e04:	f7f7 fdd0 	bl	80009a8 <__aeabi_dcmpeq>
 8008e08:	b108      	cbz	r0, 8008e0e <__cvt+0x9e>
 8008e0a:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e0e:	2230      	movs	r2, #48	; 0x30
 8008e10:	9b07      	ldr	r3, [sp, #28]
 8008e12:	454b      	cmp	r3, r9
 8008e14:	d307      	bcc.n	8008e26 <__cvt+0xb6>
 8008e16:	4630      	mov	r0, r6
 8008e18:	9b07      	ldr	r3, [sp, #28]
 8008e1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e1c:	1b9b      	subs	r3, r3, r6
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	b008      	add	sp, #32
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	1c59      	adds	r1, r3, #1
 8008e28:	9107      	str	r1, [sp, #28]
 8008e2a:	701a      	strb	r2, [r3, #0]
 8008e2c:	e7f0      	b.n	8008e10 <__cvt+0xa0>

08008e2e <__exponent>:
 8008e2e:	4603      	mov	r3, r0
 8008e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e32:	2900      	cmp	r1, #0
 8008e34:	f803 2b02 	strb.w	r2, [r3], #2
 8008e38:	bfb6      	itet	lt
 8008e3a:	222d      	movlt	r2, #45	; 0x2d
 8008e3c:	222b      	movge	r2, #43	; 0x2b
 8008e3e:	4249      	neglt	r1, r1
 8008e40:	2909      	cmp	r1, #9
 8008e42:	7042      	strb	r2, [r0, #1]
 8008e44:	dd2b      	ble.n	8008e9e <__exponent+0x70>
 8008e46:	f10d 0407 	add.w	r4, sp, #7
 8008e4a:	46a4      	mov	ip, r4
 8008e4c:	270a      	movs	r7, #10
 8008e4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e52:	460a      	mov	r2, r1
 8008e54:	46a6      	mov	lr, r4
 8008e56:	fb07 1516 	mls	r5, r7, r6, r1
 8008e5a:	2a63      	cmp	r2, #99	; 0x63
 8008e5c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008e60:	4631      	mov	r1, r6
 8008e62:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e6a:	dcf0      	bgt.n	8008e4e <__exponent+0x20>
 8008e6c:	3130      	adds	r1, #48	; 0x30
 8008e6e:	f1ae 0502 	sub.w	r5, lr, #2
 8008e72:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e76:	4629      	mov	r1, r5
 8008e78:	1c44      	adds	r4, r0, #1
 8008e7a:	4561      	cmp	r1, ip
 8008e7c:	d30a      	bcc.n	8008e94 <__exponent+0x66>
 8008e7e:	f10d 0209 	add.w	r2, sp, #9
 8008e82:	eba2 020e 	sub.w	r2, r2, lr
 8008e86:	4565      	cmp	r5, ip
 8008e88:	bf88      	it	hi
 8008e8a:	2200      	movhi	r2, #0
 8008e8c:	4413      	add	r3, r2
 8008e8e:	1a18      	subs	r0, r3, r0
 8008e90:	b003      	add	sp, #12
 8008e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e98:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e9c:	e7ed      	b.n	8008e7a <__exponent+0x4c>
 8008e9e:	2330      	movs	r3, #48	; 0x30
 8008ea0:	3130      	adds	r1, #48	; 0x30
 8008ea2:	7083      	strb	r3, [r0, #2]
 8008ea4:	70c1      	strb	r1, [r0, #3]
 8008ea6:	1d03      	adds	r3, r0, #4
 8008ea8:	e7f1      	b.n	8008e8e <__exponent+0x60>
	...

08008eac <_printf_float>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	b091      	sub	sp, #68	; 0x44
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008eb8:	4616      	mov	r6, r2
 8008eba:	461f      	mov	r7, r3
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	f003 f93b 	bl	800c138 <_localeconv_r>
 8008ec2:	6803      	ldr	r3, [r0, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec8:	f7f7 f942 	bl	8000150 <strlen>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	930e      	str	r3, [sp, #56]	; 0x38
 8008ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ed6:	3307      	adds	r3, #7
 8008ed8:	f023 0307 	bic.w	r3, r3, #7
 8008edc:	f103 0208 	add.w	r2, r3, #8
 8008ee0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ee4:	f8d4 b000 	ldr.w	fp, [r4]
 8008ee8:	f8c8 2000 	str.w	r2, [r8]
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ef4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008ef8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295
 8008f02:	4640      	mov	r0, r8
 8008f04:	4b9c      	ldr	r3, [pc, #624]	; (8009178 <_printf_float+0x2cc>)
 8008f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f08:	f7f7 fd80 	bl	8000a0c <__aeabi_dcmpun>
 8008f0c:	bb70      	cbnz	r0, 8008f6c <_printf_float+0xc0>
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f12:	4640      	mov	r0, r8
 8008f14:	4b98      	ldr	r3, [pc, #608]	; (8009178 <_printf_float+0x2cc>)
 8008f16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f18:	f7f7 fd5a 	bl	80009d0 <__aeabi_dcmple>
 8008f1c:	bb30      	cbnz	r0, 8008f6c <_printf_float+0xc0>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2300      	movs	r3, #0
 8008f22:	4640      	mov	r0, r8
 8008f24:	4651      	mov	r1, sl
 8008f26:	f7f7 fd49 	bl	80009bc <__aeabi_dcmplt>
 8008f2a:	b110      	cbz	r0, 8008f32 <_printf_float+0x86>
 8008f2c:	232d      	movs	r3, #45	; 0x2d
 8008f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f32:	4b92      	ldr	r3, [pc, #584]	; (800917c <_printf_float+0x2d0>)
 8008f34:	4892      	ldr	r0, [pc, #584]	; (8009180 <_printf_float+0x2d4>)
 8008f36:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f3a:	bf94      	ite	ls
 8008f3c:	4698      	movls	r8, r3
 8008f3e:	4680      	movhi	r8, r0
 8008f40:	2303      	movs	r3, #3
 8008f42:	f04f 0a00 	mov.w	sl, #0
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	f02b 0304 	bic.w	r3, fp, #4
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	4633      	mov	r3, r6
 8008f50:	4621      	mov	r1, r4
 8008f52:	4628      	mov	r0, r5
 8008f54:	9700      	str	r7, [sp, #0]
 8008f56:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f58:	f000 f9d4 	bl	8009304 <_printf_common>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f040 8090 	bne.w	8009082 <_printf_float+0x1d6>
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	b011      	add	sp, #68	; 0x44
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	4653      	mov	r3, sl
 8008f70:	4640      	mov	r0, r8
 8008f72:	4651      	mov	r1, sl
 8008f74:	f7f7 fd4a 	bl	8000a0c <__aeabi_dcmpun>
 8008f78:	b148      	cbz	r0, 8008f8e <_printf_float+0xe2>
 8008f7a:	f1ba 0f00 	cmp.w	sl, #0
 8008f7e:	bfb8      	it	lt
 8008f80:	232d      	movlt	r3, #45	; 0x2d
 8008f82:	4880      	ldr	r0, [pc, #512]	; (8009184 <_printf_float+0x2d8>)
 8008f84:	bfb8      	it	lt
 8008f86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f8a:	4b7f      	ldr	r3, [pc, #508]	; (8009188 <_printf_float+0x2dc>)
 8008f8c:	e7d3      	b.n	8008f36 <_printf_float+0x8a>
 8008f8e:	6863      	ldr	r3, [r4, #4]
 8008f90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	d142      	bne.n	800901e <_printf_float+0x172>
 8008f98:	2306      	movs	r3, #6
 8008f9a:	6063      	str	r3, [r4, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	9206      	str	r2, [sp, #24]
 8008fa0:	aa0e      	add	r2, sp, #56	; 0x38
 8008fa2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008fa6:	aa0d      	add	r2, sp, #52	; 0x34
 8008fa8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008fac:	9203      	str	r2, [sp, #12]
 8008fae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008fb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008fb6:	6023      	str	r3, [r4, #0]
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	4642      	mov	r2, r8
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	4653      	mov	r3, sl
 8008fc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fc4:	f7ff fed4 	bl	8008d70 <__cvt>
 8008fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fca:	4680      	mov	r8, r0
 8008fcc:	2947      	cmp	r1, #71	; 0x47
 8008fce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fd0:	d108      	bne.n	8008fe4 <_printf_float+0x138>
 8008fd2:	1cc8      	adds	r0, r1, #3
 8008fd4:	db02      	blt.n	8008fdc <_printf_float+0x130>
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	dd40      	ble.n	800905e <_printf_float+0x1b2>
 8008fdc:	f1a9 0902 	sub.w	r9, r9, #2
 8008fe0:	fa5f f989 	uxtb.w	r9, r9
 8008fe4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fe8:	d81f      	bhi.n	800902a <_printf_float+0x17e>
 8008fea:	464a      	mov	r2, r9
 8008fec:	3901      	subs	r1, #1
 8008fee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ff4:	f7ff ff1b 	bl	8008e2e <__exponent>
 8008ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	1813      	adds	r3, r2, r0
 8008ffe:	2a01      	cmp	r2, #1
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	dc02      	bgt.n	800900a <_printf_float+0x15e>
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	07d2      	lsls	r2, r2, #31
 8009008:	d501      	bpl.n	800900e <_printf_float+0x162>
 800900a:	3301      	adds	r3, #1
 800900c:	6123      	str	r3, [r4, #16]
 800900e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009012:	2b00      	cmp	r3, #0
 8009014:	d09b      	beq.n	8008f4e <_printf_float+0xa2>
 8009016:	232d      	movs	r3, #45	; 0x2d
 8009018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800901c:	e797      	b.n	8008f4e <_printf_float+0xa2>
 800901e:	2947      	cmp	r1, #71	; 0x47
 8009020:	d1bc      	bne.n	8008f9c <_printf_float+0xf0>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1ba      	bne.n	8008f9c <_printf_float+0xf0>
 8009026:	2301      	movs	r3, #1
 8009028:	e7b7      	b.n	8008f9a <_printf_float+0xee>
 800902a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800902e:	d118      	bne.n	8009062 <_printf_float+0x1b6>
 8009030:	2900      	cmp	r1, #0
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	dd0b      	ble.n	800904e <_printf_float+0x1a2>
 8009036:	6121      	str	r1, [r4, #16]
 8009038:	b913      	cbnz	r3, 8009040 <_printf_float+0x194>
 800903a:	6822      	ldr	r2, [r4, #0]
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d502      	bpl.n	8009046 <_printf_float+0x19a>
 8009040:	3301      	adds	r3, #1
 8009042:	440b      	add	r3, r1
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	f04f 0a00 	mov.w	sl, #0
 800904a:	65a1      	str	r1, [r4, #88]	; 0x58
 800904c:	e7df      	b.n	800900e <_printf_float+0x162>
 800904e:	b913      	cbnz	r3, 8009056 <_printf_float+0x1aa>
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	07d2      	lsls	r2, r2, #31
 8009054:	d501      	bpl.n	800905a <_printf_float+0x1ae>
 8009056:	3302      	adds	r3, #2
 8009058:	e7f4      	b.n	8009044 <_printf_float+0x198>
 800905a:	2301      	movs	r3, #1
 800905c:	e7f2      	b.n	8009044 <_printf_float+0x198>
 800905e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009064:	4299      	cmp	r1, r3
 8009066:	db05      	blt.n	8009074 <_printf_float+0x1c8>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	6121      	str	r1, [r4, #16]
 800906c:	07d8      	lsls	r0, r3, #31
 800906e:	d5ea      	bpl.n	8009046 <_printf_float+0x19a>
 8009070:	1c4b      	adds	r3, r1, #1
 8009072:	e7e7      	b.n	8009044 <_printf_float+0x198>
 8009074:	2900      	cmp	r1, #0
 8009076:	bfcc      	ite	gt
 8009078:	2201      	movgt	r2, #1
 800907a:	f1c1 0202 	rsble	r2, r1, #2
 800907e:	4413      	add	r3, r2
 8009080:	e7e0      	b.n	8009044 <_printf_float+0x198>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	055a      	lsls	r2, r3, #21
 8009086:	d407      	bmi.n	8009098 <_printf_float+0x1ec>
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	4642      	mov	r2, r8
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	d12b      	bne.n	80090ee <_printf_float+0x242>
 8009096:	e764      	b.n	8008f62 <_printf_float+0xb6>
 8009098:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800909c:	f240 80dd 	bls.w	800925a <_printf_float+0x3ae>
 80090a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	f7f7 fc7e 	bl	80009a8 <__aeabi_dcmpeq>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d033      	beq.n	8009118 <_printf_float+0x26c>
 80090b0:	2301      	movs	r3, #1
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	4a35      	ldr	r2, [pc, #212]	; (800918c <_printf_float+0x2e0>)
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f af51 	beq.w	8008f62 <_printf_float+0xb6>
 80090c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090c4:	429a      	cmp	r2, r3
 80090c6:	db02      	blt.n	80090ce <_printf_float+0x222>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	07d8      	lsls	r0, r3, #31
 80090cc:	d50f      	bpl.n	80090ee <_printf_float+0x242>
 80090ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f af42 	beq.w	8008f62 <_printf_float+0xb6>
 80090de:	f04f 0800 	mov.w	r8, #0
 80090e2:	f104 091a 	add.w	r9, r4, #26
 80090e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e8:	3b01      	subs	r3, #1
 80090ea:	4543      	cmp	r3, r8
 80090ec:	dc09      	bgt.n	8009102 <_printf_float+0x256>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	079b      	lsls	r3, r3, #30
 80090f2:	f100 8102 	bmi.w	80092fa <_printf_float+0x44e>
 80090f6:	68e0      	ldr	r0, [r4, #12]
 80090f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090fa:	4298      	cmp	r0, r3
 80090fc:	bfb8      	it	lt
 80090fe:	4618      	movlt	r0, r3
 8009100:	e731      	b.n	8008f66 <_printf_float+0xba>
 8009102:	2301      	movs	r3, #1
 8009104:	464a      	mov	r2, r9
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f af28 	beq.w	8008f62 <_printf_float+0xb6>
 8009112:	f108 0801 	add.w	r8, r8, #1
 8009116:	e7e6      	b.n	80090e6 <_printf_float+0x23a>
 8009118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800911a:	2b00      	cmp	r3, #0
 800911c:	dc38      	bgt.n	8009190 <_printf_float+0x2e4>
 800911e:	2301      	movs	r3, #1
 8009120:	4631      	mov	r1, r6
 8009122:	4628      	mov	r0, r5
 8009124:	4a19      	ldr	r2, [pc, #100]	; (800918c <_printf_float+0x2e0>)
 8009126:	47b8      	blx	r7
 8009128:	3001      	adds	r0, #1
 800912a:	f43f af1a 	beq.w	8008f62 <_printf_float+0xb6>
 800912e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009132:	4313      	orrs	r3, r2
 8009134:	d102      	bne.n	800913c <_printf_float+0x290>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	07d9      	lsls	r1, r3, #31
 800913a:	d5d8      	bpl.n	80090ee <_printf_float+0x242>
 800913c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009140:	4631      	mov	r1, r6
 8009142:	4628      	mov	r0, r5
 8009144:	47b8      	blx	r7
 8009146:	3001      	adds	r0, #1
 8009148:	f43f af0b 	beq.w	8008f62 <_printf_float+0xb6>
 800914c:	f04f 0900 	mov.w	r9, #0
 8009150:	f104 0a1a 	add.w	sl, r4, #26
 8009154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009156:	425b      	negs	r3, r3
 8009158:	454b      	cmp	r3, r9
 800915a:	dc01      	bgt.n	8009160 <_printf_float+0x2b4>
 800915c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915e:	e794      	b.n	800908a <_printf_float+0x1de>
 8009160:	2301      	movs	r3, #1
 8009162:	4652      	mov	r2, sl
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	f43f aef9 	beq.w	8008f62 <_printf_float+0xb6>
 8009170:	f109 0901 	add.w	r9, r9, #1
 8009174:	e7ee      	b.n	8009154 <_printf_float+0x2a8>
 8009176:	bf00      	nop
 8009178:	7fefffff 	.word	0x7fefffff
 800917c:	080103f5 	.word	0x080103f5
 8009180:	080103f9 	.word	0x080103f9
 8009184:	08010401 	.word	0x08010401
 8009188:	080103fd 	.word	0x080103fd
 800918c:	08010405 	.word	0x08010405
 8009190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009194:	429a      	cmp	r2, r3
 8009196:	bfa8      	it	ge
 8009198:	461a      	movge	r2, r3
 800919a:	2a00      	cmp	r2, #0
 800919c:	4691      	mov	r9, r2
 800919e:	dc37      	bgt.n	8009210 <_printf_float+0x364>
 80091a0:	f04f 0b00 	mov.w	fp, #0
 80091a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091a8:	f104 021a 	add.w	r2, r4, #26
 80091ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091b0:	ebaa 0309 	sub.w	r3, sl, r9
 80091b4:	455b      	cmp	r3, fp
 80091b6:	dc33      	bgt.n	8009220 <_printf_float+0x374>
 80091b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091bc:	429a      	cmp	r2, r3
 80091be:	db3b      	blt.n	8009238 <_printf_float+0x38c>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	07da      	lsls	r2, r3, #31
 80091c4:	d438      	bmi.n	8009238 <_printf_float+0x38c>
 80091c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091ca:	eba2 030a 	sub.w	r3, r2, sl
 80091ce:	eba2 0901 	sub.w	r9, r2, r1
 80091d2:	4599      	cmp	r9, r3
 80091d4:	bfa8      	it	ge
 80091d6:	4699      	movge	r9, r3
 80091d8:	f1b9 0f00 	cmp.w	r9, #0
 80091dc:	dc34      	bgt.n	8009248 <_printf_float+0x39c>
 80091de:	f04f 0800 	mov.w	r8, #0
 80091e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091e6:	f104 0a1a 	add.w	sl, r4, #26
 80091ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	eba3 0309 	sub.w	r3, r3, r9
 80091f4:	4543      	cmp	r3, r8
 80091f6:	f77f af7a 	ble.w	80090ee <_printf_float+0x242>
 80091fa:	2301      	movs	r3, #1
 80091fc:	4652      	mov	r2, sl
 80091fe:	4631      	mov	r1, r6
 8009200:	4628      	mov	r0, r5
 8009202:	47b8      	blx	r7
 8009204:	3001      	adds	r0, #1
 8009206:	f43f aeac 	beq.w	8008f62 <_printf_float+0xb6>
 800920a:	f108 0801 	add.w	r8, r8, #1
 800920e:	e7ec      	b.n	80091ea <_printf_float+0x33e>
 8009210:	4613      	mov	r3, r2
 8009212:	4631      	mov	r1, r6
 8009214:	4642      	mov	r2, r8
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	d1c0      	bne.n	80091a0 <_printf_float+0x2f4>
 800921e:	e6a0      	b.n	8008f62 <_printf_float+0xb6>
 8009220:	2301      	movs	r3, #1
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	920b      	str	r2, [sp, #44]	; 0x2c
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f ae99 	beq.w	8008f62 <_printf_float+0xb6>
 8009230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009232:	f10b 0b01 	add.w	fp, fp, #1
 8009236:	e7b9      	b.n	80091ac <_printf_float+0x300>
 8009238:	4631      	mov	r1, r6
 800923a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	d1bf      	bne.n	80091c6 <_printf_float+0x31a>
 8009246:	e68c      	b.n	8008f62 <_printf_float+0xb6>
 8009248:	464b      	mov	r3, r9
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	eb08 020a 	add.w	r2, r8, sl
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	d1c2      	bne.n	80091de <_printf_float+0x332>
 8009258:	e683      	b.n	8008f62 <_printf_float+0xb6>
 800925a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800925c:	2a01      	cmp	r2, #1
 800925e:	dc01      	bgt.n	8009264 <_printf_float+0x3b8>
 8009260:	07db      	lsls	r3, r3, #31
 8009262:	d537      	bpl.n	80092d4 <_printf_float+0x428>
 8009264:	2301      	movs	r3, #1
 8009266:	4642      	mov	r2, r8
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	f43f ae77 	beq.w	8008f62 <_printf_float+0xb6>
 8009274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f ae6f 	beq.w	8008f62 <_printf_float+0xb6>
 8009284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	f7f7 fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8009290:	b9d8      	cbnz	r0, 80092ca <_printf_float+0x41e>
 8009292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009294:	f108 0201 	add.w	r2, r8, #1
 8009298:	3b01      	subs	r3, #1
 800929a:	4631      	mov	r1, r6
 800929c:	4628      	mov	r0, r5
 800929e:	47b8      	blx	r7
 80092a0:	3001      	adds	r0, #1
 80092a2:	d10e      	bne.n	80092c2 <_printf_float+0x416>
 80092a4:	e65d      	b.n	8008f62 <_printf_float+0xb6>
 80092a6:	2301      	movs	r3, #1
 80092a8:	464a      	mov	r2, r9
 80092aa:	4631      	mov	r1, r6
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b8      	blx	r7
 80092b0:	3001      	adds	r0, #1
 80092b2:	f43f ae56 	beq.w	8008f62 <_printf_float+0xb6>
 80092b6:	f108 0801 	add.w	r8, r8, #1
 80092ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092bc:	3b01      	subs	r3, #1
 80092be:	4543      	cmp	r3, r8
 80092c0:	dcf1      	bgt.n	80092a6 <_printf_float+0x3fa>
 80092c2:	4653      	mov	r3, sl
 80092c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092c8:	e6e0      	b.n	800908c <_printf_float+0x1e0>
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	f104 091a 	add.w	r9, r4, #26
 80092d2:	e7f2      	b.n	80092ba <_printf_float+0x40e>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4642      	mov	r2, r8
 80092d8:	e7df      	b.n	800929a <_printf_float+0x3ee>
 80092da:	2301      	movs	r3, #1
 80092dc:	464a      	mov	r2, r9
 80092de:	4631      	mov	r1, r6
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	f43f ae3c 	beq.w	8008f62 <_printf_float+0xb6>
 80092ea:	f108 0801 	add.w	r8, r8, #1
 80092ee:	68e3      	ldr	r3, [r4, #12]
 80092f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092f2:	1a5b      	subs	r3, r3, r1
 80092f4:	4543      	cmp	r3, r8
 80092f6:	dcf0      	bgt.n	80092da <_printf_float+0x42e>
 80092f8:	e6fd      	b.n	80090f6 <_printf_float+0x24a>
 80092fa:	f04f 0800 	mov.w	r8, #0
 80092fe:	f104 0919 	add.w	r9, r4, #25
 8009302:	e7f4      	b.n	80092ee <_printf_float+0x442>

08009304 <_printf_common>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	4616      	mov	r6, r2
 800930a:	4699      	mov	r9, r3
 800930c:	688a      	ldr	r2, [r1, #8]
 800930e:	690b      	ldr	r3, [r1, #16]
 8009310:	4607      	mov	r7, r0
 8009312:	4293      	cmp	r3, r2
 8009314:	bfb8      	it	lt
 8009316:	4613      	movlt	r3, r2
 8009318:	6033      	str	r3, [r6, #0]
 800931a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800931e:	460c      	mov	r4, r1
 8009320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009324:	b10a      	cbz	r2, 800932a <_printf_common+0x26>
 8009326:	3301      	adds	r3, #1
 8009328:	6033      	str	r3, [r6, #0]
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	0699      	lsls	r1, r3, #26
 800932e:	bf42      	ittt	mi
 8009330:	6833      	ldrmi	r3, [r6, #0]
 8009332:	3302      	addmi	r3, #2
 8009334:	6033      	strmi	r3, [r6, #0]
 8009336:	6825      	ldr	r5, [r4, #0]
 8009338:	f015 0506 	ands.w	r5, r5, #6
 800933c:	d106      	bne.n	800934c <_printf_common+0x48>
 800933e:	f104 0a19 	add.w	sl, r4, #25
 8009342:	68e3      	ldr	r3, [r4, #12]
 8009344:	6832      	ldr	r2, [r6, #0]
 8009346:	1a9b      	subs	r3, r3, r2
 8009348:	42ab      	cmp	r3, r5
 800934a:	dc28      	bgt.n	800939e <_printf_common+0x9a>
 800934c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009350:	1e13      	subs	r3, r2, #0
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	bf18      	it	ne
 8009356:	2301      	movne	r3, #1
 8009358:	0692      	lsls	r2, r2, #26
 800935a:	d42d      	bmi.n	80093b8 <_printf_common+0xb4>
 800935c:	4649      	mov	r1, r9
 800935e:	4638      	mov	r0, r7
 8009360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009364:	47c0      	blx	r8
 8009366:	3001      	adds	r0, #1
 8009368:	d020      	beq.n	80093ac <_printf_common+0xa8>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	68e5      	ldr	r5, [r4, #12]
 800936e:	f003 0306 	and.w	r3, r3, #6
 8009372:	2b04      	cmp	r3, #4
 8009374:	bf18      	it	ne
 8009376:	2500      	movne	r5, #0
 8009378:	6832      	ldr	r2, [r6, #0]
 800937a:	f04f 0600 	mov.w	r6, #0
 800937e:	68a3      	ldr	r3, [r4, #8]
 8009380:	bf08      	it	eq
 8009382:	1aad      	subeq	r5, r5, r2
 8009384:	6922      	ldr	r2, [r4, #16]
 8009386:	bf08      	it	eq
 8009388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800938c:	4293      	cmp	r3, r2
 800938e:	bfc4      	itt	gt
 8009390:	1a9b      	subgt	r3, r3, r2
 8009392:	18ed      	addgt	r5, r5, r3
 8009394:	341a      	adds	r4, #26
 8009396:	42b5      	cmp	r5, r6
 8009398:	d11a      	bne.n	80093d0 <_printf_common+0xcc>
 800939a:	2000      	movs	r0, #0
 800939c:	e008      	b.n	80093b0 <_printf_common+0xac>
 800939e:	2301      	movs	r3, #1
 80093a0:	4652      	mov	r2, sl
 80093a2:	4649      	mov	r1, r9
 80093a4:	4638      	mov	r0, r7
 80093a6:	47c0      	blx	r8
 80093a8:	3001      	adds	r0, #1
 80093aa:	d103      	bne.n	80093b4 <_printf_common+0xb0>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b4:	3501      	adds	r5, #1
 80093b6:	e7c4      	b.n	8009342 <_printf_common+0x3e>
 80093b8:	2030      	movs	r0, #48	; 0x30
 80093ba:	18e1      	adds	r1, r4, r3
 80093bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093c6:	4422      	add	r2, r4
 80093c8:	3302      	adds	r3, #2
 80093ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ce:	e7c5      	b.n	800935c <_printf_common+0x58>
 80093d0:	2301      	movs	r3, #1
 80093d2:	4622      	mov	r2, r4
 80093d4:	4649      	mov	r1, r9
 80093d6:	4638      	mov	r0, r7
 80093d8:	47c0      	blx	r8
 80093da:	3001      	adds	r0, #1
 80093dc:	d0e6      	beq.n	80093ac <_printf_common+0xa8>
 80093de:	3601      	adds	r6, #1
 80093e0:	e7d9      	b.n	8009396 <_printf_common+0x92>
	...

080093e4 <_printf_i>:
 80093e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	460c      	mov	r4, r1
 80093ea:	7e27      	ldrb	r7, [r4, #24]
 80093ec:	4691      	mov	r9, r2
 80093ee:	2f78      	cmp	r7, #120	; 0x78
 80093f0:	4680      	mov	r8, r0
 80093f2:	469a      	mov	sl, r3
 80093f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093fa:	d807      	bhi.n	800940c <_printf_i+0x28>
 80093fc:	2f62      	cmp	r7, #98	; 0x62
 80093fe:	d80a      	bhi.n	8009416 <_printf_i+0x32>
 8009400:	2f00      	cmp	r7, #0
 8009402:	f000 80d9 	beq.w	80095b8 <_printf_i+0x1d4>
 8009406:	2f58      	cmp	r7, #88	; 0x58
 8009408:	f000 80a4 	beq.w	8009554 <_printf_i+0x170>
 800940c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009414:	e03a      	b.n	800948c <_printf_i+0xa8>
 8009416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800941a:	2b15      	cmp	r3, #21
 800941c:	d8f6      	bhi.n	800940c <_printf_i+0x28>
 800941e:	a001      	add	r0, pc, #4	; (adr r0, 8009424 <_printf_i+0x40>)
 8009420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009424:	0800947d 	.word	0x0800947d
 8009428:	08009491 	.word	0x08009491
 800942c:	0800940d 	.word	0x0800940d
 8009430:	0800940d 	.word	0x0800940d
 8009434:	0800940d 	.word	0x0800940d
 8009438:	0800940d 	.word	0x0800940d
 800943c:	08009491 	.word	0x08009491
 8009440:	0800940d 	.word	0x0800940d
 8009444:	0800940d 	.word	0x0800940d
 8009448:	0800940d 	.word	0x0800940d
 800944c:	0800940d 	.word	0x0800940d
 8009450:	0800959f 	.word	0x0800959f
 8009454:	080094c1 	.word	0x080094c1
 8009458:	08009581 	.word	0x08009581
 800945c:	0800940d 	.word	0x0800940d
 8009460:	0800940d 	.word	0x0800940d
 8009464:	080095c1 	.word	0x080095c1
 8009468:	0800940d 	.word	0x0800940d
 800946c:	080094c1 	.word	0x080094c1
 8009470:	0800940d 	.word	0x0800940d
 8009474:	0800940d 	.word	0x0800940d
 8009478:	08009589 	.word	0x08009589
 800947c:	680b      	ldr	r3, [r1, #0]
 800947e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009482:	1d1a      	adds	r2, r3, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	600a      	str	r2, [r1, #0]
 8009488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800948c:	2301      	movs	r3, #1
 800948e:	e0a4      	b.n	80095da <_printf_i+0x1f6>
 8009490:	6825      	ldr	r5, [r4, #0]
 8009492:	6808      	ldr	r0, [r1, #0]
 8009494:	062e      	lsls	r6, r5, #24
 8009496:	f100 0304 	add.w	r3, r0, #4
 800949a:	d50a      	bpl.n	80094b2 <_printf_i+0xce>
 800949c:	6805      	ldr	r5, [r0, #0]
 800949e:	600b      	str	r3, [r1, #0]
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	da03      	bge.n	80094ac <_printf_i+0xc8>
 80094a4:	232d      	movs	r3, #45	; 0x2d
 80094a6:	426d      	negs	r5, r5
 80094a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ac:	230a      	movs	r3, #10
 80094ae:	485e      	ldr	r0, [pc, #376]	; (8009628 <_printf_i+0x244>)
 80094b0:	e019      	b.n	80094e6 <_printf_i+0x102>
 80094b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094b6:	6805      	ldr	r5, [r0, #0]
 80094b8:	600b      	str	r3, [r1, #0]
 80094ba:	bf18      	it	ne
 80094bc:	b22d      	sxthne	r5, r5
 80094be:	e7ef      	b.n	80094a0 <_printf_i+0xbc>
 80094c0:	680b      	ldr	r3, [r1, #0]
 80094c2:	6825      	ldr	r5, [r4, #0]
 80094c4:	1d18      	adds	r0, r3, #4
 80094c6:	6008      	str	r0, [r1, #0]
 80094c8:	0628      	lsls	r0, r5, #24
 80094ca:	d501      	bpl.n	80094d0 <_printf_i+0xec>
 80094cc:	681d      	ldr	r5, [r3, #0]
 80094ce:	e002      	b.n	80094d6 <_printf_i+0xf2>
 80094d0:	0669      	lsls	r1, r5, #25
 80094d2:	d5fb      	bpl.n	80094cc <_printf_i+0xe8>
 80094d4:	881d      	ldrh	r5, [r3, #0]
 80094d6:	2f6f      	cmp	r7, #111	; 0x6f
 80094d8:	bf0c      	ite	eq
 80094da:	2308      	moveq	r3, #8
 80094dc:	230a      	movne	r3, #10
 80094de:	4852      	ldr	r0, [pc, #328]	; (8009628 <_printf_i+0x244>)
 80094e0:	2100      	movs	r1, #0
 80094e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094e6:	6866      	ldr	r6, [r4, #4]
 80094e8:	2e00      	cmp	r6, #0
 80094ea:	bfa8      	it	ge
 80094ec:	6821      	ldrge	r1, [r4, #0]
 80094ee:	60a6      	str	r6, [r4, #8]
 80094f0:	bfa4      	itt	ge
 80094f2:	f021 0104 	bicge.w	r1, r1, #4
 80094f6:	6021      	strge	r1, [r4, #0]
 80094f8:	b90d      	cbnz	r5, 80094fe <_printf_i+0x11a>
 80094fa:	2e00      	cmp	r6, #0
 80094fc:	d04d      	beq.n	800959a <_printf_i+0x1b6>
 80094fe:	4616      	mov	r6, r2
 8009500:	fbb5 f1f3 	udiv	r1, r5, r3
 8009504:	fb03 5711 	mls	r7, r3, r1, r5
 8009508:	5dc7      	ldrb	r7, [r0, r7]
 800950a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800950e:	462f      	mov	r7, r5
 8009510:	42bb      	cmp	r3, r7
 8009512:	460d      	mov	r5, r1
 8009514:	d9f4      	bls.n	8009500 <_printf_i+0x11c>
 8009516:	2b08      	cmp	r3, #8
 8009518:	d10b      	bne.n	8009532 <_printf_i+0x14e>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	07df      	lsls	r7, r3, #31
 800951e:	d508      	bpl.n	8009532 <_printf_i+0x14e>
 8009520:	6923      	ldr	r3, [r4, #16]
 8009522:	6861      	ldr	r1, [r4, #4]
 8009524:	4299      	cmp	r1, r3
 8009526:	bfde      	ittt	le
 8009528:	2330      	movle	r3, #48	; 0x30
 800952a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800952e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009532:	1b92      	subs	r2, r2, r6
 8009534:	6122      	str	r2, [r4, #16]
 8009536:	464b      	mov	r3, r9
 8009538:	4621      	mov	r1, r4
 800953a:	4640      	mov	r0, r8
 800953c:	f8cd a000 	str.w	sl, [sp]
 8009540:	aa03      	add	r2, sp, #12
 8009542:	f7ff fedf 	bl	8009304 <_printf_common>
 8009546:	3001      	adds	r0, #1
 8009548:	d14c      	bne.n	80095e4 <_printf_i+0x200>
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	b004      	add	sp, #16
 8009550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009554:	4834      	ldr	r0, [pc, #208]	; (8009628 <_printf_i+0x244>)
 8009556:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800955a:	680e      	ldr	r6, [r1, #0]
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009562:	061f      	lsls	r7, r3, #24
 8009564:	600e      	str	r6, [r1, #0]
 8009566:	d514      	bpl.n	8009592 <_printf_i+0x1ae>
 8009568:	07d9      	lsls	r1, r3, #31
 800956a:	bf44      	itt	mi
 800956c:	f043 0320 	orrmi.w	r3, r3, #32
 8009570:	6023      	strmi	r3, [r4, #0]
 8009572:	b91d      	cbnz	r5, 800957c <_printf_i+0x198>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	f023 0320 	bic.w	r3, r3, #32
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	2310      	movs	r3, #16
 800957e:	e7af      	b.n	80094e0 <_printf_i+0xfc>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	f043 0320 	orr.w	r3, r3, #32
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	2378      	movs	r3, #120	; 0x78
 800958a:	4828      	ldr	r0, [pc, #160]	; (800962c <_printf_i+0x248>)
 800958c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009590:	e7e3      	b.n	800955a <_printf_i+0x176>
 8009592:	065e      	lsls	r6, r3, #25
 8009594:	bf48      	it	mi
 8009596:	b2ad      	uxthmi	r5, r5
 8009598:	e7e6      	b.n	8009568 <_printf_i+0x184>
 800959a:	4616      	mov	r6, r2
 800959c:	e7bb      	b.n	8009516 <_printf_i+0x132>
 800959e:	680b      	ldr	r3, [r1, #0]
 80095a0:	6826      	ldr	r6, [r4, #0]
 80095a2:	1d1d      	adds	r5, r3, #4
 80095a4:	6960      	ldr	r0, [r4, #20]
 80095a6:	600d      	str	r5, [r1, #0]
 80095a8:	0635      	lsls	r5, r6, #24
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	d501      	bpl.n	80095b2 <_printf_i+0x1ce>
 80095ae:	6018      	str	r0, [r3, #0]
 80095b0:	e002      	b.n	80095b8 <_printf_i+0x1d4>
 80095b2:	0671      	lsls	r1, r6, #25
 80095b4:	d5fb      	bpl.n	80095ae <_printf_i+0x1ca>
 80095b6:	8018      	strh	r0, [r3, #0]
 80095b8:	2300      	movs	r3, #0
 80095ba:	4616      	mov	r6, r2
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	e7ba      	b.n	8009536 <_printf_i+0x152>
 80095c0:	680b      	ldr	r3, [r1, #0]
 80095c2:	1d1a      	adds	r2, r3, #4
 80095c4:	600a      	str	r2, [r1, #0]
 80095c6:	681e      	ldr	r6, [r3, #0]
 80095c8:	2100      	movs	r1, #0
 80095ca:	4630      	mov	r0, r6
 80095cc:	6862      	ldr	r2, [r4, #4]
 80095ce:	f002 fe31 	bl	800c234 <memchr>
 80095d2:	b108      	cbz	r0, 80095d8 <_printf_i+0x1f4>
 80095d4:	1b80      	subs	r0, r0, r6
 80095d6:	6060      	str	r0, [r4, #4]
 80095d8:	6863      	ldr	r3, [r4, #4]
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	2300      	movs	r3, #0
 80095de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e2:	e7a8      	b.n	8009536 <_printf_i+0x152>
 80095e4:	4632      	mov	r2, r6
 80095e6:	4649      	mov	r1, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	47d0      	blx	sl
 80095ee:	3001      	adds	r0, #1
 80095f0:	d0ab      	beq.n	800954a <_printf_i+0x166>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	079b      	lsls	r3, r3, #30
 80095f6:	d413      	bmi.n	8009620 <_printf_i+0x23c>
 80095f8:	68e0      	ldr	r0, [r4, #12]
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	4298      	cmp	r0, r3
 80095fe:	bfb8      	it	lt
 8009600:	4618      	movlt	r0, r3
 8009602:	e7a4      	b.n	800954e <_printf_i+0x16a>
 8009604:	2301      	movs	r3, #1
 8009606:	4632      	mov	r2, r6
 8009608:	4649      	mov	r1, r9
 800960a:	4640      	mov	r0, r8
 800960c:	47d0      	blx	sl
 800960e:	3001      	adds	r0, #1
 8009610:	d09b      	beq.n	800954a <_printf_i+0x166>
 8009612:	3501      	adds	r5, #1
 8009614:	68e3      	ldr	r3, [r4, #12]
 8009616:	9903      	ldr	r1, [sp, #12]
 8009618:	1a5b      	subs	r3, r3, r1
 800961a:	42ab      	cmp	r3, r5
 800961c:	dcf2      	bgt.n	8009604 <_printf_i+0x220>
 800961e:	e7eb      	b.n	80095f8 <_printf_i+0x214>
 8009620:	2500      	movs	r5, #0
 8009622:	f104 0619 	add.w	r6, r4, #25
 8009626:	e7f5      	b.n	8009614 <_printf_i+0x230>
 8009628:	08010407 	.word	0x08010407
 800962c:	08010418 	.word	0x08010418

08009630 <_scanf_float>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	b087      	sub	sp, #28
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	688b      	ldr	r3, [r1, #8]
 800963a:	4617      	mov	r7, r2
 800963c:	1e5a      	subs	r2, r3, #1
 800963e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009642:	bf85      	ittet	hi
 8009644:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009648:	195b      	addhi	r3, r3, r5
 800964a:	2300      	movls	r3, #0
 800964c:	9302      	strhi	r3, [sp, #8]
 800964e:	bf88      	it	hi
 8009650:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009654:	468b      	mov	fp, r1
 8009656:	f04f 0500 	mov.w	r5, #0
 800965a:	bf8c      	ite	hi
 800965c:	608b      	strhi	r3, [r1, #8]
 800965e:	9302      	strls	r3, [sp, #8]
 8009660:	680b      	ldr	r3, [r1, #0]
 8009662:	4680      	mov	r8, r0
 8009664:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009668:	f84b 3b1c 	str.w	r3, [fp], #28
 800966c:	460c      	mov	r4, r1
 800966e:	465e      	mov	r6, fp
 8009670:	46aa      	mov	sl, r5
 8009672:	46a9      	mov	r9, r5
 8009674:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009678:	9501      	str	r5, [sp, #4]
 800967a:	68a2      	ldr	r2, [r4, #8]
 800967c:	b152      	cbz	r2, 8009694 <_scanf_float+0x64>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b4e      	cmp	r3, #78	; 0x4e
 8009684:	d864      	bhi.n	8009750 <_scanf_float+0x120>
 8009686:	2b40      	cmp	r3, #64	; 0x40
 8009688:	d83c      	bhi.n	8009704 <_scanf_float+0xd4>
 800968a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800968e:	b2c8      	uxtb	r0, r1
 8009690:	280e      	cmp	r0, #14
 8009692:	d93a      	bls.n	800970a <_scanf_float+0xda>
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	d003      	beq.n	80096a2 <_scanf_float+0x72>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096a6:	f1ba 0f01 	cmp.w	sl, #1
 80096aa:	f200 8113 	bhi.w	80098d4 <_scanf_float+0x2a4>
 80096ae:	455e      	cmp	r6, fp
 80096b0:	f200 8105 	bhi.w	80098be <_scanf_float+0x28e>
 80096b4:	2501      	movs	r5, #1
 80096b6:	4628      	mov	r0, r5
 80096b8:	b007      	add	sp, #28
 80096ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80096c2:	2a0d      	cmp	r2, #13
 80096c4:	d8e6      	bhi.n	8009694 <_scanf_float+0x64>
 80096c6:	a101      	add	r1, pc, #4	; (adr r1, 80096cc <_scanf_float+0x9c>)
 80096c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096cc:	0800980b 	.word	0x0800980b
 80096d0:	08009695 	.word	0x08009695
 80096d4:	08009695 	.word	0x08009695
 80096d8:	08009695 	.word	0x08009695
 80096dc:	0800986b 	.word	0x0800986b
 80096e0:	08009843 	.word	0x08009843
 80096e4:	08009695 	.word	0x08009695
 80096e8:	08009695 	.word	0x08009695
 80096ec:	08009819 	.word	0x08009819
 80096f0:	08009695 	.word	0x08009695
 80096f4:	08009695 	.word	0x08009695
 80096f8:	08009695 	.word	0x08009695
 80096fc:	08009695 	.word	0x08009695
 8009700:	080097d1 	.word	0x080097d1
 8009704:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009708:	e7db      	b.n	80096c2 <_scanf_float+0x92>
 800970a:	290e      	cmp	r1, #14
 800970c:	d8c2      	bhi.n	8009694 <_scanf_float+0x64>
 800970e:	a001      	add	r0, pc, #4	; (adr r0, 8009714 <_scanf_float+0xe4>)
 8009710:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009714:	080097c3 	.word	0x080097c3
 8009718:	08009695 	.word	0x08009695
 800971c:	080097c3 	.word	0x080097c3
 8009720:	08009857 	.word	0x08009857
 8009724:	08009695 	.word	0x08009695
 8009728:	08009771 	.word	0x08009771
 800972c:	080097ad 	.word	0x080097ad
 8009730:	080097ad 	.word	0x080097ad
 8009734:	080097ad 	.word	0x080097ad
 8009738:	080097ad 	.word	0x080097ad
 800973c:	080097ad 	.word	0x080097ad
 8009740:	080097ad 	.word	0x080097ad
 8009744:	080097ad 	.word	0x080097ad
 8009748:	080097ad 	.word	0x080097ad
 800974c:	080097ad 	.word	0x080097ad
 8009750:	2b6e      	cmp	r3, #110	; 0x6e
 8009752:	d809      	bhi.n	8009768 <_scanf_float+0x138>
 8009754:	2b60      	cmp	r3, #96	; 0x60
 8009756:	d8b2      	bhi.n	80096be <_scanf_float+0x8e>
 8009758:	2b54      	cmp	r3, #84	; 0x54
 800975a:	d077      	beq.n	800984c <_scanf_float+0x21c>
 800975c:	2b59      	cmp	r3, #89	; 0x59
 800975e:	d199      	bne.n	8009694 <_scanf_float+0x64>
 8009760:	2d07      	cmp	r5, #7
 8009762:	d197      	bne.n	8009694 <_scanf_float+0x64>
 8009764:	2508      	movs	r5, #8
 8009766:	e029      	b.n	80097bc <_scanf_float+0x18c>
 8009768:	2b74      	cmp	r3, #116	; 0x74
 800976a:	d06f      	beq.n	800984c <_scanf_float+0x21c>
 800976c:	2b79      	cmp	r3, #121	; 0x79
 800976e:	e7f6      	b.n	800975e <_scanf_float+0x12e>
 8009770:	6821      	ldr	r1, [r4, #0]
 8009772:	05c8      	lsls	r0, r1, #23
 8009774:	d51a      	bpl.n	80097ac <_scanf_float+0x17c>
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800977c:	6021      	str	r1, [r4, #0]
 800977e:	f109 0901 	add.w	r9, r9, #1
 8009782:	b11b      	cbz	r3, 800978c <_scanf_float+0x15c>
 8009784:	3b01      	subs	r3, #1
 8009786:	3201      	adds	r2, #1
 8009788:	9302      	str	r3, [sp, #8]
 800978a:	60a2      	str	r2, [r4, #8]
 800978c:	68a3      	ldr	r3, [r4, #8]
 800978e:	3b01      	subs	r3, #1
 8009790:	60a3      	str	r3, [r4, #8]
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	3301      	adds	r3, #1
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3b01      	subs	r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	607b      	str	r3, [r7, #4]
 80097a0:	f340 8084 	ble.w	80098ac <_scanf_float+0x27c>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	603b      	str	r3, [r7, #0]
 80097aa:	e766      	b.n	800967a <_scanf_float+0x4a>
 80097ac:	eb1a 0f05 	cmn.w	sl, r5
 80097b0:	f47f af70 	bne.w	8009694 <_scanf_float+0x64>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80097ba:	6022      	str	r2, [r4, #0]
 80097bc:	f806 3b01 	strb.w	r3, [r6], #1
 80097c0:	e7e4      	b.n	800978c <_scanf_float+0x15c>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	0610      	lsls	r0, r2, #24
 80097c6:	f57f af65 	bpl.w	8009694 <_scanf_float+0x64>
 80097ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097ce:	e7f4      	b.n	80097ba <_scanf_float+0x18a>
 80097d0:	f1ba 0f00 	cmp.w	sl, #0
 80097d4:	d10e      	bne.n	80097f4 <_scanf_float+0x1c4>
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	d10e      	bne.n	80097fa <_scanf_float+0x1ca>
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097e6:	d108      	bne.n	80097fa <_scanf_float+0x1ca>
 80097e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097ec:	f04f 0a01 	mov.w	sl, #1
 80097f0:	6022      	str	r2, [r4, #0]
 80097f2:	e7e3      	b.n	80097bc <_scanf_float+0x18c>
 80097f4:	f1ba 0f02 	cmp.w	sl, #2
 80097f8:	d055      	beq.n	80098a6 <_scanf_float+0x276>
 80097fa:	2d01      	cmp	r5, #1
 80097fc:	d002      	beq.n	8009804 <_scanf_float+0x1d4>
 80097fe:	2d04      	cmp	r5, #4
 8009800:	f47f af48 	bne.w	8009694 <_scanf_float+0x64>
 8009804:	3501      	adds	r5, #1
 8009806:	b2ed      	uxtb	r5, r5
 8009808:	e7d8      	b.n	80097bc <_scanf_float+0x18c>
 800980a:	f1ba 0f01 	cmp.w	sl, #1
 800980e:	f47f af41 	bne.w	8009694 <_scanf_float+0x64>
 8009812:	f04f 0a02 	mov.w	sl, #2
 8009816:	e7d1      	b.n	80097bc <_scanf_float+0x18c>
 8009818:	b97d      	cbnz	r5, 800983a <_scanf_float+0x20a>
 800981a:	f1b9 0f00 	cmp.w	r9, #0
 800981e:	f47f af3c 	bne.w	800969a <_scanf_float+0x6a>
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009828:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800982c:	f47f af39 	bne.w	80096a2 <_scanf_float+0x72>
 8009830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009834:	2501      	movs	r5, #1
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	e7c0      	b.n	80097bc <_scanf_float+0x18c>
 800983a:	2d03      	cmp	r5, #3
 800983c:	d0e2      	beq.n	8009804 <_scanf_float+0x1d4>
 800983e:	2d05      	cmp	r5, #5
 8009840:	e7de      	b.n	8009800 <_scanf_float+0x1d0>
 8009842:	2d02      	cmp	r5, #2
 8009844:	f47f af26 	bne.w	8009694 <_scanf_float+0x64>
 8009848:	2503      	movs	r5, #3
 800984a:	e7b7      	b.n	80097bc <_scanf_float+0x18c>
 800984c:	2d06      	cmp	r5, #6
 800984e:	f47f af21 	bne.w	8009694 <_scanf_float+0x64>
 8009852:	2507      	movs	r5, #7
 8009854:	e7b2      	b.n	80097bc <_scanf_float+0x18c>
 8009856:	6822      	ldr	r2, [r4, #0]
 8009858:	0591      	lsls	r1, r2, #22
 800985a:	f57f af1b 	bpl.w	8009694 <_scanf_float+0x64>
 800985e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009862:	6022      	str	r2, [r4, #0]
 8009864:	f8cd 9004 	str.w	r9, [sp, #4]
 8009868:	e7a8      	b.n	80097bc <_scanf_float+0x18c>
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009870:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009874:	d006      	beq.n	8009884 <_scanf_float+0x254>
 8009876:	0550      	lsls	r0, r2, #21
 8009878:	f57f af0c 	bpl.w	8009694 <_scanf_float+0x64>
 800987c:	f1b9 0f00 	cmp.w	r9, #0
 8009880:	f43f af0f 	beq.w	80096a2 <_scanf_float+0x72>
 8009884:	0591      	lsls	r1, r2, #22
 8009886:	bf58      	it	pl
 8009888:	9901      	ldrpl	r1, [sp, #4]
 800988a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800988e:	bf58      	it	pl
 8009890:	eba9 0101 	subpl.w	r1, r9, r1
 8009894:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009898:	f04f 0900 	mov.w	r9, #0
 800989c:	bf58      	it	pl
 800989e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098a2:	6022      	str	r2, [r4, #0]
 80098a4:	e78a      	b.n	80097bc <_scanf_float+0x18c>
 80098a6:	f04f 0a03 	mov.w	sl, #3
 80098aa:	e787      	b.n	80097bc <_scanf_float+0x18c>
 80098ac:	4639      	mov	r1, r7
 80098ae:	4640      	mov	r0, r8
 80098b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098b4:	4798      	blx	r3
 80098b6:	2800      	cmp	r0, #0
 80098b8:	f43f aedf 	beq.w	800967a <_scanf_float+0x4a>
 80098bc:	e6ea      	b.n	8009694 <_scanf_float+0x64>
 80098be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098c2:	463a      	mov	r2, r7
 80098c4:	4640      	mov	r0, r8
 80098c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098ca:	4798      	blx	r3
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	e6ec      	b.n	80096ae <_scanf_float+0x7e>
 80098d4:	1e6b      	subs	r3, r5, #1
 80098d6:	2b06      	cmp	r3, #6
 80098d8:	d825      	bhi.n	8009926 <_scanf_float+0x2f6>
 80098da:	2d02      	cmp	r5, #2
 80098dc:	d836      	bhi.n	800994c <_scanf_float+0x31c>
 80098de:	455e      	cmp	r6, fp
 80098e0:	f67f aee8 	bls.w	80096b4 <_scanf_float+0x84>
 80098e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098e8:	463a      	mov	r2, r7
 80098ea:	4640      	mov	r0, r8
 80098ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098f0:	4798      	blx	r3
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	e7f1      	b.n	80098de <_scanf_float+0x2ae>
 80098fa:	9802      	ldr	r0, [sp, #8]
 80098fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009900:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009904:	463a      	mov	r2, r7
 8009906:	9002      	str	r0, [sp, #8]
 8009908:	4640      	mov	r0, r8
 800990a:	4798      	blx	r3
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	3b01      	subs	r3, #1
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009916:	fa5f fa8a 	uxtb.w	sl, sl
 800991a:	f1ba 0f02 	cmp.w	sl, #2
 800991e:	d1ec      	bne.n	80098fa <_scanf_float+0x2ca>
 8009920:	3d03      	subs	r5, #3
 8009922:	b2ed      	uxtb	r5, r5
 8009924:	1b76      	subs	r6, r6, r5
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	05da      	lsls	r2, r3, #23
 800992a:	d52f      	bpl.n	800998c <_scanf_float+0x35c>
 800992c:	055b      	lsls	r3, r3, #21
 800992e:	d510      	bpl.n	8009952 <_scanf_float+0x322>
 8009930:	455e      	cmp	r6, fp
 8009932:	f67f aebf 	bls.w	80096b4 <_scanf_float+0x84>
 8009936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800993a:	463a      	mov	r2, r7
 800993c:	4640      	mov	r0, r8
 800993e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009942:	4798      	blx	r3
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	3b01      	subs	r3, #1
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	e7f1      	b.n	8009930 <_scanf_float+0x300>
 800994c:	46aa      	mov	sl, r5
 800994e:	9602      	str	r6, [sp, #8]
 8009950:	e7df      	b.n	8009912 <_scanf_float+0x2e2>
 8009952:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	2965      	cmp	r1, #101	; 0x65
 800995a:	f103 33ff 	add.w	r3, r3, #4294967295
 800995e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	d00c      	beq.n	8009980 <_scanf_float+0x350>
 8009966:	2945      	cmp	r1, #69	; 0x45
 8009968:	d00a      	beq.n	8009980 <_scanf_float+0x350>
 800996a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800996e:	463a      	mov	r2, r7
 8009970:	4640      	mov	r0, r8
 8009972:	4798      	blx	r3
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800997a:	3b01      	subs	r3, #1
 800997c:	1eb5      	subs	r5, r6, #2
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	463a      	mov	r2, r7
 8009982:	4640      	mov	r0, r8
 8009984:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009988:	4798      	blx	r3
 800998a:	462e      	mov	r6, r5
 800998c:	6825      	ldr	r5, [r4, #0]
 800998e:	f015 0510 	ands.w	r5, r5, #16
 8009992:	d159      	bne.n	8009a48 <_scanf_float+0x418>
 8009994:	7035      	strb	r5, [r6, #0]
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800999c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a0:	d11c      	bne.n	80099dc <_scanf_float+0x3ac>
 80099a2:	9b01      	ldr	r3, [sp, #4]
 80099a4:	454b      	cmp	r3, r9
 80099a6:	eba3 0209 	sub.w	r2, r3, r9
 80099aa:	d124      	bne.n	80099f6 <_scanf_float+0x3c6>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4659      	mov	r1, fp
 80099b0:	4640      	mov	r0, r8
 80099b2:	f000 fe99 	bl	800a6e8 <_strtod_r>
 80099b6:	f8d4 c000 	ldr.w	ip, [r4]
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	f01c 0f02 	tst.w	ip, #2
 80099c0:	4606      	mov	r6, r0
 80099c2:	460f      	mov	r7, r1
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	d021      	beq.n	8009a0c <_scanf_float+0x3dc>
 80099c8:	9903      	ldr	r1, [sp, #12]
 80099ca:	1d1a      	adds	r2, r3, #4
 80099cc:	600a      	str	r2, [r1, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	e9c3 6700 	strd	r6, r7, [r3]
 80099d4:	68e3      	ldr	r3, [r4, #12]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60e3      	str	r3, [r4, #12]
 80099da:	e66c      	b.n	80096b6 <_scanf_float+0x86>
 80099dc:	9b04      	ldr	r3, [sp, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0e4      	beq.n	80099ac <_scanf_float+0x37c>
 80099e2:	9905      	ldr	r1, [sp, #20]
 80099e4:	230a      	movs	r3, #10
 80099e6:	462a      	mov	r2, r5
 80099e8:	4640      	mov	r0, r8
 80099ea:	3101      	adds	r1, #1
 80099ec:	f000 ff08 	bl	800a800 <_strtol_r>
 80099f0:	9b04      	ldr	r3, [sp, #16]
 80099f2:	9e05      	ldr	r6, [sp, #20]
 80099f4:	1ac2      	subs	r2, r0, r3
 80099f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80099fa:	429e      	cmp	r6, r3
 80099fc:	bf28      	it	cs
 80099fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009a02:	4630      	mov	r0, r6
 8009a04:	4911      	ldr	r1, [pc, #68]	; (8009a4c <_scanf_float+0x41c>)
 8009a06:	f000 f839 	bl	8009a7c <siprintf>
 8009a0a:	e7cf      	b.n	80099ac <_scanf_float+0x37c>
 8009a0c:	f01c 0f04 	tst.w	ip, #4
 8009a10:	f103 0e04 	add.w	lr, r3, #4
 8009a14:	d003      	beq.n	8009a1e <_scanf_float+0x3ee>
 8009a16:	9903      	ldr	r1, [sp, #12]
 8009a18:	f8c1 e000 	str.w	lr, [r1]
 8009a1c:	e7d7      	b.n	80099ce <_scanf_float+0x39e>
 8009a1e:	9a03      	ldr	r2, [sp, #12]
 8009a20:	f8c2 e000 	str.w	lr, [r2]
 8009a24:	f8d3 8000 	ldr.w	r8, [r3]
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	f7f6 ffee 	bl	8000a0c <__aeabi_dcmpun>
 8009a30:	b128      	cbz	r0, 8009a3e <_scanf_float+0x40e>
 8009a32:	4807      	ldr	r0, [pc, #28]	; (8009a50 <_scanf_float+0x420>)
 8009a34:	f000 f81e 	bl	8009a74 <nanf>
 8009a38:	f8c8 0000 	str.w	r0, [r8]
 8009a3c:	e7ca      	b.n	80099d4 <_scanf_float+0x3a4>
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f7 f841 	bl	8000ac8 <__aeabi_d2f>
 8009a46:	e7f7      	b.n	8009a38 <_scanf_float+0x408>
 8009a48:	2500      	movs	r5, #0
 8009a4a:	e634      	b.n	80096b6 <_scanf_float+0x86>
 8009a4c:	08010429 	.word	0x08010429
 8009a50:	080103dd 	.word	0x080103dd

08009a54 <_sbrk_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	2300      	movs	r3, #0
 8009a58:	4d05      	ldr	r5, [pc, #20]	; (8009a70 <_sbrk_r+0x1c>)
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	f7fb fafe 	bl	8005060 <_sbrk>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_sbrk_r+0x1a>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_sbrk_r+0x1a>
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	200005f8 	.word	0x200005f8

08009a74 <nanf>:
 8009a74:	4800      	ldr	r0, [pc, #0]	; (8009a78 <nanf+0x4>)
 8009a76:	4770      	bx	lr
 8009a78:	7fc00000 	.word	0x7fc00000

08009a7c <siprintf>:
 8009a7c:	b40e      	push	{r1, r2, r3}
 8009a7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a82:	b500      	push	{lr}
 8009a84:	b09c      	sub	sp, #112	; 0x70
 8009a86:	ab1d      	add	r3, sp, #116	; 0x74
 8009a88:	9002      	str	r0, [sp, #8]
 8009a8a:	9006      	str	r0, [sp, #24]
 8009a8c:	9107      	str	r1, [sp, #28]
 8009a8e:	9104      	str	r1, [sp, #16]
 8009a90:	4808      	ldr	r0, [pc, #32]	; (8009ab4 <siprintf+0x38>)
 8009a92:	4909      	ldr	r1, [pc, #36]	; (8009ab8 <siprintf+0x3c>)
 8009a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a98:	9105      	str	r1, [sp, #20]
 8009a9a:	6800      	ldr	r0, [r0, #0]
 8009a9c:	a902      	add	r1, sp, #8
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	f003 f944 	bl	800cd2c <_svfiprintf_r>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	9b02      	ldr	r3, [sp, #8]
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	b01c      	add	sp, #112	; 0x70
 8009aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab0:	b003      	add	sp, #12
 8009ab2:	4770      	bx	lr
 8009ab4:	2000000c 	.word	0x2000000c
 8009ab8:	ffff0208 	.word	0xffff0208

08009abc <sulp>:
 8009abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	4690      	mov	r8, r2
 8009ac4:	f002 ff5a 	bl	800c97c <__ulp>
 8009ac8:	4604      	mov	r4, r0
 8009aca:	460d      	mov	r5, r1
 8009acc:	f1b8 0f00 	cmp.w	r8, #0
 8009ad0:	d011      	beq.n	8009af6 <sulp+0x3a>
 8009ad2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009ad6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	dd0b      	ble.n	8009af6 <sulp+0x3a>
 8009ade:	2400      	movs	r4, #0
 8009ae0:	051b      	lsls	r3, r3, #20
 8009ae2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009ae6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	f7f6 fcf3 	bl	80004d8 <__aeabi_dmul>
 8009af2:	4604      	mov	r4, r0
 8009af4:	460d      	mov	r5, r1
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009b00 <_strtod_l>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	469b      	mov	fp, r3
 8009b06:	2300      	movs	r3, #0
 8009b08:	b0a1      	sub	sp, #132	; 0x84
 8009b0a:	931c      	str	r3, [sp, #112]	; 0x70
 8009b0c:	4ba1      	ldr	r3, [pc, #644]	; (8009d94 <_strtod_l+0x294>)
 8009b0e:	4682      	mov	sl, r0
 8009b10:	681f      	ldr	r7, [r3, #0]
 8009b12:	460e      	mov	r6, r1
 8009b14:	4638      	mov	r0, r7
 8009b16:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b18:	f7f6 fb1a 	bl	8000150 <strlen>
 8009b1c:	f04f 0800 	mov.w	r8, #0
 8009b20:	4604      	mov	r4, r0
 8009b22:	f04f 0900 	mov.w	r9, #0
 8009b26:	961b      	str	r6, [sp, #108]	; 0x6c
 8009b28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	2a2b      	cmp	r2, #43	; 0x2b
 8009b2e:	d04c      	beq.n	8009bca <_strtod_l+0xca>
 8009b30:	d83a      	bhi.n	8009ba8 <_strtod_l+0xa8>
 8009b32:	2a0d      	cmp	r2, #13
 8009b34:	d833      	bhi.n	8009b9e <_strtod_l+0x9e>
 8009b36:	2a08      	cmp	r2, #8
 8009b38:	d833      	bhi.n	8009ba2 <_strtod_l+0xa2>
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	d03d      	beq.n	8009bba <_strtod_l+0xba>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	930c      	str	r3, [sp, #48]	; 0x30
 8009b42:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009b44:	782b      	ldrb	r3, [r5, #0]
 8009b46:	2b30      	cmp	r3, #48	; 0x30
 8009b48:	f040 80af 	bne.w	8009caa <_strtod_l+0x1aa>
 8009b4c:	786b      	ldrb	r3, [r5, #1]
 8009b4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b52:	2b58      	cmp	r3, #88	; 0x58
 8009b54:	d16c      	bne.n	8009c30 <_strtod_l+0x130>
 8009b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b58:	4650      	mov	r0, sl
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	ab1c      	add	r3, sp, #112	; 0x70
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	4a8d      	ldr	r2, [pc, #564]	; (8009d98 <_strtod_l+0x298>)
 8009b62:	f8cd b008 	str.w	fp, [sp, #8]
 8009b66:	ab1d      	add	r3, sp, #116	; 0x74
 8009b68:	a91b      	add	r1, sp, #108	; 0x6c
 8009b6a:	f001 ffe7 	bl	800bb3c <__gethex>
 8009b6e:	f010 0607 	ands.w	r6, r0, #7
 8009b72:	4604      	mov	r4, r0
 8009b74:	d005      	beq.n	8009b82 <_strtod_l+0x82>
 8009b76:	2e06      	cmp	r6, #6
 8009b78:	d129      	bne.n	8009bce <_strtod_l+0xce>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	951b      	str	r5, [sp, #108]	; 0x6c
 8009b80:	930c      	str	r3, [sp, #48]	; 0x30
 8009b82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 8596 	bne.w	800a6b6 <_strtod_l+0xbb6>
 8009b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b8c:	b1d3      	cbz	r3, 8009bc4 <_strtod_l+0xc4>
 8009b8e:	4642      	mov	r2, r8
 8009b90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b94:	4610      	mov	r0, r2
 8009b96:	4619      	mov	r1, r3
 8009b98:	b021      	add	sp, #132	; 0x84
 8009b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9e:	2a20      	cmp	r2, #32
 8009ba0:	d1cd      	bne.n	8009b3e <_strtod_l+0x3e>
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ba6:	e7bf      	b.n	8009b28 <_strtod_l+0x28>
 8009ba8:	2a2d      	cmp	r2, #45	; 0x2d
 8009baa:	d1c8      	bne.n	8009b3e <_strtod_l+0x3e>
 8009bac:	2201      	movs	r2, #1
 8009bae:	920c      	str	r2, [sp, #48]	; 0x30
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bb4:	785b      	ldrb	r3, [r3, #1]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1c3      	bne.n	8009b42 <_strtod_l+0x42>
 8009bba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bbc:	961b      	str	r6, [sp, #108]	; 0x6c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f040 8577 	bne.w	800a6b2 <_strtod_l+0xbb2>
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	464b      	mov	r3, r9
 8009bc8:	e7e4      	b.n	8009b94 <_strtod_l+0x94>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	e7ef      	b.n	8009bae <_strtod_l+0xae>
 8009bce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009bd0:	b13a      	cbz	r2, 8009be2 <_strtod_l+0xe2>
 8009bd2:	2135      	movs	r1, #53	; 0x35
 8009bd4:	a81e      	add	r0, sp, #120	; 0x78
 8009bd6:	f002 ffd5 	bl	800cb84 <__copybits>
 8009bda:	4650      	mov	r0, sl
 8009bdc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bde:	f002 fb9d 	bl	800c31c <_Bfree>
 8009be2:	3e01      	subs	r6, #1
 8009be4:	2e05      	cmp	r6, #5
 8009be6:	d807      	bhi.n	8009bf8 <_strtod_l+0xf8>
 8009be8:	e8df f006 	tbb	[pc, r6]
 8009bec:	1d180b0e 	.word	0x1d180b0e
 8009bf0:	030e      	.short	0x030e
 8009bf2:	f04f 0900 	mov.w	r9, #0
 8009bf6:	46c8      	mov	r8, r9
 8009bf8:	0721      	lsls	r1, r4, #28
 8009bfa:	d5c2      	bpl.n	8009b82 <_strtod_l+0x82>
 8009bfc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009c00:	e7bf      	b.n	8009b82 <_strtod_l+0x82>
 8009c02:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8009c06:	e7f7      	b.n	8009bf8 <_strtod_l+0xf8>
 8009c08:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009c0a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009c0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c16:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009c1a:	e7ed      	b.n	8009bf8 <_strtod_l+0xf8>
 8009c1c:	f04f 0800 	mov.w	r8, #0
 8009c20:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009d9c <_strtod_l+0x29c>
 8009c24:	e7e8      	b.n	8009bf8 <_strtod_l+0xf8>
 8009c26:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c2a:	f04f 38ff 	mov.w	r8, #4294967295
 8009c2e:	e7e3      	b.n	8009bf8 <_strtod_l+0xf8>
 8009c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c36:	785b      	ldrb	r3, [r3, #1]
 8009c38:	2b30      	cmp	r3, #48	; 0x30
 8009c3a:	d0f9      	beq.n	8009c30 <_strtod_l+0x130>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0a0      	beq.n	8009b82 <_strtod_l+0x82>
 8009c40:	2301      	movs	r3, #1
 8009c42:	9307      	str	r3, [sp, #28]
 8009c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c46:	220a      	movs	r2, #10
 8009c48:	9308      	str	r3, [sp, #32]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	469b      	mov	fp, r3
 8009c4e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009c52:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009c54:	7805      	ldrb	r5, [r0, #0]
 8009c56:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009c5a:	b2d9      	uxtb	r1, r3
 8009c5c:	2909      	cmp	r1, #9
 8009c5e:	d926      	bls.n	8009cae <_strtod_l+0x1ae>
 8009c60:	4622      	mov	r2, r4
 8009c62:	4639      	mov	r1, r7
 8009c64:	f003 f9ef 	bl	800d046 <strncmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d032      	beq.n	8009cd2 <_strtod_l+0x1d2>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	462b      	mov	r3, r5
 8009c70:	465c      	mov	r4, fp
 8009c72:	4602      	mov	r2, r0
 8009c74:	9004      	str	r0, [sp, #16]
 8009c76:	2b65      	cmp	r3, #101	; 0x65
 8009c78:	d001      	beq.n	8009c7e <_strtod_l+0x17e>
 8009c7a:	2b45      	cmp	r3, #69	; 0x45
 8009c7c:	d113      	bne.n	8009ca6 <_strtod_l+0x1a6>
 8009c7e:	b91c      	cbnz	r4, 8009c88 <_strtod_l+0x188>
 8009c80:	9b07      	ldr	r3, [sp, #28]
 8009c82:	4303      	orrs	r3, r0
 8009c84:	d099      	beq.n	8009bba <_strtod_l+0xba>
 8009c86:	2400      	movs	r4, #0
 8009c88:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009c8a:	1c73      	adds	r3, r6, #1
 8009c8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c8e:	7873      	ldrb	r3, [r6, #1]
 8009c90:	2b2b      	cmp	r3, #43	; 0x2b
 8009c92:	d078      	beq.n	8009d86 <_strtod_l+0x286>
 8009c94:	2b2d      	cmp	r3, #45	; 0x2d
 8009c96:	d07b      	beq.n	8009d90 <_strtod_l+0x290>
 8009c98:	2700      	movs	r7, #0
 8009c9a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009c9e:	2909      	cmp	r1, #9
 8009ca0:	f240 8082 	bls.w	8009da8 <_strtod_l+0x2a8>
 8009ca4:	961b      	str	r6, [sp, #108]	; 0x6c
 8009ca6:	2500      	movs	r5, #0
 8009ca8:	e09e      	b.n	8009de8 <_strtod_l+0x2e8>
 8009caa:	2300      	movs	r3, #0
 8009cac:	e7c9      	b.n	8009c42 <_strtod_l+0x142>
 8009cae:	f1bb 0f08 	cmp.w	fp, #8
 8009cb2:	bfd5      	itete	le
 8009cb4:	9906      	ldrle	r1, [sp, #24]
 8009cb6:	9905      	ldrgt	r1, [sp, #20]
 8009cb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cbc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009cc0:	f100 0001 	add.w	r0, r0, #1
 8009cc4:	bfd4      	ite	le
 8009cc6:	9306      	strle	r3, [sp, #24]
 8009cc8:	9305      	strgt	r3, [sp, #20]
 8009cca:	f10b 0b01 	add.w	fp, fp, #1
 8009cce:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cd0:	e7bf      	b.n	8009c52 <_strtod_l+0x152>
 8009cd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cd4:	191a      	adds	r2, r3, r4
 8009cd6:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cd8:	5d1b      	ldrb	r3, [r3, r4]
 8009cda:	f1bb 0f00 	cmp.w	fp, #0
 8009cde:	d036      	beq.n	8009d4e <_strtod_l+0x24e>
 8009ce0:	465c      	mov	r4, fp
 8009ce2:	9004      	str	r0, [sp, #16]
 8009ce4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ce8:	2a09      	cmp	r2, #9
 8009cea:	d912      	bls.n	8009d12 <_strtod_l+0x212>
 8009cec:	2201      	movs	r2, #1
 8009cee:	e7c2      	b.n	8009c76 <_strtod_l+0x176>
 8009cf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b30      	cmp	r3, #48	; 0x30
 8009cfc:	d0f8      	beq.n	8009cf0 <_strtod_l+0x1f0>
 8009cfe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009d02:	2a08      	cmp	r2, #8
 8009d04:	f200 84dc 	bhi.w	800a6c0 <_strtod_l+0xbc0>
 8009d08:	9004      	str	r0, [sp, #16]
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d10:	9208      	str	r2, [sp, #32]
 8009d12:	3b30      	subs	r3, #48	; 0x30
 8009d14:	f100 0201 	add.w	r2, r0, #1
 8009d18:	d013      	beq.n	8009d42 <_strtod_l+0x242>
 8009d1a:	9904      	ldr	r1, [sp, #16]
 8009d1c:	1905      	adds	r5, r0, r4
 8009d1e:	4411      	add	r1, r2
 8009d20:	9104      	str	r1, [sp, #16]
 8009d22:	4622      	mov	r2, r4
 8009d24:	210a      	movs	r1, #10
 8009d26:	42aa      	cmp	r2, r5
 8009d28:	d113      	bne.n	8009d52 <_strtod_l+0x252>
 8009d2a:	1822      	adds	r2, r4, r0
 8009d2c:	2a08      	cmp	r2, #8
 8009d2e:	f104 0401 	add.w	r4, r4, #1
 8009d32:	4404      	add	r4, r0
 8009d34:	dc1b      	bgt.n	8009d6e <_strtod_l+0x26e>
 8009d36:	220a      	movs	r2, #10
 8009d38:	9906      	ldr	r1, [sp, #24]
 8009d3a:	fb02 3301 	mla	r3, r2, r1, r3
 8009d3e:	9306      	str	r3, [sp, #24]
 8009d40:	2200      	movs	r2, #0
 8009d42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d44:	4610      	mov	r0, r2
 8009d46:	1c59      	adds	r1, r3, #1
 8009d48:	911b      	str	r1, [sp, #108]	; 0x6c
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	e7ca      	b.n	8009ce4 <_strtod_l+0x1e4>
 8009d4e:	4658      	mov	r0, fp
 8009d50:	e7d3      	b.n	8009cfa <_strtod_l+0x1fa>
 8009d52:	2a08      	cmp	r2, #8
 8009d54:	dc04      	bgt.n	8009d60 <_strtod_l+0x260>
 8009d56:	9f06      	ldr	r7, [sp, #24]
 8009d58:	434f      	muls	r7, r1
 8009d5a:	9706      	str	r7, [sp, #24]
 8009d5c:	3201      	adds	r2, #1
 8009d5e:	e7e2      	b.n	8009d26 <_strtod_l+0x226>
 8009d60:	1c57      	adds	r7, r2, #1
 8009d62:	2f10      	cmp	r7, #16
 8009d64:	bfde      	ittt	le
 8009d66:	9f05      	ldrle	r7, [sp, #20]
 8009d68:	434f      	mulle	r7, r1
 8009d6a:	9705      	strle	r7, [sp, #20]
 8009d6c:	e7f6      	b.n	8009d5c <_strtod_l+0x25c>
 8009d6e:	2c10      	cmp	r4, #16
 8009d70:	bfdf      	itttt	le
 8009d72:	220a      	movle	r2, #10
 8009d74:	9905      	ldrle	r1, [sp, #20]
 8009d76:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d7a:	9305      	strle	r3, [sp, #20]
 8009d7c:	e7e0      	b.n	8009d40 <_strtod_l+0x240>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2201      	movs	r2, #1
 8009d82:	9304      	str	r3, [sp, #16]
 8009d84:	e77c      	b.n	8009c80 <_strtod_l+0x180>
 8009d86:	2700      	movs	r7, #0
 8009d88:	1cb3      	adds	r3, r6, #2
 8009d8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d8c:	78b3      	ldrb	r3, [r6, #2]
 8009d8e:	e784      	b.n	8009c9a <_strtod_l+0x19a>
 8009d90:	2701      	movs	r7, #1
 8009d92:	e7f9      	b.n	8009d88 <_strtod_l+0x288>
 8009d94:	080106e4 	.word	0x080106e4
 8009d98:	08010430 	.word	0x08010430
 8009d9c:	7ff00000 	.word	0x7ff00000
 8009da0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009da2:	1c59      	adds	r1, r3, #1
 8009da4:	911b      	str	r1, [sp, #108]	; 0x6c
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b30      	cmp	r3, #48	; 0x30
 8009daa:	d0f9      	beq.n	8009da0 <_strtod_l+0x2a0>
 8009dac:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009db0:	2908      	cmp	r1, #8
 8009db2:	f63f af78 	bhi.w	8009ca6 <_strtod_l+0x1a6>
 8009db6:	f04f 0e0a 	mov.w	lr, #10
 8009dba:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dc4:	1c59      	adds	r1, r3, #1
 8009dc6:	911b      	str	r1, [sp, #108]	; 0x6c
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009dce:	2d09      	cmp	r5, #9
 8009dd0:	d935      	bls.n	8009e3e <_strtod_l+0x33e>
 8009dd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009dd4:	1b49      	subs	r1, r1, r5
 8009dd6:	2908      	cmp	r1, #8
 8009dd8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009ddc:	dc02      	bgt.n	8009de4 <_strtod_l+0x2e4>
 8009dde:	4565      	cmp	r5, ip
 8009de0:	bfa8      	it	ge
 8009de2:	4665      	movge	r5, ip
 8009de4:	b107      	cbz	r7, 8009de8 <_strtod_l+0x2e8>
 8009de6:	426d      	negs	r5, r5
 8009de8:	2c00      	cmp	r4, #0
 8009dea:	d14c      	bne.n	8009e86 <_strtod_l+0x386>
 8009dec:	9907      	ldr	r1, [sp, #28]
 8009dee:	4301      	orrs	r1, r0
 8009df0:	f47f aec7 	bne.w	8009b82 <_strtod_l+0x82>
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	f47f aee0 	bne.w	8009bba <_strtod_l+0xba>
 8009dfa:	2b69      	cmp	r3, #105	; 0x69
 8009dfc:	d026      	beq.n	8009e4c <_strtod_l+0x34c>
 8009dfe:	dc23      	bgt.n	8009e48 <_strtod_l+0x348>
 8009e00:	2b49      	cmp	r3, #73	; 0x49
 8009e02:	d023      	beq.n	8009e4c <_strtod_l+0x34c>
 8009e04:	2b4e      	cmp	r3, #78	; 0x4e
 8009e06:	f47f aed8 	bne.w	8009bba <_strtod_l+0xba>
 8009e0a:	499c      	ldr	r1, [pc, #624]	; (800a07c <_strtod_l+0x57c>)
 8009e0c:	a81b      	add	r0, sp, #108	; 0x6c
 8009e0e:	f002 f8e3 	bl	800bfd8 <__match>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f43f aed1 	beq.w	8009bba <_strtod_l+0xba>
 8009e18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b28      	cmp	r3, #40	; 0x28
 8009e1e:	d12c      	bne.n	8009e7a <_strtod_l+0x37a>
 8009e20:	4997      	ldr	r1, [pc, #604]	; (800a080 <_strtod_l+0x580>)
 8009e22:	aa1e      	add	r2, sp, #120	; 0x78
 8009e24:	a81b      	add	r0, sp, #108	; 0x6c
 8009e26:	f002 f8eb 	bl	800c000 <__hexnan>
 8009e2a:	2805      	cmp	r0, #5
 8009e2c:	d125      	bne.n	8009e7a <_strtod_l+0x37a>
 8009e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e30:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009e34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e3c:	e6a1      	b.n	8009b82 <_strtod_l+0x82>
 8009e3e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8009e42:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009e46:	e7bc      	b.n	8009dc2 <_strtod_l+0x2c2>
 8009e48:	2b6e      	cmp	r3, #110	; 0x6e
 8009e4a:	e7dc      	b.n	8009e06 <_strtod_l+0x306>
 8009e4c:	498d      	ldr	r1, [pc, #564]	; (800a084 <_strtod_l+0x584>)
 8009e4e:	a81b      	add	r0, sp, #108	; 0x6c
 8009e50:	f002 f8c2 	bl	800bfd8 <__match>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f aeb0 	beq.w	8009bba <_strtod_l+0xba>
 8009e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e5c:	498a      	ldr	r1, [pc, #552]	; (800a088 <_strtod_l+0x588>)
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	a81b      	add	r0, sp, #108	; 0x6c
 8009e62:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e64:	f002 f8b8 	bl	800bfd8 <__match>
 8009e68:	b910      	cbnz	r0, 8009e70 <_strtod_l+0x370>
 8009e6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e70:	f04f 0800 	mov.w	r8, #0
 8009e74:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800a098 <_strtod_l+0x598>
 8009e78:	e683      	b.n	8009b82 <_strtod_l+0x82>
 8009e7a:	4884      	ldr	r0, [pc, #528]	; (800a08c <_strtod_l+0x58c>)
 8009e7c:	f003 f856 	bl	800cf2c <nan>
 8009e80:	4680      	mov	r8, r0
 8009e82:	4689      	mov	r9, r1
 8009e84:	e67d      	b.n	8009b82 <_strtod_l+0x82>
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	f1bb 0f00 	cmp.w	fp, #0
 8009e8c:	bf08      	it	eq
 8009e8e:	46a3      	moveq	fp, r4
 8009e90:	1aeb      	subs	r3, r5, r3
 8009e92:	2c10      	cmp	r4, #16
 8009e94:	9806      	ldr	r0, [sp, #24]
 8009e96:	4626      	mov	r6, r4
 8009e98:	9307      	str	r3, [sp, #28]
 8009e9a:	bfa8      	it	ge
 8009e9c:	2610      	movge	r6, #16
 8009e9e:	f7f6 faa1 	bl	80003e4 <__aeabi_ui2d>
 8009ea2:	2c09      	cmp	r4, #9
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4689      	mov	r9, r1
 8009ea8:	dd13      	ble.n	8009ed2 <_strtod_l+0x3d2>
 8009eaa:	4b79      	ldr	r3, [pc, #484]	; (800a090 <_strtod_l+0x590>)
 8009eac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009eb0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009eb4:	f7f6 fb10 	bl	80004d8 <__aeabi_dmul>
 8009eb8:	4680      	mov	r8, r0
 8009eba:	9805      	ldr	r0, [sp, #20]
 8009ebc:	4689      	mov	r9, r1
 8009ebe:	f7f6 fa91 	bl	80003e4 <__aeabi_ui2d>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	f7f6 f94f 	bl	800016c <__adddf3>
 8009ece:	4680      	mov	r8, r0
 8009ed0:	4689      	mov	r9, r1
 8009ed2:	2c0f      	cmp	r4, #15
 8009ed4:	dc36      	bgt.n	8009f44 <_strtod_l+0x444>
 8009ed6:	9b07      	ldr	r3, [sp, #28]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f43f ae52 	beq.w	8009b82 <_strtod_l+0x82>
 8009ede:	dd22      	ble.n	8009f26 <_strtod_l+0x426>
 8009ee0:	2b16      	cmp	r3, #22
 8009ee2:	dc09      	bgt.n	8009ef8 <_strtod_l+0x3f8>
 8009ee4:	4c6a      	ldr	r4, [pc, #424]	; (800a090 <_strtod_l+0x590>)
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009eec:	464b      	mov	r3, r9
 8009eee:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009ef2:	f7f6 faf1 	bl	80004d8 <__aeabi_dmul>
 8009ef6:	e7c3      	b.n	8009e80 <_strtod_l+0x380>
 8009ef8:	9a07      	ldr	r2, [sp, #28]
 8009efa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009efe:	4293      	cmp	r3, r2
 8009f00:	db20      	blt.n	8009f44 <_strtod_l+0x444>
 8009f02:	4d63      	ldr	r5, [pc, #396]	; (800a090 <_strtod_l+0x590>)
 8009f04:	f1c4 040f 	rsb	r4, r4, #15
 8009f08:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f12:	464b      	mov	r3, r9
 8009f14:	f7f6 fae0 	bl	80004d8 <__aeabi_dmul>
 8009f18:	9b07      	ldr	r3, [sp, #28]
 8009f1a:	1b1c      	subs	r4, r3, r4
 8009f1c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009f20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f24:	e7e5      	b.n	8009ef2 <_strtod_l+0x3f2>
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	3316      	adds	r3, #22
 8009f2a:	db0b      	blt.n	8009f44 <_strtod_l+0x444>
 8009f2c:	9b04      	ldr	r3, [sp, #16]
 8009f2e:	4a58      	ldr	r2, [pc, #352]	; (800a090 <_strtod_l+0x590>)
 8009f30:	1b5d      	subs	r5, r3, r5
 8009f32:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009f36:	4640      	mov	r0, r8
 8009f38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 fbf5 	bl	800072c <__aeabi_ddiv>
 8009f42:	e79d      	b.n	8009e80 <_strtod_l+0x380>
 8009f44:	9b07      	ldr	r3, [sp, #28]
 8009f46:	1ba6      	subs	r6, r4, r6
 8009f48:	441e      	add	r6, r3
 8009f4a:	2e00      	cmp	r6, #0
 8009f4c:	dd71      	ble.n	800a032 <_strtod_l+0x532>
 8009f4e:	f016 030f 	ands.w	r3, r6, #15
 8009f52:	d00a      	beq.n	8009f6a <_strtod_l+0x46a>
 8009f54:	494e      	ldr	r1, [pc, #312]	; (800a090 <_strtod_l+0x590>)
 8009f56:	4642      	mov	r2, r8
 8009f58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f60:	464b      	mov	r3, r9
 8009f62:	f7f6 fab9 	bl	80004d8 <__aeabi_dmul>
 8009f66:	4680      	mov	r8, r0
 8009f68:	4689      	mov	r9, r1
 8009f6a:	f036 060f 	bics.w	r6, r6, #15
 8009f6e:	d050      	beq.n	800a012 <_strtod_l+0x512>
 8009f70:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009f74:	dd27      	ble.n	8009fc6 <_strtod_l+0x4c6>
 8009f76:	f04f 0b00 	mov.w	fp, #0
 8009f7a:	f8cd b010 	str.w	fp, [sp, #16]
 8009f7e:	f8cd b020 	str.w	fp, [sp, #32]
 8009f82:	f8cd b018 	str.w	fp, [sp, #24]
 8009f86:	2322      	movs	r3, #34	; 0x22
 8009f88:	f04f 0800 	mov.w	r8, #0
 8009f8c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a098 <_strtod_l+0x598>
 8009f90:	f8ca 3000 	str.w	r3, [sl]
 8009f94:	9b08      	ldr	r3, [sp, #32]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f43f adf3 	beq.w	8009b82 <_strtod_l+0x82>
 8009f9c:	4650      	mov	r0, sl
 8009f9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009fa0:	f002 f9bc 	bl	800c31c <_Bfree>
 8009fa4:	4650      	mov	r0, sl
 8009fa6:	9906      	ldr	r1, [sp, #24]
 8009fa8:	f002 f9b8 	bl	800c31c <_Bfree>
 8009fac:	4650      	mov	r0, sl
 8009fae:	9904      	ldr	r1, [sp, #16]
 8009fb0:	f002 f9b4 	bl	800c31c <_Bfree>
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	9908      	ldr	r1, [sp, #32]
 8009fb8:	f002 f9b0 	bl	800c31c <_Bfree>
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	f002 f9ac 	bl	800c31c <_Bfree>
 8009fc4:	e5dd      	b.n	8009b82 <_strtod_l+0x82>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4640      	mov	r0, r8
 8009fca:	4649      	mov	r1, r9
 8009fcc:	461f      	mov	r7, r3
 8009fce:	1136      	asrs	r6, r6, #4
 8009fd0:	2e01      	cmp	r6, #1
 8009fd2:	dc21      	bgt.n	800a018 <_strtod_l+0x518>
 8009fd4:	b10b      	cbz	r3, 8009fda <_strtod_l+0x4da>
 8009fd6:	4680      	mov	r8, r0
 8009fd8:	4689      	mov	r9, r1
 8009fda:	4b2e      	ldr	r3, [pc, #184]	; (800a094 <_strtod_l+0x594>)
 8009fdc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009fe0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fea:	464b      	mov	r3, r9
 8009fec:	f7f6 fa74 	bl	80004d8 <__aeabi_dmul>
 8009ff0:	4b29      	ldr	r3, [pc, #164]	; (800a098 <_strtod_l+0x598>)
 8009ff2:	460a      	mov	r2, r1
 8009ff4:	400b      	ands	r3, r1
 8009ff6:	4929      	ldr	r1, [pc, #164]	; (800a09c <_strtod_l+0x59c>)
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	428b      	cmp	r3, r1
 8009ffc:	d8bb      	bhi.n	8009f76 <_strtod_l+0x476>
 8009ffe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a002:	428b      	cmp	r3, r1
 800a004:	bf86      	itte	hi
 800a006:	f04f 38ff 	movhi.w	r8, #4294967295
 800a00a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a0a0 <_strtod_l+0x5a0>
 800a00e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a012:	2300      	movs	r3, #0
 800a014:	9305      	str	r3, [sp, #20]
 800a016:	e07e      	b.n	800a116 <_strtod_l+0x616>
 800a018:	07f2      	lsls	r2, r6, #31
 800a01a:	d507      	bpl.n	800a02c <_strtod_l+0x52c>
 800a01c:	4b1d      	ldr	r3, [pc, #116]	; (800a094 <_strtod_l+0x594>)
 800a01e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 fa57 	bl	80004d8 <__aeabi_dmul>
 800a02a:	2301      	movs	r3, #1
 800a02c:	3701      	adds	r7, #1
 800a02e:	1076      	asrs	r6, r6, #1
 800a030:	e7ce      	b.n	8009fd0 <_strtod_l+0x4d0>
 800a032:	d0ee      	beq.n	800a012 <_strtod_l+0x512>
 800a034:	4276      	negs	r6, r6
 800a036:	f016 020f 	ands.w	r2, r6, #15
 800a03a:	d00a      	beq.n	800a052 <_strtod_l+0x552>
 800a03c:	4b14      	ldr	r3, [pc, #80]	; (800a090 <_strtod_l+0x590>)
 800a03e:	4640      	mov	r0, r8
 800a040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a044:	4649      	mov	r1, r9
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	f7f6 fb6f 	bl	800072c <__aeabi_ddiv>
 800a04e:	4680      	mov	r8, r0
 800a050:	4689      	mov	r9, r1
 800a052:	1136      	asrs	r6, r6, #4
 800a054:	d0dd      	beq.n	800a012 <_strtod_l+0x512>
 800a056:	2e1f      	cmp	r6, #31
 800a058:	dd24      	ble.n	800a0a4 <_strtod_l+0x5a4>
 800a05a:	f04f 0b00 	mov.w	fp, #0
 800a05e:	f8cd b010 	str.w	fp, [sp, #16]
 800a062:	f8cd b020 	str.w	fp, [sp, #32]
 800a066:	f8cd b018 	str.w	fp, [sp, #24]
 800a06a:	2322      	movs	r3, #34	; 0x22
 800a06c:	f04f 0800 	mov.w	r8, #0
 800a070:	f04f 0900 	mov.w	r9, #0
 800a074:	f8ca 3000 	str.w	r3, [sl]
 800a078:	e78c      	b.n	8009f94 <_strtod_l+0x494>
 800a07a:	bf00      	nop
 800a07c:	08010402 	.word	0x08010402
 800a080:	08010444 	.word	0x08010444
 800a084:	080103fa 	.word	0x080103fa
 800a088:	08010584 	.word	0x08010584
 800a08c:	080103dd 	.word	0x080103dd
 800a090:	08010780 	.word	0x08010780
 800a094:	08010758 	.word	0x08010758
 800a098:	7ff00000 	.word	0x7ff00000
 800a09c:	7ca00000 	.word	0x7ca00000
 800a0a0:	7fefffff 	.word	0x7fefffff
 800a0a4:	f016 0310 	ands.w	r3, r6, #16
 800a0a8:	bf18      	it	ne
 800a0aa:	236a      	movne	r3, #106	; 0x6a
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	9305      	str	r3, [sp, #20]
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4fb2      	ldr	r7, [pc, #712]	; (800a380 <_strtod_l+0x880>)
 800a0b6:	07f2      	lsls	r2, r6, #31
 800a0b8:	d504      	bpl.n	800a0c4 <_strtod_l+0x5c4>
 800a0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0be:	f7f6 fa0b 	bl	80004d8 <__aeabi_dmul>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	1076      	asrs	r6, r6, #1
 800a0c6:	f107 0708 	add.w	r7, r7, #8
 800a0ca:	d1f4      	bne.n	800a0b6 <_strtod_l+0x5b6>
 800a0cc:	b10b      	cbz	r3, 800a0d2 <_strtod_l+0x5d2>
 800a0ce:	4680      	mov	r8, r0
 800a0d0:	4689      	mov	r9, r1
 800a0d2:	9b05      	ldr	r3, [sp, #20]
 800a0d4:	b1bb      	cbz	r3, 800a106 <_strtod_l+0x606>
 800a0d6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800a0da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	dd10      	ble.n	800a106 <_strtod_l+0x606>
 800a0e4:	2b1f      	cmp	r3, #31
 800a0e6:	f340 812b 	ble.w	800a340 <_strtod_l+0x840>
 800a0ea:	2b34      	cmp	r3, #52	; 0x34
 800a0ec:	bfd8      	it	le
 800a0ee:	f04f 32ff 	movle.w	r2, #4294967295
 800a0f2:	f04f 0800 	mov.w	r8, #0
 800a0f6:	bfcf      	iteee	gt
 800a0f8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a0fc:	3b20      	suble	r3, #32
 800a0fe:	fa02 f303 	lslle.w	r3, r2, r3
 800a102:	ea03 0901 	andle.w	r9, r3, r1
 800a106:	2200      	movs	r2, #0
 800a108:	2300      	movs	r3, #0
 800a10a:	4640      	mov	r0, r8
 800a10c:	4649      	mov	r1, r9
 800a10e:	f7f6 fc4b 	bl	80009a8 <__aeabi_dcmpeq>
 800a112:	2800      	cmp	r0, #0
 800a114:	d1a1      	bne.n	800a05a <_strtod_l+0x55a>
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	465a      	mov	r2, fp
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	4650      	mov	r0, sl
 800a11e:	4623      	mov	r3, r4
 800a120:	9908      	ldr	r1, [sp, #32]
 800a122:	f002 f967 	bl	800c3f4 <__s2b>
 800a126:	9008      	str	r0, [sp, #32]
 800a128:	2800      	cmp	r0, #0
 800a12a:	f43f af24 	beq.w	8009f76 <_strtod_l+0x476>
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	f04f 0b00 	mov.w	fp, #0
 800a134:	1b5d      	subs	r5, r3, r5
 800a136:	9b07      	ldr	r3, [sp, #28]
 800a138:	f8cd b010 	str.w	fp, [sp, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	bfb4      	ite	lt
 800a140:	462b      	movlt	r3, r5
 800a142:	2300      	movge	r3, #0
 800a144:	930e      	str	r3, [sp, #56]	; 0x38
 800a146:	9b07      	ldr	r3, [sp, #28]
 800a148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a14c:	9316      	str	r3, [sp, #88]	; 0x58
 800a14e:	9b08      	ldr	r3, [sp, #32]
 800a150:	4650      	mov	r0, sl
 800a152:	6859      	ldr	r1, [r3, #4]
 800a154:	f002 f8a2 	bl	800c29c <_Balloc>
 800a158:	9006      	str	r0, [sp, #24]
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f43f af13 	beq.w	8009f86 <_strtod_l+0x486>
 800a160:	9b08      	ldr	r3, [sp, #32]
 800a162:	300c      	adds	r0, #12
 800a164:	691a      	ldr	r2, [r3, #16]
 800a166:	f103 010c 	add.w	r1, r3, #12
 800a16a:	3202      	adds	r2, #2
 800a16c:	0092      	lsls	r2, r2, #2
 800a16e:	f7fe fbeb 	bl	8008948 <memcpy>
 800a172:	ab1e      	add	r3, sp, #120	; 0x78
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	ab1d      	add	r3, sp, #116	; 0x74
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	4642      	mov	r2, r8
 800a17c:	464b      	mov	r3, r9
 800a17e:	4650      	mov	r0, sl
 800a180:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800a184:	f002 fc74 	bl	800ca70 <__d2b>
 800a188:	901c      	str	r0, [sp, #112]	; 0x70
 800a18a:	2800      	cmp	r0, #0
 800a18c:	f43f aefb 	beq.w	8009f86 <_strtod_l+0x486>
 800a190:	2101      	movs	r1, #1
 800a192:	4650      	mov	r0, sl
 800a194:	f002 f9c6 	bl	800c524 <__i2b>
 800a198:	4603      	mov	r3, r0
 800a19a:	9004      	str	r0, [sp, #16]
 800a19c:	2800      	cmp	r0, #0
 800a19e:	f43f aef2 	beq.w	8009f86 <_strtod_l+0x486>
 800a1a2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a1a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	bfab      	itete	ge
 800a1aa:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a1ac:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a1ae:	18ee      	addge	r6, r5, r3
 800a1b0:	1b5c      	sublt	r4, r3, r5
 800a1b2:	9b05      	ldr	r3, [sp, #20]
 800a1b4:	bfa8      	it	ge
 800a1b6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a1b8:	eba5 0503 	sub.w	r5, r5, r3
 800a1bc:	4415      	add	r5, r2
 800a1be:	4b71      	ldr	r3, [pc, #452]	; (800a384 <_strtod_l+0x884>)
 800a1c0:	f105 35ff 	add.w	r5, r5, #4294967295
 800a1c4:	bfb8      	it	lt
 800a1c6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a1c8:	429d      	cmp	r5, r3
 800a1ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a1ce:	f280 80c9 	bge.w	800a364 <_strtod_l+0x864>
 800a1d2:	1b5b      	subs	r3, r3, r5
 800a1d4:	2b1f      	cmp	r3, #31
 800a1d6:	f04f 0701 	mov.w	r7, #1
 800a1da:	eba2 0203 	sub.w	r2, r2, r3
 800a1de:	f300 80b6 	bgt.w	800a34e <_strtod_l+0x84e>
 800a1e2:	2500      	movs	r5, #0
 800a1e4:	fa07 f303 	lsl.w	r3, r7, r3
 800a1e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ea:	18b7      	adds	r7, r6, r2
 800a1ec:	9b05      	ldr	r3, [sp, #20]
 800a1ee:	42be      	cmp	r6, r7
 800a1f0:	4414      	add	r4, r2
 800a1f2:	441c      	add	r4, r3
 800a1f4:	4633      	mov	r3, r6
 800a1f6:	bfa8      	it	ge
 800a1f8:	463b      	movge	r3, r7
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	bfa8      	it	ge
 800a1fe:	4623      	movge	r3, r4
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfc2      	ittt	gt
 800a204:	1aff      	subgt	r7, r7, r3
 800a206:	1ae4      	subgt	r4, r4, r3
 800a208:	1af6      	subgt	r6, r6, r3
 800a20a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd17      	ble.n	800a240 <_strtod_l+0x740>
 800a210:	461a      	mov	r2, r3
 800a212:	4650      	mov	r0, sl
 800a214:	9904      	ldr	r1, [sp, #16]
 800a216:	f002 fa3f 	bl	800c698 <__pow5mult>
 800a21a:	9004      	str	r0, [sp, #16]
 800a21c:	2800      	cmp	r0, #0
 800a21e:	f43f aeb2 	beq.w	8009f86 <_strtod_l+0x486>
 800a222:	4601      	mov	r1, r0
 800a224:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a226:	4650      	mov	r0, sl
 800a228:	f002 f992 	bl	800c550 <__multiply>
 800a22c:	9009      	str	r0, [sp, #36]	; 0x24
 800a22e:	2800      	cmp	r0, #0
 800a230:	f43f aea9 	beq.w	8009f86 <_strtod_l+0x486>
 800a234:	4650      	mov	r0, sl
 800a236:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a238:	f002 f870 	bl	800c31c <_Bfree>
 800a23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23e:	931c      	str	r3, [sp, #112]	; 0x70
 800a240:	2f00      	cmp	r7, #0
 800a242:	f300 8093 	bgt.w	800a36c <_strtod_l+0x86c>
 800a246:	9b07      	ldr	r3, [sp, #28]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dd08      	ble.n	800a25e <_strtod_l+0x75e>
 800a24c:	4650      	mov	r0, sl
 800a24e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a250:	9906      	ldr	r1, [sp, #24]
 800a252:	f002 fa21 	bl	800c698 <__pow5mult>
 800a256:	9006      	str	r0, [sp, #24]
 800a258:	2800      	cmp	r0, #0
 800a25a:	f43f ae94 	beq.w	8009f86 <_strtod_l+0x486>
 800a25e:	2c00      	cmp	r4, #0
 800a260:	dd08      	ble.n	800a274 <_strtod_l+0x774>
 800a262:	4622      	mov	r2, r4
 800a264:	4650      	mov	r0, sl
 800a266:	9906      	ldr	r1, [sp, #24]
 800a268:	f002 fa70 	bl	800c74c <__lshift>
 800a26c:	9006      	str	r0, [sp, #24]
 800a26e:	2800      	cmp	r0, #0
 800a270:	f43f ae89 	beq.w	8009f86 <_strtod_l+0x486>
 800a274:	2e00      	cmp	r6, #0
 800a276:	dd08      	ble.n	800a28a <_strtod_l+0x78a>
 800a278:	4632      	mov	r2, r6
 800a27a:	4650      	mov	r0, sl
 800a27c:	9904      	ldr	r1, [sp, #16]
 800a27e:	f002 fa65 	bl	800c74c <__lshift>
 800a282:	9004      	str	r0, [sp, #16]
 800a284:	2800      	cmp	r0, #0
 800a286:	f43f ae7e 	beq.w	8009f86 <_strtod_l+0x486>
 800a28a:	4650      	mov	r0, sl
 800a28c:	9a06      	ldr	r2, [sp, #24]
 800a28e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a290:	f002 fae4 	bl	800c85c <__mdiff>
 800a294:	4683      	mov	fp, r0
 800a296:	2800      	cmp	r0, #0
 800a298:	f43f ae75 	beq.w	8009f86 <_strtod_l+0x486>
 800a29c:	2400      	movs	r4, #0
 800a29e:	68c3      	ldr	r3, [r0, #12]
 800a2a0:	9904      	ldr	r1, [sp, #16]
 800a2a2:	60c4      	str	r4, [r0, #12]
 800a2a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a2a6:	f002 fabd 	bl	800c824 <__mcmp>
 800a2aa:	42a0      	cmp	r0, r4
 800a2ac:	da70      	bge.n	800a390 <_strtod_l+0x890>
 800a2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2b0:	ea53 0308 	orrs.w	r3, r3, r8
 800a2b4:	f040 8096 	bne.w	800a3e4 <_strtod_l+0x8e4>
 800a2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 8091 	bne.w	800a3e4 <_strtod_l+0x8e4>
 800a2c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2c6:	0d1b      	lsrs	r3, r3, #20
 800a2c8:	051b      	lsls	r3, r3, #20
 800a2ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a2ce:	f240 8089 	bls.w	800a3e4 <_strtod_l+0x8e4>
 800a2d2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a2d6:	b923      	cbnz	r3, 800a2e2 <_strtod_l+0x7e2>
 800a2d8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	f340 8081 	ble.w	800a3e4 <_strtod_l+0x8e4>
 800a2e2:	4659      	mov	r1, fp
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	f002 fa30 	bl	800c74c <__lshift>
 800a2ec:	9904      	ldr	r1, [sp, #16]
 800a2ee:	4683      	mov	fp, r0
 800a2f0:	f002 fa98 	bl	800c824 <__mcmp>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	dd75      	ble.n	800a3e4 <_strtod_l+0x8e4>
 800a2f8:	9905      	ldr	r1, [sp, #20]
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	4a22      	ldr	r2, [pc, #136]	; (800a388 <_strtod_l+0x888>)
 800a2fe:	2900      	cmp	r1, #0
 800a300:	f000 8091 	beq.w	800a426 <_strtod_l+0x926>
 800a304:	ea02 0109 	and.w	r1, r2, r9
 800a308:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a30c:	f300 808b 	bgt.w	800a426 <_strtod_l+0x926>
 800a310:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a314:	f77f aea9 	ble.w	800a06a <_strtod_l+0x56a>
 800a318:	2300      	movs	r3, #0
 800a31a:	4a1c      	ldr	r2, [pc, #112]	; (800a38c <_strtod_l+0x88c>)
 800a31c:	4640      	mov	r0, r8
 800a31e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a322:	4649      	mov	r1, r9
 800a324:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a328:	f7f6 f8d6 	bl	80004d8 <__aeabi_dmul>
 800a32c:	460b      	mov	r3, r1
 800a32e:	4303      	orrs	r3, r0
 800a330:	bf08      	it	eq
 800a332:	2322      	moveq	r3, #34	; 0x22
 800a334:	4680      	mov	r8, r0
 800a336:	4689      	mov	r9, r1
 800a338:	bf08      	it	eq
 800a33a:	f8ca 3000 	streq.w	r3, [sl]
 800a33e:	e62d      	b.n	8009f9c <_strtod_l+0x49c>
 800a340:	f04f 32ff 	mov.w	r2, #4294967295
 800a344:	fa02 f303 	lsl.w	r3, r2, r3
 800a348:	ea03 0808 	and.w	r8, r3, r8
 800a34c:	e6db      	b.n	800a106 <_strtod_l+0x606>
 800a34e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a352:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a356:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a35a:	35e2      	adds	r5, #226	; 0xe2
 800a35c:	fa07 f505 	lsl.w	r5, r7, r5
 800a360:	970f      	str	r7, [sp, #60]	; 0x3c
 800a362:	e742      	b.n	800a1ea <_strtod_l+0x6ea>
 800a364:	2301      	movs	r3, #1
 800a366:	2500      	movs	r5, #0
 800a368:	930f      	str	r3, [sp, #60]	; 0x3c
 800a36a:	e73e      	b.n	800a1ea <_strtod_l+0x6ea>
 800a36c:	463a      	mov	r2, r7
 800a36e:	4650      	mov	r0, sl
 800a370:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a372:	f002 f9eb 	bl	800c74c <__lshift>
 800a376:	901c      	str	r0, [sp, #112]	; 0x70
 800a378:	2800      	cmp	r0, #0
 800a37a:	f47f af64 	bne.w	800a246 <_strtod_l+0x746>
 800a37e:	e602      	b.n	8009f86 <_strtod_l+0x486>
 800a380:	08010458 	.word	0x08010458
 800a384:	fffffc02 	.word	0xfffffc02
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	39500000 	.word	0x39500000
 800a390:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a394:	d166      	bne.n	800a464 <_strtod_l+0x964>
 800a396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a39c:	b35a      	cbz	r2, 800a3f6 <_strtod_l+0x8f6>
 800a39e:	4a9c      	ldr	r2, [pc, #624]	; (800a610 <_strtod_l+0xb10>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d12c      	bne.n	800a3fe <_strtod_l+0x8fe>
 800a3a4:	9b05      	ldr	r3, [sp, #20]
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	b303      	cbz	r3, 800a3ec <_strtod_l+0x8ec>
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	4a99      	ldr	r2, [pc, #612]	; (800a614 <_strtod_l+0xb14>)
 800a3ae:	f04f 31ff 	mov.w	r1, #4294967295
 800a3b2:	401a      	ands	r2, r3
 800a3b4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a3b8:	d81b      	bhi.n	800a3f2 <_strtod_l+0x8f2>
 800a3ba:	0d12      	lsrs	r2, r2, #20
 800a3bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c4:	4298      	cmp	r0, r3
 800a3c6:	d11a      	bne.n	800a3fe <_strtod_l+0x8fe>
 800a3c8:	4b93      	ldr	r3, [pc, #588]	; (800a618 <_strtod_l+0xb18>)
 800a3ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d102      	bne.n	800a3d6 <_strtod_l+0x8d6>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f43f add8 	beq.w	8009f86 <_strtod_l+0x486>
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	4b8e      	ldr	r3, [pc, #568]	; (800a614 <_strtod_l+0xb14>)
 800a3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3de:	401a      	ands	r2, r3
 800a3e0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a3e4:	9b05      	ldr	r3, [sp, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d196      	bne.n	800a318 <_strtod_l+0x818>
 800a3ea:	e5d7      	b.n	8009f9c <_strtod_l+0x49c>
 800a3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f0:	e7e8      	b.n	800a3c4 <_strtod_l+0x8c4>
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	e7e6      	b.n	800a3c4 <_strtod_l+0x8c4>
 800a3f6:	ea53 0308 	orrs.w	r3, r3, r8
 800a3fa:	f43f af7d 	beq.w	800a2f8 <_strtod_l+0x7f8>
 800a3fe:	b1e5      	cbz	r5, 800a43a <_strtod_l+0x93a>
 800a400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a402:	421d      	tst	r5, r3
 800a404:	d0ee      	beq.n	800a3e4 <_strtod_l+0x8e4>
 800a406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a408:	4640      	mov	r0, r8
 800a40a:	4649      	mov	r1, r9
 800a40c:	9a05      	ldr	r2, [sp, #20]
 800a40e:	b1c3      	cbz	r3, 800a442 <_strtod_l+0x942>
 800a410:	f7ff fb54 	bl	8009abc <sulp>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a41c:	f7f5 fea6 	bl	800016c <__adddf3>
 800a420:	4680      	mov	r8, r0
 800a422:	4689      	mov	r9, r1
 800a424:	e7de      	b.n	800a3e4 <_strtod_l+0x8e4>
 800a426:	4013      	ands	r3, r2
 800a428:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a42c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a430:	f04f 38ff 	mov.w	r8, #4294967295
 800a434:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a438:	e7d4      	b.n	800a3e4 <_strtod_l+0x8e4>
 800a43a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a43c:	ea13 0f08 	tst.w	r3, r8
 800a440:	e7e0      	b.n	800a404 <_strtod_l+0x904>
 800a442:	f7ff fb3b 	bl	8009abc <sulp>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a44e:	f7f5 fe8b 	bl	8000168 <__aeabi_dsub>
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	4680      	mov	r8, r0
 800a458:	4689      	mov	r9, r1
 800a45a:	f7f6 faa5 	bl	80009a8 <__aeabi_dcmpeq>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d0c0      	beq.n	800a3e4 <_strtod_l+0x8e4>
 800a462:	e602      	b.n	800a06a <_strtod_l+0x56a>
 800a464:	4658      	mov	r0, fp
 800a466:	9904      	ldr	r1, [sp, #16]
 800a468:	f002 fb5e 	bl	800cb28 <__ratio>
 800a46c:	2200      	movs	r2, #0
 800a46e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a472:	4606      	mov	r6, r0
 800a474:	460f      	mov	r7, r1
 800a476:	f7f6 faab 	bl	80009d0 <__aeabi_dcmple>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d075      	beq.n	800a56a <_strtod_l+0xa6a>
 800a47e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a480:	2b00      	cmp	r3, #0
 800a482:	d047      	beq.n	800a514 <_strtod_l+0xa14>
 800a484:	2600      	movs	r6, #0
 800a486:	4f65      	ldr	r7, [pc, #404]	; (800a61c <_strtod_l+0xb1c>)
 800a488:	4d64      	ldr	r5, [pc, #400]	; (800a61c <_strtod_l+0xb1c>)
 800a48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a490:	0d1b      	lsrs	r3, r3, #20
 800a492:	051b      	lsls	r3, r3, #20
 800a494:	930f      	str	r3, [sp, #60]	; 0x3c
 800a496:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a498:	4b61      	ldr	r3, [pc, #388]	; (800a620 <_strtod_l+0xb20>)
 800a49a:	429a      	cmp	r2, r3
 800a49c:	f040 80c8 	bne.w	800a630 <_strtod_l+0xb30>
 800a4a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4a4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	f002 fa63 	bl	800c97c <__ulp>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	4639      	mov	r1, r7
 800a4be:	f7f6 f80b 	bl	80004d8 <__aeabi_dmul>
 800a4c2:	4642      	mov	r2, r8
 800a4c4:	464b      	mov	r3, r9
 800a4c6:	f7f5 fe51 	bl	800016c <__adddf3>
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4951      	ldr	r1, [pc, #324]	; (800a614 <_strtod_l+0xb14>)
 800a4ce:	4a55      	ldr	r2, [pc, #340]	; (800a624 <_strtod_l+0xb24>)
 800a4d0:	4019      	ands	r1, r3
 800a4d2:	4291      	cmp	r1, r2
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	d95e      	bls.n	800a596 <_strtod_l+0xa96>
 800a4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d103      	bne.n	800a4ea <_strtod_l+0x9ea>
 800a4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	f43f ad4e 	beq.w	8009f86 <_strtod_l+0x486>
 800a4ea:	f04f 38ff 	mov.w	r8, #4294967295
 800a4ee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a618 <_strtod_l+0xb18>
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4f6:	f001 ff11 	bl	800c31c <_Bfree>
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	9906      	ldr	r1, [sp, #24]
 800a4fe:	f001 ff0d 	bl	800c31c <_Bfree>
 800a502:	4650      	mov	r0, sl
 800a504:	9904      	ldr	r1, [sp, #16]
 800a506:	f001 ff09 	bl	800c31c <_Bfree>
 800a50a:	4659      	mov	r1, fp
 800a50c:	4650      	mov	r0, sl
 800a50e:	f001 ff05 	bl	800c31c <_Bfree>
 800a512:	e61c      	b.n	800a14e <_strtod_l+0x64e>
 800a514:	f1b8 0f00 	cmp.w	r8, #0
 800a518:	d119      	bne.n	800a54e <_strtod_l+0xa4e>
 800a51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a520:	b9e3      	cbnz	r3, 800a55c <_strtod_l+0xa5c>
 800a522:	2200      	movs	r2, #0
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	4b3c      	ldr	r3, [pc, #240]	; (800a61c <_strtod_l+0xb1c>)
 800a52a:	f7f6 fa47 	bl	80009bc <__aeabi_dcmplt>
 800a52e:	b9c8      	cbnz	r0, 800a564 <_strtod_l+0xa64>
 800a530:	2200      	movs	r2, #0
 800a532:	4630      	mov	r0, r6
 800a534:	4639      	mov	r1, r7
 800a536:	4b3c      	ldr	r3, [pc, #240]	; (800a628 <_strtod_l+0xb28>)
 800a538:	f7f5 ffce 	bl	80004d8 <__aeabi_dmul>
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a544:	9418      	str	r4, [sp, #96]	; 0x60
 800a546:	9319      	str	r3, [sp, #100]	; 0x64
 800a548:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a54c:	e79d      	b.n	800a48a <_strtod_l+0x98a>
 800a54e:	f1b8 0f01 	cmp.w	r8, #1
 800a552:	d103      	bne.n	800a55c <_strtod_l+0xa5c>
 800a554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a556:	2b00      	cmp	r3, #0
 800a558:	f43f ad87 	beq.w	800a06a <_strtod_l+0x56a>
 800a55c:	2600      	movs	r6, #0
 800a55e:	2400      	movs	r4, #0
 800a560:	4f32      	ldr	r7, [pc, #200]	; (800a62c <_strtod_l+0xb2c>)
 800a562:	e791      	b.n	800a488 <_strtod_l+0x988>
 800a564:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a566:	4d30      	ldr	r5, [pc, #192]	; (800a628 <_strtod_l+0xb28>)
 800a568:	e7ea      	b.n	800a540 <_strtod_l+0xa40>
 800a56a:	4b2f      	ldr	r3, [pc, #188]	; (800a628 <_strtod_l+0xb28>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	4630      	mov	r0, r6
 800a570:	4639      	mov	r1, r7
 800a572:	f7f5 ffb1 	bl	80004d8 <__aeabi_dmul>
 800a576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a578:	4604      	mov	r4, r0
 800a57a:	460d      	mov	r5, r1
 800a57c:	b933      	cbnz	r3, 800a58c <_strtod_l+0xa8c>
 800a57e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a582:	9010      	str	r0, [sp, #64]	; 0x40
 800a584:	9311      	str	r3, [sp, #68]	; 0x44
 800a586:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a58a:	e77e      	b.n	800a48a <_strtod_l+0x98a>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a594:	e7f7      	b.n	800a586 <_strtod_l+0xa86>
 800a596:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a59a:	9b05      	ldr	r3, [sp, #20]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1a8      	bne.n	800a4f2 <_strtod_l+0x9f2>
 800a5a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5a6:	0d1b      	lsrs	r3, r3, #20
 800a5a8:	051b      	lsls	r3, r3, #20
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d1a1      	bne.n	800a4f2 <_strtod_l+0x9f2>
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7f6 fe09 	bl	80011c8 <__aeabi_d2lz>
 800a5b6:	f7f5 ff61 	bl	800047c <__aeabi_l2d>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	f7f5 fdd1 	bl	8000168 <__aeabi_dsub>
 800a5c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5cc:	ea43 0308 	orr.w	r3, r3, r8
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	460d      	mov	r5, r1
 800a5d6:	d066      	beq.n	800a6a6 <_strtod_l+0xba6>
 800a5d8:	a309      	add	r3, pc, #36	; (adr r3, 800a600 <_strtod_l+0xb00>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f6 f9ed 	bl	80009bc <__aeabi_dcmplt>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	f47f acda 	bne.w	8009f9c <_strtod_l+0x49c>
 800a5e8:	a307      	add	r3, pc, #28	; (adr r3, 800a608 <_strtod_l+0xb08>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	f7f6 fa01 	bl	80009f8 <__aeabi_dcmpgt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f43f af7b 	beq.w	800a4f2 <_strtod_l+0x9f2>
 800a5fc:	e4ce      	b.n	8009f9c <_strtod_l+0x49c>
 800a5fe:	bf00      	nop
 800a600:	94a03595 	.word	0x94a03595
 800a604:	3fdfffff 	.word	0x3fdfffff
 800a608:	35afe535 	.word	0x35afe535
 800a60c:	3fe00000 	.word	0x3fe00000
 800a610:	000fffff 	.word	0x000fffff
 800a614:	7ff00000 	.word	0x7ff00000
 800a618:	7fefffff 	.word	0x7fefffff
 800a61c:	3ff00000 	.word	0x3ff00000
 800a620:	7fe00000 	.word	0x7fe00000
 800a624:	7c9fffff 	.word	0x7c9fffff
 800a628:	3fe00000 	.word	0x3fe00000
 800a62c:	bff00000 	.word	0xbff00000
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	b313      	cbz	r3, 800a67a <_strtod_l+0xb7a>
 800a634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a636:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a63a:	d81e      	bhi.n	800a67a <_strtod_l+0xb7a>
 800a63c:	a326      	add	r3, pc, #152	; (adr r3, 800a6d8 <_strtod_l+0xbd8>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f6 f9c3 	bl	80009d0 <__aeabi_dcmple>
 800a64a:	b190      	cbz	r0, 800a672 <_strtod_l+0xb72>
 800a64c:	4629      	mov	r1, r5
 800a64e:	4620      	mov	r0, r4
 800a650:	f7f6 fa1a 	bl	8000a88 <__aeabi_d2uiz>
 800a654:	2801      	cmp	r0, #1
 800a656:	bf38      	it	cc
 800a658:	2001      	movcc	r0, #1
 800a65a:	f7f5 fec3 	bl	80003e4 <__aeabi_ui2d>
 800a65e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
 800a664:	b9d3      	cbnz	r3, 800a69c <_strtod_l+0xb9c>
 800a666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a66a:	9012      	str	r0, [sp, #72]	; 0x48
 800a66c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a66e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a672:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a674:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a678:	1a9f      	subs	r7, r3, r2
 800a67a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a67e:	f002 f97d 	bl	800c97c <__ulp>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4630      	mov	r0, r6
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f5 ff25 	bl	80004d8 <__aeabi_dmul>
 800a68e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a692:	f7f5 fd6b 	bl	800016c <__adddf3>
 800a696:	4680      	mov	r8, r0
 800a698:	4689      	mov	r9, r1
 800a69a:	e77e      	b.n	800a59a <_strtod_l+0xa9a>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a6a4:	e7e3      	b.n	800a66e <_strtod_l+0xb6e>
 800a6a6:	a30e      	add	r3, pc, #56	; (adr r3, 800a6e0 <_strtod_l+0xbe0>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f7f6 f986 	bl	80009bc <__aeabi_dcmplt>
 800a6b0:	e7a1      	b.n	800a5f6 <_strtod_l+0xaf6>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	930c      	str	r3, [sp, #48]	; 0x30
 800a6b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	f7ff ba65 	b.w	8009b8a <_strtod_l+0x8a>
 800a6c0:	2b65      	cmp	r3, #101	; 0x65
 800a6c2:	f43f ab5c 	beq.w	8009d7e <_strtod_l+0x27e>
 800a6c6:	2b45      	cmp	r3, #69	; 0x45
 800a6c8:	f43f ab59 	beq.w	8009d7e <_strtod_l+0x27e>
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f7ff bb8d 	b.w	8009dec <_strtod_l+0x2ec>
 800a6d2:	bf00      	nop
 800a6d4:	f3af 8000 	nop.w
 800a6d8:	ffc00000 	.word	0xffc00000
 800a6dc:	41dfffff 	.word	0x41dfffff
 800a6e0:	94a03595 	.word	0x94a03595
 800a6e4:	3fcfffff 	.word	0x3fcfffff

0800a6e8 <_strtod_r>:
 800a6e8:	4b01      	ldr	r3, [pc, #4]	; (800a6f0 <_strtod_r+0x8>)
 800a6ea:	f7ff ba09 	b.w	8009b00 <_strtod_l>
 800a6ee:	bf00      	nop
 800a6f0:	20000074 	.word	0x20000074

0800a6f4 <_strtol_l.isra.0>:
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fa:	4686      	mov	lr, r0
 800a6fc:	d001      	beq.n	800a702 <_strtol_l.isra.0+0xe>
 800a6fe:	2b24      	cmp	r3, #36	; 0x24
 800a700:	d906      	bls.n	800a710 <_strtol_l.isra.0+0x1c>
 800a702:	f7fe f8dd 	bl	80088c0 <__errno>
 800a706:	2316      	movs	r3, #22
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	2000      	movs	r0, #0
 800a70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a710:	468c      	mov	ip, r1
 800a712:	4e3a      	ldr	r6, [pc, #232]	; (800a7fc <_strtol_l.isra.0+0x108>)
 800a714:	4660      	mov	r0, ip
 800a716:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a71a:	5da5      	ldrb	r5, [r4, r6]
 800a71c:	f015 0508 	ands.w	r5, r5, #8
 800a720:	d1f8      	bne.n	800a714 <_strtol_l.isra.0+0x20>
 800a722:	2c2d      	cmp	r4, #45	; 0x2d
 800a724:	d133      	bne.n	800a78e <_strtol_l.isra.0+0x9a>
 800a726:	f04f 0801 	mov.w	r8, #1
 800a72a:	f89c 4000 	ldrb.w	r4, [ip]
 800a72e:	f100 0c02 	add.w	ip, r0, #2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d05d      	beq.n	800a7f2 <_strtol_l.isra.0+0xfe>
 800a736:	2b10      	cmp	r3, #16
 800a738:	d10c      	bne.n	800a754 <_strtol_l.isra.0+0x60>
 800a73a:	2c30      	cmp	r4, #48	; 0x30
 800a73c:	d10a      	bne.n	800a754 <_strtol_l.isra.0+0x60>
 800a73e:	f89c 0000 	ldrb.w	r0, [ip]
 800a742:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a746:	2858      	cmp	r0, #88	; 0x58
 800a748:	d14e      	bne.n	800a7e8 <_strtol_l.isra.0+0xf4>
 800a74a:	2310      	movs	r3, #16
 800a74c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a750:	f10c 0c02 	add.w	ip, ip, #2
 800a754:	2500      	movs	r5, #0
 800a756:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a75a:	3f01      	subs	r7, #1
 800a75c:	fbb7 f9f3 	udiv	r9, r7, r3
 800a760:	4628      	mov	r0, r5
 800a762:	fb03 7a19 	mls	sl, r3, r9, r7
 800a766:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a76a:	2e09      	cmp	r6, #9
 800a76c:	d818      	bhi.n	800a7a0 <_strtol_l.isra.0+0xac>
 800a76e:	4634      	mov	r4, r6
 800a770:	42a3      	cmp	r3, r4
 800a772:	dd24      	ble.n	800a7be <_strtol_l.isra.0+0xca>
 800a774:	2d00      	cmp	r5, #0
 800a776:	db1f      	blt.n	800a7b8 <_strtol_l.isra.0+0xc4>
 800a778:	4581      	cmp	r9, r0
 800a77a:	d31d      	bcc.n	800a7b8 <_strtol_l.isra.0+0xc4>
 800a77c:	d101      	bne.n	800a782 <_strtol_l.isra.0+0x8e>
 800a77e:	45a2      	cmp	sl, r4
 800a780:	db1a      	blt.n	800a7b8 <_strtol_l.isra.0+0xc4>
 800a782:	2501      	movs	r5, #1
 800a784:	fb00 4003 	mla	r0, r0, r3, r4
 800a788:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a78c:	e7eb      	b.n	800a766 <_strtol_l.isra.0+0x72>
 800a78e:	2c2b      	cmp	r4, #43	; 0x2b
 800a790:	bf08      	it	eq
 800a792:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a796:	46a8      	mov	r8, r5
 800a798:	bf08      	it	eq
 800a79a:	f100 0c02 	addeq.w	ip, r0, #2
 800a79e:	e7c8      	b.n	800a732 <_strtol_l.isra.0+0x3e>
 800a7a0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a7a4:	2e19      	cmp	r6, #25
 800a7a6:	d801      	bhi.n	800a7ac <_strtol_l.isra.0+0xb8>
 800a7a8:	3c37      	subs	r4, #55	; 0x37
 800a7aa:	e7e1      	b.n	800a770 <_strtol_l.isra.0+0x7c>
 800a7ac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a7b0:	2e19      	cmp	r6, #25
 800a7b2:	d804      	bhi.n	800a7be <_strtol_l.isra.0+0xca>
 800a7b4:	3c57      	subs	r4, #87	; 0x57
 800a7b6:	e7db      	b.n	800a770 <_strtol_l.isra.0+0x7c>
 800a7b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a7bc:	e7e4      	b.n	800a788 <_strtol_l.isra.0+0x94>
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	da08      	bge.n	800a7d4 <_strtol_l.isra.0+0xe0>
 800a7c2:	2322      	movs	r3, #34	; 0x22
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	f8ce 3000 	str.w	r3, [lr]
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	d09e      	beq.n	800a70c <_strtol_l.isra.0+0x18>
 800a7ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a7d2:	e007      	b.n	800a7e4 <_strtol_l.isra.0+0xf0>
 800a7d4:	f1b8 0f00 	cmp.w	r8, #0
 800a7d8:	d000      	beq.n	800a7dc <_strtol_l.isra.0+0xe8>
 800a7da:	4240      	negs	r0, r0
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	d095      	beq.n	800a70c <_strtol_l.isra.0+0x18>
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	d1f4      	bne.n	800a7ce <_strtol_l.isra.0+0xda>
 800a7e4:	6011      	str	r1, [r2, #0]
 800a7e6:	e791      	b.n	800a70c <_strtol_l.isra.0+0x18>
 800a7e8:	2430      	movs	r4, #48	; 0x30
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1b2      	bne.n	800a754 <_strtol_l.isra.0+0x60>
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	e7b0      	b.n	800a754 <_strtol_l.isra.0+0x60>
 800a7f2:	2c30      	cmp	r4, #48	; 0x30
 800a7f4:	d0a3      	beq.n	800a73e <_strtol_l.isra.0+0x4a>
 800a7f6:	230a      	movs	r3, #10
 800a7f8:	e7ac      	b.n	800a754 <_strtol_l.isra.0+0x60>
 800a7fa:	bf00      	nop
 800a7fc:	08010481 	.word	0x08010481

0800a800 <_strtol_r>:
 800a800:	f7ff bf78 	b.w	800a6f4 <_strtol_l.isra.0>

0800a804 <_vsniprintf_r>:
 800a804:	b530      	push	{r4, r5, lr}
 800a806:	1e14      	subs	r4, r2, #0
 800a808:	4605      	mov	r5, r0
 800a80a:	b09b      	sub	sp, #108	; 0x6c
 800a80c:	4618      	mov	r0, r3
 800a80e:	da05      	bge.n	800a81c <_vsniprintf_r+0x18>
 800a810:	238b      	movs	r3, #139	; 0x8b
 800a812:	f04f 30ff 	mov.w	r0, #4294967295
 800a816:	602b      	str	r3, [r5, #0]
 800a818:	b01b      	add	sp, #108	; 0x6c
 800a81a:	bd30      	pop	{r4, r5, pc}
 800a81c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a820:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a824:	bf0c      	ite	eq
 800a826:	4623      	moveq	r3, r4
 800a828:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a82c:	9302      	str	r3, [sp, #8]
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a834:	4602      	mov	r2, r0
 800a836:	9100      	str	r1, [sp, #0]
 800a838:	9104      	str	r1, [sp, #16]
 800a83a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a83e:	4669      	mov	r1, sp
 800a840:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a842:	4628      	mov	r0, r5
 800a844:	f002 fa72 	bl	800cd2c <_svfiprintf_r>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	bfbc      	itt	lt
 800a84c:	238b      	movlt	r3, #139	; 0x8b
 800a84e:	602b      	strlt	r3, [r5, #0]
 800a850:	2c00      	cmp	r4, #0
 800a852:	d0e1      	beq.n	800a818 <_vsniprintf_r+0x14>
 800a854:	2200      	movs	r2, #0
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	e7dd      	b.n	800a818 <_vsniprintf_r+0x14>

0800a85c <vsniprintf>:
 800a85c:	b507      	push	{r0, r1, r2, lr}
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	4613      	mov	r3, r2
 800a862:	460a      	mov	r2, r1
 800a864:	4601      	mov	r1, r0
 800a866:	4803      	ldr	r0, [pc, #12]	; (800a874 <vsniprintf+0x18>)
 800a868:	6800      	ldr	r0, [r0, #0]
 800a86a:	f7ff ffcb 	bl	800a804 <_vsniprintf_r>
 800a86e:	b003      	add	sp, #12
 800a870:	f85d fb04 	ldr.w	pc, [sp], #4
 800a874:	2000000c 	.word	0x2000000c

0800a878 <__swbuf_r>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	460e      	mov	r6, r1
 800a87c:	4614      	mov	r4, r2
 800a87e:	4605      	mov	r5, r0
 800a880:	b118      	cbz	r0, 800a88a <__swbuf_r+0x12>
 800a882:	6983      	ldr	r3, [r0, #24]
 800a884:	b90b      	cbnz	r3, 800a88a <__swbuf_r+0x12>
 800a886:	f001 f853 	bl	800b930 <__sinit>
 800a88a:	4b21      	ldr	r3, [pc, #132]	; (800a910 <__swbuf_r+0x98>)
 800a88c:	429c      	cmp	r4, r3
 800a88e:	d12b      	bne.n	800a8e8 <__swbuf_r+0x70>
 800a890:	686c      	ldr	r4, [r5, #4]
 800a892:	69a3      	ldr	r3, [r4, #24]
 800a894:	60a3      	str	r3, [r4, #8]
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	071a      	lsls	r2, r3, #28
 800a89a:	d52f      	bpl.n	800a8fc <__swbuf_r+0x84>
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	b36b      	cbz	r3, 800a8fc <__swbuf_r+0x84>
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	6820      	ldr	r0, [r4, #0]
 800a8a4:	b2f6      	uxtb	r6, r6
 800a8a6:	1ac0      	subs	r0, r0, r3
 800a8a8:	6963      	ldr	r3, [r4, #20]
 800a8aa:	4637      	mov	r7, r6
 800a8ac:	4283      	cmp	r3, r0
 800a8ae:	dc04      	bgt.n	800a8ba <__swbuf_r+0x42>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f000 ffa8 	bl	800b808 <_fflush_r>
 800a8b8:	bb30      	cbnz	r0, 800a908 <__swbuf_r+0x90>
 800a8ba:	68a3      	ldr	r3, [r4, #8]
 800a8bc:	3001      	adds	r0, #1
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	60a3      	str	r3, [r4, #8]
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	6022      	str	r2, [r4, #0]
 800a8c8:	701e      	strb	r6, [r3, #0]
 800a8ca:	6963      	ldr	r3, [r4, #20]
 800a8cc:	4283      	cmp	r3, r0
 800a8ce:	d004      	beq.n	800a8da <__swbuf_r+0x62>
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	07db      	lsls	r3, r3, #31
 800a8d4:	d506      	bpl.n	800a8e4 <__swbuf_r+0x6c>
 800a8d6:	2e0a      	cmp	r6, #10
 800a8d8:	d104      	bne.n	800a8e4 <__swbuf_r+0x6c>
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 ff93 	bl	800b808 <_fflush_r>
 800a8e2:	b988      	cbnz	r0, 800a908 <__swbuf_r+0x90>
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e8:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <__swbuf_r+0x9c>)
 800a8ea:	429c      	cmp	r4, r3
 800a8ec:	d101      	bne.n	800a8f2 <__swbuf_r+0x7a>
 800a8ee:	68ac      	ldr	r4, [r5, #8]
 800a8f0:	e7cf      	b.n	800a892 <__swbuf_r+0x1a>
 800a8f2:	4b09      	ldr	r3, [pc, #36]	; (800a918 <__swbuf_r+0xa0>)
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	bf08      	it	eq
 800a8f8:	68ec      	ldreq	r4, [r5, #12]
 800a8fa:	e7ca      	b.n	800a892 <__swbuf_r+0x1a>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4628      	mov	r0, r5
 800a900:	f000 f80c 	bl	800a91c <__swsetup_r>
 800a904:	2800      	cmp	r0, #0
 800a906:	d0cb      	beq.n	800a8a0 <__swbuf_r+0x28>
 800a908:	f04f 37ff 	mov.w	r7, #4294967295
 800a90c:	e7ea      	b.n	800a8e4 <__swbuf_r+0x6c>
 800a90e:	bf00      	nop
 800a910:	08010638 	.word	0x08010638
 800a914:	08010658 	.word	0x08010658
 800a918:	08010618 	.word	0x08010618

0800a91c <__swsetup_r>:
 800a91c:	4b32      	ldr	r3, [pc, #200]	; (800a9e8 <__swsetup_r+0xcc>)
 800a91e:	b570      	push	{r4, r5, r6, lr}
 800a920:	681d      	ldr	r5, [r3, #0]
 800a922:	4606      	mov	r6, r0
 800a924:	460c      	mov	r4, r1
 800a926:	b125      	cbz	r5, 800a932 <__swsetup_r+0x16>
 800a928:	69ab      	ldr	r3, [r5, #24]
 800a92a:	b913      	cbnz	r3, 800a932 <__swsetup_r+0x16>
 800a92c:	4628      	mov	r0, r5
 800a92e:	f000 ffff 	bl	800b930 <__sinit>
 800a932:	4b2e      	ldr	r3, [pc, #184]	; (800a9ec <__swsetup_r+0xd0>)
 800a934:	429c      	cmp	r4, r3
 800a936:	d10f      	bne.n	800a958 <__swsetup_r+0x3c>
 800a938:	686c      	ldr	r4, [r5, #4]
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a940:	0719      	lsls	r1, r3, #28
 800a942:	d42c      	bmi.n	800a99e <__swsetup_r+0x82>
 800a944:	06dd      	lsls	r5, r3, #27
 800a946:	d411      	bmi.n	800a96c <__swsetup_r+0x50>
 800a948:	2309      	movs	r3, #9
 800a94a:	6033      	str	r3, [r6, #0]
 800a94c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	e03e      	b.n	800a9d6 <__swsetup_r+0xba>
 800a958:	4b25      	ldr	r3, [pc, #148]	; (800a9f0 <__swsetup_r+0xd4>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d101      	bne.n	800a962 <__swsetup_r+0x46>
 800a95e:	68ac      	ldr	r4, [r5, #8]
 800a960:	e7eb      	b.n	800a93a <__swsetup_r+0x1e>
 800a962:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <__swsetup_r+0xd8>)
 800a964:	429c      	cmp	r4, r3
 800a966:	bf08      	it	eq
 800a968:	68ec      	ldreq	r4, [r5, #12]
 800a96a:	e7e6      	b.n	800a93a <__swsetup_r+0x1e>
 800a96c:	0758      	lsls	r0, r3, #29
 800a96e:	d512      	bpl.n	800a996 <__swsetup_r+0x7a>
 800a970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a972:	b141      	cbz	r1, 800a986 <__swsetup_r+0x6a>
 800a974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a978:	4299      	cmp	r1, r3
 800a97a:	d002      	beq.n	800a982 <__swsetup_r+0x66>
 800a97c:	4630      	mov	r0, r6
 800a97e:	f7fd fff9 	bl	8008974 <_free_r>
 800a982:	2300      	movs	r3, #0
 800a984:	6363      	str	r3, [r4, #52]	; 0x34
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a98c:	81a3      	strh	r3, [r4, #12]
 800a98e:	2300      	movs	r3, #0
 800a990:	6063      	str	r3, [r4, #4]
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	f043 0308 	orr.w	r3, r3, #8
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	6923      	ldr	r3, [r4, #16]
 800a9a0:	b94b      	cbnz	r3, 800a9b6 <__swsetup_r+0x9a>
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9ac:	d003      	beq.n	800a9b6 <__swsetup_r+0x9a>
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f001 fbed 	bl	800c190 <__smakebuf_r>
 800a9b6:	89a0      	ldrh	r0, [r4, #12]
 800a9b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9bc:	f010 0301 	ands.w	r3, r0, #1
 800a9c0:	d00a      	beq.n	800a9d8 <__swsetup_r+0xbc>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60a3      	str	r3, [r4, #8]
 800a9c6:	6963      	ldr	r3, [r4, #20]
 800a9c8:	425b      	negs	r3, r3
 800a9ca:	61a3      	str	r3, [r4, #24]
 800a9cc:	6923      	ldr	r3, [r4, #16]
 800a9ce:	b943      	cbnz	r3, 800a9e2 <__swsetup_r+0xc6>
 800a9d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9d4:	d1ba      	bne.n	800a94c <__swsetup_r+0x30>
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	0781      	lsls	r1, r0, #30
 800a9da:	bf58      	it	pl
 800a9dc:	6963      	ldrpl	r3, [r4, #20]
 800a9de:	60a3      	str	r3, [r4, #8]
 800a9e0:	e7f4      	b.n	800a9cc <__swsetup_r+0xb0>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e7f7      	b.n	800a9d6 <__swsetup_r+0xba>
 800a9e6:	bf00      	nop
 800a9e8:	2000000c 	.word	0x2000000c
 800a9ec:	08010638 	.word	0x08010638
 800a9f0:	08010658 	.word	0x08010658
 800a9f4:	08010618 	.word	0x08010618

0800a9f8 <abort>:
 800a9f8:	2006      	movs	r0, #6
 800a9fa:	b508      	push	{r3, lr}
 800a9fc:	f002 fac4 	bl	800cf88 <raise>
 800aa00:	2001      	movs	r0, #1
 800aa02:	f7fa faba 	bl	8004f7a <_exit>

0800aa06 <quorem>:
 800aa06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	6903      	ldr	r3, [r0, #16]
 800aa0c:	690c      	ldr	r4, [r1, #16]
 800aa0e:	4607      	mov	r7, r0
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	f2c0 8083 	blt.w	800ab1c <quorem+0x116>
 800aa16:	3c01      	subs	r4, #1
 800aa18:	f100 0514 	add.w	r5, r0, #20
 800aa1c:	f101 0814 	add.w	r8, r1, #20
 800aa20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	429a      	cmp	r2, r3
 800aa32:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa3e:	d332      	bcc.n	800aaa6 <quorem+0xa0>
 800aa40:	f04f 0e00 	mov.w	lr, #0
 800aa44:	4640      	mov	r0, r8
 800aa46:	46ac      	mov	ip, r5
 800aa48:	46f2      	mov	sl, lr
 800aa4a:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa4e:	b293      	uxth	r3, r2
 800aa50:	fb06 e303 	mla	r3, r6, r3, lr
 800aa54:	0c12      	lsrs	r2, r2, #16
 800aa56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa5a:	fb06 e202 	mla	r2, r6, r2, lr
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	ebaa 0303 	sub.w	r3, sl, r3
 800aa64:	f8dc a000 	ldr.w	sl, [ip]
 800aa68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa6c:	fa1f fa8a 	uxth.w	sl, sl
 800aa70:	4453      	add	r3, sl
 800aa72:	fa1f fa82 	uxth.w	sl, r2
 800aa76:	f8dc 2000 	ldr.w	r2, [ip]
 800aa7a:	4581      	cmp	r9, r0
 800aa7c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aa80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa8e:	f84c 3b04 	str.w	r3, [ip], #4
 800aa92:	d2da      	bcs.n	800aa4a <quorem+0x44>
 800aa94:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa98:	b92b      	cbnz	r3, 800aaa6 <quorem+0xa0>
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	3b04      	subs	r3, #4
 800aa9e:	429d      	cmp	r5, r3
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	d32f      	bcc.n	800ab04 <quorem+0xfe>
 800aaa4:	613c      	str	r4, [r7, #16]
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	f001 febc 	bl	800c824 <__mcmp>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	db25      	blt.n	800aafc <quorem+0xf6>
 800aab0:	4628      	mov	r0, r5
 800aab2:	f04f 0c00 	mov.w	ip, #0
 800aab6:	3601      	adds	r6, #1
 800aab8:	f858 1b04 	ldr.w	r1, [r8], #4
 800aabc:	f8d0 e000 	ldr.w	lr, [r0]
 800aac0:	b28b      	uxth	r3, r1
 800aac2:	ebac 0303 	sub.w	r3, ip, r3
 800aac6:	fa1f f28e 	uxth.w	r2, lr
 800aaca:	4413      	add	r3, r2
 800aacc:	0c0a      	lsrs	r2, r1, #16
 800aace:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aadc:	45c1      	cmp	r9, r8
 800aade:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aae2:	f840 3b04 	str.w	r3, [r0], #4
 800aae6:	d2e7      	bcs.n	800aab8 <quorem+0xb2>
 800aae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaf0:	b922      	cbnz	r2, 800aafc <quorem+0xf6>
 800aaf2:	3b04      	subs	r3, #4
 800aaf4:	429d      	cmp	r5, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	d30a      	bcc.n	800ab10 <quorem+0x10a>
 800aafa:	613c      	str	r4, [r7, #16]
 800aafc:	4630      	mov	r0, r6
 800aafe:	b003      	add	sp, #12
 800ab00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	3b04      	subs	r3, #4
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d1cb      	bne.n	800aaa4 <quorem+0x9e>
 800ab0c:	3c01      	subs	r4, #1
 800ab0e:	e7c6      	b.n	800aa9e <quorem+0x98>
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	3b04      	subs	r3, #4
 800ab14:	2a00      	cmp	r2, #0
 800ab16:	d1f0      	bne.n	800aafa <quorem+0xf4>
 800ab18:	3c01      	subs	r4, #1
 800ab1a:	e7eb      	b.n	800aaf4 <quorem+0xee>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e7ee      	b.n	800aafe <quorem+0xf8>

0800ab20 <_dtoa_r>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	4616      	mov	r6, r2
 800ab26:	461f      	mov	r7, r3
 800ab28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab2a:	b099      	sub	sp, #100	; 0x64
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ab36:	b974      	cbnz	r4, 800ab56 <_dtoa_r+0x36>
 800ab38:	2010      	movs	r0, #16
 800ab3a:	f7fd fefd 	bl	8008938 <malloc>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	6268      	str	r0, [r5, #36]	; 0x24
 800ab42:	b920      	cbnz	r0, 800ab4e <_dtoa_r+0x2e>
 800ab44:	21ea      	movs	r1, #234	; 0xea
 800ab46:	4bae      	ldr	r3, [pc, #696]	; (800ae00 <_dtoa_r+0x2e0>)
 800ab48:	48ae      	ldr	r0, [pc, #696]	; (800ae04 <_dtoa_r+0x2e4>)
 800ab4a:	f7fd fe9b 	bl	8008884 <__assert_func>
 800ab4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab52:	6004      	str	r4, [r0, #0]
 800ab54:	60c4      	str	r4, [r0, #12]
 800ab56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	b151      	cbz	r1, 800ab72 <_dtoa_r+0x52>
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4093      	lsls	r3, r2
 800ab62:	604a      	str	r2, [r1, #4]
 800ab64:	608b      	str	r3, [r1, #8]
 800ab66:	4628      	mov	r0, r5
 800ab68:	f001 fbd8 	bl	800c31c <_Bfree>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	1e3b      	subs	r3, r7, #0
 800ab74:	bfaf      	iteee	ge
 800ab76:	2300      	movge	r3, #0
 800ab78:	2201      	movlt	r2, #1
 800ab7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ab7e:	9305      	strlt	r3, [sp, #20]
 800ab80:	bfa8      	it	ge
 800ab82:	f8c8 3000 	strge.w	r3, [r8]
 800ab86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ab8a:	4b9f      	ldr	r3, [pc, #636]	; (800ae08 <_dtoa_r+0x2e8>)
 800ab8c:	bfb8      	it	lt
 800ab8e:	f8c8 2000 	strlt.w	r2, [r8]
 800ab92:	ea33 0309 	bics.w	r3, r3, r9
 800ab96:	d119      	bne.n	800abcc <_dtoa_r+0xac>
 800ab98:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aba4:	4333      	orrs	r3, r6
 800aba6:	f000 8580 	beq.w	800b6aa <_dtoa_r+0xb8a>
 800abaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abac:	b953      	cbnz	r3, 800abc4 <_dtoa_r+0xa4>
 800abae:	4b97      	ldr	r3, [pc, #604]	; (800ae0c <_dtoa_r+0x2ec>)
 800abb0:	e022      	b.n	800abf8 <_dtoa_r+0xd8>
 800abb2:	4b97      	ldr	r3, [pc, #604]	; (800ae10 <_dtoa_r+0x2f0>)
 800abb4:	9308      	str	r3, [sp, #32]
 800abb6:	3308      	adds	r3, #8
 800abb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	9808      	ldr	r0, [sp, #32]
 800abbe:	b019      	add	sp, #100	; 0x64
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc4:	4b91      	ldr	r3, [pc, #580]	; (800ae0c <_dtoa_r+0x2ec>)
 800abc6:	9308      	str	r3, [sp, #32]
 800abc8:	3303      	adds	r3, #3
 800abca:	e7f5      	b.n	800abb8 <_dtoa_r+0x98>
 800abcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800abd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800abd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abd8:	2200      	movs	r2, #0
 800abda:	2300      	movs	r3, #0
 800abdc:	f7f5 fee4 	bl	80009a8 <__aeabi_dcmpeq>
 800abe0:	4680      	mov	r8, r0
 800abe2:	b158      	cbz	r0, 800abfc <_dtoa_r+0xdc>
 800abe4:	2301      	movs	r3, #1
 800abe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 8559 	beq.w	800b6a4 <_dtoa_r+0xb84>
 800abf2:	4888      	ldr	r0, [pc, #544]	; (800ae14 <_dtoa_r+0x2f4>)
 800abf4:	6018      	str	r0, [r3, #0]
 800abf6:	1e43      	subs	r3, r0, #1
 800abf8:	9308      	str	r3, [sp, #32]
 800abfa:	e7df      	b.n	800abbc <_dtoa_r+0x9c>
 800abfc:	ab16      	add	r3, sp, #88	; 0x58
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	ab17      	add	r3, sp, #92	; 0x5c
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4628      	mov	r0, r5
 800ac06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac0a:	f001 ff31 	bl	800ca70 <__d2b>
 800ac0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac12:	4682      	mov	sl, r0
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	d07e      	beq.n	800ad16 <_dtoa_r+0x1f6>
 800ac18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ac2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ac2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ac32:	2200      	movs	r2, #0
 800ac34:	4b78      	ldr	r3, [pc, #480]	; (800ae18 <_dtoa_r+0x2f8>)
 800ac36:	f7f5 fa97 	bl	8000168 <__aeabi_dsub>
 800ac3a:	a36b      	add	r3, pc, #428	; (adr r3, 800ade8 <_dtoa_r+0x2c8>)
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f7f5 fc4a 	bl	80004d8 <__aeabi_dmul>
 800ac44:	a36a      	add	r3, pc, #424	; (adr r3, 800adf0 <_dtoa_r+0x2d0>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fa8f 	bl	800016c <__adddf3>
 800ac4e:	4606      	mov	r6, r0
 800ac50:	4620      	mov	r0, r4
 800ac52:	460f      	mov	r7, r1
 800ac54:	f7f5 fbd6 	bl	8000404 <__aeabi_i2d>
 800ac58:	a367      	add	r3, pc, #412	; (adr r3, 800adf8 <_dtoa_r+0x2d8>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fc3b 	bl	80004d8 <__aeabi_dmul>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4630      	mov	r0, r6
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7f5 fa7f 	bl	800016c <__adddf3>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	460f      	mov	r7, r1
 800ac72:	f7f5 fee1 	bl	8000a38 <__aeabi_d2iz>
 800ac76:	2200      	movs	r2, #0
 800ac78:	4681      	mov	r9, r0
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f7f5 fe9c 	bl	80009bc <__aeabi_dcmplt>
 800ac84:	b148      	cbz	r0, 800ac9a <_dtoa_r+0x17a>
 800ac86:	4648      	mov	r0, r9
 800ac88:	f7f5 fbbc 	bl	8000404 <__aeabi_i2d>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	f7f5 fe8a 	bl	80009a8 <__aeabi_dcmpeq>
 800ac94:	b908      	cbnz	r0, 800ac9a <_dtoa_r+0x17a>
 800ac96:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac9a:	f1b9 0f16 	cmp.w	r9, #22
 800ac9e:	d857      	bhi.n	800ad50 <_dtoa_r+0x230>
 800aca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aca4:	4b5d      	ldr	r3, [pc, #372]	; (800ae1c <_dtoa_r+0x2fc>)
 800aca6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f7f5 fe85 	bl	80009bc <__aeabi_dcmplt>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d04e      	beq.n	800ad54 <_dtoa_r+0x234>
 800acb6:	2300      	movs	r3, #0
 800acb8:	f109 39ff 	add.w	r9, r9, #4294967295
 800acbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800acbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acc0:	1b1c      	subs	r4, r3, r4
 800acc2:	1e63      	subs	r3, r4, #1
 800acc4:	9309      	str	r3, [sp, #36]	; 0x24
 800acc6:	bf49      	itett	mi
 800acc8:	f1c4 0301 	rsbmi	r3, r4, #1
 800accc:	2300      	movpl	r3, #0
 800acce:	9306      	strmi	r3, [sp, #24]
 800acd0:	2300      	movmi	r3, #0
 800acd2:	bf54      	ite	pl
 800acd4:	9306      	strpl	r3, [sp, #24]
 800acd6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800acd8:	f1b9 0f00 	cmp.w	r9, #0
 800acdc:	db3c      	blt.n	800ad58 <_dtoa_r+0x238>
 800acde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ace4:	444b      	add	r3, r9
 800ace6:	9309      	str	r3, [sp, #36]	; 0x24
 800ace8:	2300      	movs	r3, #0
 800acea:	930a      	str	r3, [sp, #40]	; 0x28
 800acec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acee:	2b09      	cmp	r3, #9
 800acf0:	d86c      	bhi.n	800adcc <_dtoa_r+0x2ac>
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	bfc4      	itt	gt
 800acf6:	3b04      	subgt	r3, #4
 800acf8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800acfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acfc:	bfc8      	it	gt
 800acfe:	2400      	movgt	r4, #0
 800ad00:	f1a3 0302 	sub.w	r3, r3, #2
 800ad04:	bfd8      	it	le
 800ad06:	2401      	movle	r4, #1
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	f200 808b 	bhi.w	800ae24 <_dtoa_r+0x304>
 800ad0e:	e8df f003 	tbb	[pc, r3]
 800ad12:	4f2d      	.short	0x4f2d
 800ad14:	5b4d      	.short	0x5b4d
 800ad16:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ad1a:	441c      	add	r4, r3
 800ad1c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ad20:	2b20      	cmp	r3, #32
 800ad22:	bfc3      	ittte	gt
 800ad24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad28:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ad2c:	fa09 f303 	lslgt.w	r3, r9, r3
 800ad30:	f1c3 0320 	rsble	r3, r3, #32
 800ad34:	bfc6      	itte	gt
 800ad36:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad3a:	4318      	orrgt	r0, r3
 800ad3c:	fa06 f003 	lslle.w	r0, r6, r3
 800ad40:	f7f5 fb50 	bl	80003e4 <__aeabi_ui2d>
 800ad44:	2301      	movs	r3, #1
 800ad46:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ad4a:	3c01      	subs	r4, #1
 800ad4c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad4e:	e770      	b.n	800ac32 <_dtoa_r+0x112>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e7b3      	b.n	800acbc <_dtoa_r+0x19c>
 800ad54:	900f      	str	r0, [sp, #60]	; 0x3c
 800ad56:	e7b2      	b.n	800acbe <_dtoa_r+0x19e>
 800ad58:	9b06      	ldr	r3, [sp, #24]
 800ad5a:	eba3 0309 	sub.w	r3, r3, r9
 800ad5e:	9306      	str	r3, [sp, #24]
 800ad60:	f1c9 0300 	rsb	r3, r9, #0
 800ad64:	930a      	str	r3, [sp, #40]	; 0x28
 800ad66:	2300      	movs	r3, #0
 800ad68:	930e      	str	r3, [sp, #56]	; 0x38
 800ad6a:	e7bf      	b.n	800acec <_dtoa_r+0x1cc>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc59      	bgt.n	800ae2a <_dtoa_r+0x30a>
 800ad76:	f04f 0b01 	mov.w	fp, #1
 800ad7a:	465b      	mov	r3, fp
 800ad7c:	f8cd b008 	str.w	fp, [sp, #8]
 800ad80:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ad84:	2200      	movs	r2, #0
 800ad86:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ad88:	6042      	str	r2, [r0, #4]
 800ad8a:	2204      	movs	r2, #4
 800ad8c:	f102 0614 	add.w	r6, r2, #20
 800ad90:	429e      	cmp	r6, r3
 800ad92:	6841      	ldr	r1, [r0, #4]
 800ad94:	d94f      	bls.n	800ae36 <_dtoa_r+0x316>
 800ad96:	4628      	mov	r0, r5
 800ad98:	f001 fa80 	bl	800c29c <_Balloc>
 800ad9c:	9008      	str	r0, [sp, #32]
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d14d      	bne.n	800ae3e <_dtoa_r+0x31e>
 800ada2:	4602      	mov	r2, r0
 800ada4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ada8:	4b1d      	ldr	r3, [pc, #116]	; (800ae20 <_dtoa_r+0x300>)
 800adaa:	e6cd      	b.n	800ab48 <_dtoa_r+0x28>
 800adac:	2301      	movs	r3, #1
 800adae:	e7de      	b.n	800ad6e <_dtoa_r+0x24e>
 800adb0:	2300      	movs	r3, #0
 800adb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800adb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adb6:	eb09 0b03 	add.w	fp, r9, r3
 800adba:	f10b 0301 	add.w	r3, fp, #1
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	9302      	str	r3, [sp, #8]
 800adc2:	bfb8      	it	lt
 800adc4:	2301      	movlt	r3, #1
 800adc6:	e7dd      	b.n	800ad84 <_dtoa_r+0x264>
 800adc8:	2301      	movs	r3, #1
 800adca:	e7f2      	b.n	800adb2 <_dtoa_r+0x292>
 800adcc:	2401      	movs	r4, #1
 800adce:	2300      	movs	r3, #0
 800add0:	940b      	str	r4, [sp, #44]	; 0x2c
 800add2:	9322      	str	r3, [sp, #136]	; 0x88
 800add4:	f04f 3bff 	mov.w	fp, #4294967295
 800add8:	2200      	movs	r2, #0
 800adda:	2312      	movs	r3, #18
 800addc:	f8cd b008 	str.w	fp, [sp, #8]
 800ade0:	9223      	str	r2, [sp, #140]	; 0x8c
 800ade2:	e7cf      	b.n	800ad84 <_dtoa_r+0x264>
 800ade4:	f3af 8000 	nop.w
 800ade8:	636f4361 	.word	0x636f4361
 800adec:	3fd287a7 	.word	0x3fd287a7
 800adf0:	8b60c8b3 	.word	0x8b60c8b3
 800adf4:	3fc68a28 	.word	0x3fc68a28
 800adf8:	509f79fb 	.word	0x509f79fb
 800adfc:	3fd34413 	.word	0x3fd34413
 800ae00:	0801058e 	.word	0x0801058e
 800ae04:	080105a5 	.word	0x080105a5
 800ae08:	7ff00000 	.word	0x7ff00000
 800ae0c:	0801058a 	.word	0x0801058a
 800ae10:	08010581 	.word	0x08010581
 800ae14:	08010406 	.word	0x08010406
 800ae18:	3ff80000 	.word	0x3ff80000
 800ae1c:	08010780 	.word	0x08010780
 800ae20:	08010604 	.word	0x08010604
 800ae24:	2301      	movs	r3, #1
 800ae26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae28:	e7d4      	b.n	800add4 <_dtoa_r+0x2b4>
 800ae2a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800ae2e:	465b      	mov	r3, fp
 800ae30:	f8cd b008 	str.w	fp, [sp, #8]
 800ae34:	e7a6      	b.n	800ad84 <_dtoa_r+0x264>
 800ae36:	3101      	adds	r1, #1
 800ae38:	6041      	str	r1, [r0, #4]
 800ae3a:	0052      	lsls	r2, r2, #1
 800ae3c:	e7a6      	b.n	800ad8c <_dtoa_r+0x26c>
 800ae3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae40:	9a08      	ldr	r2, [sp, #32]
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	9b02      	ldr	r3, [sp, #8]
 800ae46:	2b0e      	cmp	r3, #14
 800ae48:	f200 80a8 	bhi.w	800af9c <_dtoa_r+0x47c>
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	f000 80a5 	beq.w	800af9c <_dtoa_r+0x47c>
 800ae52:	f1b9 0f00 	cmp.w	r9, #0
 800ae56:	dd34      	ble.n	800aec2 <_dtoa_r+0x3a2>
 800ae58:	4a9a      	ldr	r2, [pc, #616]	; (800b0c4 <_dtoa_r+0x5a4>)
 800ae5a:	f009 030f 	and.w	r3, r9, #15
 800ae5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae62:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ae66:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ae6e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ae72:	d016      	beq.n	800aea2 <_dtoa_r+0x382>
 800ae74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae78:	4b93      	ldr	r3, [pc, #588]	; (800b0c8 <_dtoa_r+0x5a8>)
 800ae7a:	2703      	movs	r7, #3
 800ae7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae80:	f7f5 fc54 	bl	800072c <__aeabi_ddiv>
 800ae84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae88:	f004 040f 	and.w	r4, r4, #15
 800ae8c:	4e8e      	ldr	r6, [pc, #568]	; (800b0c8 <_dtoa_r+0x5a8>)
 800ae8e:	b954      	cbnz	r4, 800aea6 <_dtoa_r+0x386>
 800ae90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae98:	f7f5 fc48 	bl	800072c <__aeabi_ddiv>
 800ae9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aea0:	e029      	b.n	800aef6 <_dtoa_r+0x3d6>
 800aea2:	2702      	movs	r7, #2
 800aea4:	e7f2      	b.n	800ae8c <_dtoa_r+0x36c>
 800aea6:	07e1      	lsls	r1, r4, #31
 800aea8:	d508      	bpl.n	800aebc <_dtoa_r+0x39c>
 800aeaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aeae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aeb2:	f7f5 fb11 	bl	80004d8 <__aeabi_dmul>
 800aeb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aeba:	3701      	adds	r7, #1
 800aebc:	1064      	asrs	r4, r4, #1
 800aebe:	3608      	adds	r6, #8
 800aec0:	e7e5      	b.n	800ae8e <_dtoa_r+0x36e>
 800aec2:	f000 80a5 	beq.w	800b010 <_dtoa_r+0x4f0>
 800aec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aeca:	f1c9 0400 	rsb	r4, r9, #0
 800aece:	4b7d      	ldr	r3, [pc, #500]	; (800b0c4 <_dtoa_r+0x5a4>)
 800aed0:	f004 020f 	and.w	r2, r4, #15
 800aed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	f7f5 fafc 	bl	80004d8 <__aeabi_dmul>
 800aee0:	2702      	movs	r7, #2
 800aee2:	2300      	movs	r3, #0
 800aee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aee8:	4e77      	ldr	r6, [pc, #476]	; (800b0c8 <_dtoa_r+0x5a8>)
 800aeea:	1124      	asrs	r4, r4, #4
 800aeec:	2c00      	cmp	r4, #0
 800aeee:	f040 8084 	bne.w	800affa <_dtoa_r+0x4da>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1d2      	bne.n	800ae9c <_dtoa_r+0x37c>
 800aef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 808b 	beq.w	800b014 <_dtoa_r+0x4f4>
 800aefe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800af06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af0a:	2200      	movs	r2, #0
 800af0c:	4b6f      	ldr	r3, [pc, #444]	; (800b0cc <_dtoa_r+0x5ac>)
 800af0e:	f7f5 fd55 	bl	80009bc <__aeabi_dcmplt>
 800af12:	2800      	cmp	r0, #0
 800af14:	d07e      	beq.n	800b014 <_dtoa_r+0x4f4>
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d07b      	beq.n	800b014 <_dtoa_r+0x4f4>
 800af1c:	f1bb 0f00 	cmp.w	fp, #0
 800af20:	dd38      	ble.n	800af94 <_dtoa_r+0x474>
 800af22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af26:	2200      	movs	r2, #0
 800af28:	4b69      	ldr	r3, [pc, #420]	; (800b0d0 <_dtoa_r+0x5b0>)
 800af2a:	f7f5 fad5 	bl	80004d8 <__aeabi_dmul>
 800af2e:	465c      	mov	r4, fp
 800af30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af34:	f109 38ff 	add.w	r8, r9, #4294967295
 800af38:	3701      	adds	r7, #1
 800af3a:	4638      	mov	r0, r7
 800af3c:	f7f5 fa62 	bl	8000404 <__aeabi_i2d>
 800af40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af44:	f7f5 fac8 	bl	80004d8 <__aeabi_dmul>
 800af48:	2200      	movs	r2, #0
 800af4a:	4b62      	ldr	r3, [pc, #392]	; (800b0d4 <_dtoa_r+0x5b4>)
 800af4c:	f7f5 f90e 	bl	800016c <__adddf3>
 800af50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800af54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af58:	9611      	str	r6, [sp, #68]	; 0x44
 800af5a:	2c00      	cmp	r4, #0
 800af5c:	d15d      	bne.n	800b01a <_dtoa_r+0x4fa>
 800af5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af62:	2200      	movs	r2, #0
 800af64:	4b5c      	ldr	r3, [pc, #368]	; (800b0d8 <_dtoa_r+0x5b8>)
 800af66:	f7f5 f8ff 	bl	8000168 <__aeabi_dsub>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af72:	4633      	mov	r3, r6
 800af74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af76:	f7f5 fd3f 	bl	80009f8 <__aeabi_dcmpgt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f040 829e 	bne.w	800b4bc <_dtoa_r+0x99c>
 800af80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800af8a:	f7f5 fd17 	bl	80009bc <__aeabi_dcmplt>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f040 8292 	bne.w	800b4b8 <_dtoa_r+0x998>
 800af94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800af98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f2c0 8153 	blt.w	800b24a <_dtoa_r+0x72a>
 800afa4:	f1b9 0f0e 	cmp.w	r9, #14
 800afa8:	f300 814f 	bgt.w	800b24a <_dtoa_r+0x72a>
 800afac:	4b45      	ldr	r3, [pc, #276]	; (800b0c4 <_dtoa_r+0x5a4>)
 800afae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800afb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800afba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f280 80db 	bge.w	800b178 <_dtoa_r+0x658>
 800afc2:	9b02      	ldr	r3, [sp, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f300 80d7 	bgt.w	800b178 <_dtoa_r+0x658>
 800afca:	f040 8274 	bne.w	800b4b6 <_dtoa_r+0x996>
 800afce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afd2:	2200      	movs	r2, #0
 800afd4:	4b40      	ldr	r3, [pc, #256]	; (800b0d8 <_dtoa_r+0x5b8>)
 800afd6:	f7f5 fa7f 	bl	80004d8 <__aeabi_dmul>
 800afda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afde:	f7f5 fd01 	bl	80009e4 <__aeabi_dcmpge>
 800afe2:	9c02      	ldr	r4, [sp, #8]
 800afe4:	4626      	mov	r6, r4
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f040 824a 	bne.w	800b480 <_dtoa_r+0x960>
 800afec:	2331      	movs	r3, #49	; 0x31
 800afee:	9f08      	ldr	r7, [sp, #32]
 800aff0:	f109 0901 	add.w	r9, r9, #1
 800aff4:	f807 3b01 	strb.w	r3, [r7], #1
 800aff8:	e246      	b.n	800b488 <_dtoa_r+0x968>
 800affa:	07e2      	lsls	r2, r4, #31
 800affc:	d505      	bpl.n	800b00a <_dtoa_r+0x4ea>
 800affe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b002:	f7f5 fa69 	bl	80004d8 <__aeabi_dmul>
 800b006:	2301      	movs	r3, #1
 800b008:	3701      	adds	r7, #1
 800b00a:	1064      	asrs	r4, r4, #1
 800b00c:	3608      	adds	r6, #8
 800b00e:	e76d      	b.n	800aeec <_dtoa_r+0x3cc>
 800b010:	2702      	movs	r7, #2
 800b012:	e770      	b.n	800aef6 <_dtoa_r+0x3d6>
 800b014:	46c8      	mov	r8, r9
 800b016:	9c02      	ldr	r4, [sp, #8]
 800b018:	e78f      	b.n	800af3a <_dtoa_r+0x41a>
 800b01a:	9908      	ldr	r1, [sp, #32]
 800b01c:	4b29      	ldr	r3, [pc, #164]	; (800b0c4 <_dtoa_r+0x5a4>)
 800b01e:	4421      	add	r1, r4
 800b020:	9112      	str	r1, [sp, #72]	; 0x48
 800b022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b024:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b028:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b02c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b030:	2900      	cmp	r1, #0
 800b032:	d055      	beq.n	800b0e0 <_dtoa_r+0x5c0>
 800b034:	2000      	movs	r0, #0
 800b036:	4929      	ldr	r1, [pc, #164]	; (800b0dc <_dtoa_r+0x5bc>)
 800b038:	f7f5 fb78 	bl	800072c <__aeabi_ddiv>
 800b03c:	463b      	mov	r3, r7
 800b03e:	4632      	mov	r2, r6
 800b040:	f7f5 f892 	bl	8000168 <__aeabi_dsub>
 800b044:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b048:	9f08      	ldr	r7, [sp, #32]
 800b04a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b04e:	f7f5 fcf3 	bl	8000a38 <__aeabi_d2iz>
 800b052:	4604      	mov	r4, r0
 800b054:	f7f5 f9d6 	bl	8000404 <__aeabi_i2d>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b060:	f7f5 f882 	bl	8000168 <__aeabi_dsub>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	3430      	adds	r4, #48	; 0x30
 800b06a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b06e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b072:	f807 4b01 	strb.w	r4, [r7], #1
 800b076:	f7f5 fca1 	bl	80009bc <__aeabi_dcmplt>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d174      	bne.n	800b168 <_dtoa_r+0x648>
 800b07e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b082:	2000      	movs	r0, #0
 800b084:	4911      	ldr	r1, [pc, #68]	; (800b0cc <_dtoa_r+0x5ac>)
 800b086:	f7f5 f86f 	bl	8000168 <__aeabi_dsub>
 800b08a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b08e:	f7f5 fc95 	bl	80009bc <__aeabi_dcmplt>
 800b092:	2800      	cmp	r0, #0
 800b094:	f040 80b6 	bne.w	800b204 <_dtoa_r+0x6e4>
 800b098:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b09a:	429f      	cmp	r7, r3
 800b09c:	f43f af7a 	beq.w	800af94 <_dtoa_r+0x474>
 800b0a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <_dtoa_r+0x5b0>)
 800b0a8:	f7f5 fa16 	bl	80004d8 <__aeabi_dmul>
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0b6:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <_dtoa_r+0x5b0>)
 800b0b8:	f7f5 fa0e 	bl	80004d8 <__aeabi_dmul>
 800b0bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0c0:	e7c3      	b.n	800b04a <_dtoa_r+0x52a>
 800b0c2:	bf00      	nop
 800b0c4:	08010780 	.word	0x08010780
 800b0c8:	08010758 	.word	0x08010758
 800b0cc:	3ff00000 	.word	0x3ff00000
 800b0d0:	40240000 	.word	0x40240000
 800b0d4:	401c0000 	.word	0x401c0000
 800b0d8:	40140000 	.word	0x40140000
 800b0dc:	3fe00000 	.word	0x3fe00000
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 f9f8 	bl	80004d8 <__aeabi_dmul>
 800b0e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0ee:	9c08      	ldr	r4, [sp, #32]
 800b0f0:	9314      	str	r3, [sp, #80]	; 0x50
 800b0f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0f6:	f7f5 fc9f 	bl	8000a38 <__aeabi_d2iz>
 800b0fa:	9015      	str	r0, [sp, #84]	; 0x54
 800b0fc:	f7f5 f982 	bl	8000404 <__aeabi_i2d>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b108:	f7f5 f82e 	bl	8000168 <__aeabi_dsub>
 800b10c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b10e:	4606      	mov	r6, r0
 800b110:	3330      	adds	r3, #48	; 0x30
 800b112:	f804 3b01 	strb.w	r3, [r4], #1
 800b116:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b118:	460f      	mov	r7, r1
 800b11a:	429c      	cmp	r4, r3
 800b11c:	f04f 0200 	mov.w	r2, #0
 800b120:	d124      	bne.n	800b16c <_dtoa_r+0x64c>
 800b122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b126:	4bb3      	ldr	r3, [pc, #716]	; (800b3f4 <_dtoa_r+0x8d4>)
 800b128:	f7f5 f820 	bl	800016c <__adddf3>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4630      	mov	r0, r6
 800b132:	4639      	mov	r1, r7
 800b134:	f7f5 fc60 	bl	80009f8 <__aeabi_dcmpgt>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d162      	bne.n	800b202 <_dtoa_r+0x6e2>
 800b13c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b140:	2000      	movs	r0, #0
 800b142:	49ac      	ldr	r1, [pc, #688]	; (800b3f4 <_dtoa_r+0x8d4>)
 800b144:	f7f5 f810 	bl	8000168 <__aeabi_dsub>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4630      	mov	r0, r6
 800b14e:	4639      	mov	r1, r7
 800b150:	f7f5 fc34 	bl	80009bc <__aeabi_dcmplt>
 800b154:	2800      	cmp	r0, #0
 800b156:	f43f af1d 	beq.w	800af94 <_dtoa_r+0x474>
 800b15a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b15c:	1e7b      	subs	r3, r7, #1
 800b15e:	9314      	str	r3, [sp, #80]	; 0x50
 800b160:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b164:	2b30      	cmp	r3, #48	; 0x30
 800b166:	d0f8      	beq.n	800b15a <_dtoa_r+0x63a>
 800b168:	46c1      	mov	r9, r8
 800b16a:	e03a      	b.n	800b1e2 <_dtoa_r+0x6c2>
 800b16c:	4ba2      	ldr	r3, [pc, #648]	; (800b3f8 <_dtoa_r+0x8d8>)
 800b16e:	f7f5 f9b3 	bl	80004d8 <__aeabi_dmul>
 800b172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b176:	e7bc      	b.n	800b0f2 <_dtoa_r+0x5d2>
 800b178:	9f08      	ldr	r7, [sp, #32]
 800b17a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b182:	f7f5 fad3 	bl	800072c <__aeabi_ddiv>
 800b186:	f7f5 fc57 	bl	8000a38 <__aeabi_d2iz>
 800b18a:	4604      	mov	r4, r0
 800b18c:	f7f5 f93a 	bl	8000404 <__aeabi_i2d>
 800b190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b194:	f7f5 f9a0 	bl	80004d8 <__aeabi_dmul>
 800b198:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b19c:	460b      	mov	r3, r1
 800b19e:	4602      	mov	r2, r0
 800b1a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1a4:	f7f4 ffe0 	bl	8000168 <__aeabi_dsub>
 800b1a8:	f807 6b01 	strb.w	r6, [r7], #1
 800b1ac:	9e08      	ldr	r6, [sp, #32]
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	1bbe      	subs	r6, r7, r6
 800b1b2:	42b3      	cmp	r3, r6
 800b1b4:	d13a      	bne.n	800b22c <_dtoa_r+0x70c>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	f7f4 ffd7 	bl	800016c <__adddf3>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1ca:	f7f5 fc15 	bl	80009f8 <__aeabi_dcmpgt>
 800b1ce:	bb58      	cbnz	r0, 800b228 <_dtoa_r+0x708>
 800b1d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d8:	f7f5 fbe6 	bl	80009a8 <__aeabi_dcmpeq>
 800b1dc:	b108      	cbz	r0, 800b1e2 <_dtoa_r+0x6c2>
 800b1de:	07e1      	lsls	r1, r4, #31
 800b1e0:	d422      	bmi.n	800b228 <_dtoa_r+0x708>
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	4651      	mov	r1, sl
 800b1e6:	f001 f899 	bl	800c31c <_Bfree>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	703b      	strb	r3, [r7, #0]
 800b1ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b1f0:	f109 0001 	add.w	r0, r9, #1
 800b1f4:	6018      	str	r0, [r3, #0]
 800b1f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f43f acdf 	beq.w	800abbc <_dtoa_r+0x9c>
 800b1fe:	601f      	str	r7, [r3, #0]
 800b200:	e4dc      	b.n	800abbc <_dtoa_r+0x9c>
 800b202:	4627      	mov	r7, r4
 800b204:	463b      	mov	r3, r7
 800b206:	461f      	mov	r7, r3
 800b208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b20c:	2a39      	cmp	r2, #57	; 0x39
 800b20e:	d107      	bne.n	800b220 <_dtoa_r+0x700>
 800b210:	9a08      	ldr	r2, [sp, #32]
 800b212:	429a      	cmp	r2, r3
 800b214:	d1f7      	bne.n	800b206 <_dtoa_r+0x6e6>
 800b216:	2230      	movs	r2, #48	; 0x30
 800b218:	9908      	ldr	r1, [sp, #32]
 800b21a:	f108 0801 	add.w	r8, r8, #1
 800b21e:	700a      	strb	r2, [r1, #0]
 800b220:	781a      	ldrb	r2, [r3, #0]
 800b222:	3201      	adds	r2, #1
 800b224:	701a      	strb	r2, [r3, #0]
 800b226:	e79f      	b.n	800b168 <_dtoa_r+0x648>
 800b228:	46c8      	mov	r8, r9
 800b22a:	e7eb      	b.n	800b204 <_dtoa_r+0x6e4>
 800b22c:	2200      	movs	r2, #0
 800b22e:	4b72      	ldr	r3, [pc, #456]	; (800b3f8 <_dtoa_r+0x8d8>)
 800b230:	f7f5 f952 	bl	80004d8 <__aeabi_dmul>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b23c:	2200      	movs	r2, #0
 800b23e:	2300      	movs	r3, #0
 800b240:	f7f5 fbb2 	bl	80009a8 <__aeabi_dcmpeq>
 800b244:	2800      	cmp	r0, #0
 800b246:	d098      	beq.n	800b17a <_dtoa_r+0x65a>
 800b248:	e7cb      	b.n	800b1e2 <_dtoa_r+0x6c2>
 800b24a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b24c:	2a00      	cmp	r2, #0
 800b24e:	f000 80cd 	beq.w	800b3ec <_dtoa_r+0x8cc>
 800b252:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b254:	2a01      	cmp	r2, #1
 800b256:	f300 80af 	bgt.w	800b3b8 <_dtoa_r+0x898>
 800b25a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	f000 80a7 	beq.w	800b3b0 <_dtoa_r+0x890>
 800b262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b266:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b268:	9f06      	ldr	r7, [sp, #24]
 800b26a:	9a06      	ldr	r2, [sp, #24]
 800b26c:	2101      	movs	r1, #1
 800b26e:	441a      	add	r2, r3
 800b270:	9206      	str	r2, [sp, #24]
 800b272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b274:	4628      	mov	r0, r5
 800b276:	441a      	add	r2, r3
 800b278:	9209      	str	r2, [sp, #36]	; 0x24
 800b27a:	f001 f953 	bl	800c524 <__i2b>
 800b27e:	4606      	mov	r6, r0
 800b280:	2f00      	cmp	r7, #0
 800b282:	dd0c      	ble.n	800b29e <_dtoa_r+0x77e>
 800b284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b286:	2b00      	cmp	r3, #0
 800b288:	dd09      	ble.n	800b29e <_dtoa_r+0x77e>
 800b28a:	42bb      	cmp	r3, r7
 800b28c:	bfa8      	it	ge
 800b28e:	463b      	movge	r3, r7
 800b290:	9a06      	ldr	r2, [sp, #24]
 800b292:	1aff      	subs	r7, r7, r3
 800b294:	1ad2      	subs	r2, r2, r3
 800b296:	9206      	str	r2, [sp, #24]
 800b298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	9309      	str	r3, [sp, #36]	; 0x24
 800b29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a0:	b1f3      	cbz	r3, 800b2e0 <_dtoa_r+0x7c0>
 800b2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 80a9 	beq.w	800b3fc <_dtoa_r+0x8dc>
 800b2aa:	2c00      	cmp	r4, #0
 800b2ac:	dd10      	ble.n	800b2d0 <_dtoa_r+0x7b0>
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f001 f9f0 	bl	800c698 <__pow5mult>
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	4606      	mov	r6, r0
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f001 f946 	bl	800c550 <__multiply>
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4651      	mov	r1, sl
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f001 f827 	bl	800c31c <_Bfree>
 800b2ce:	46c2      	mov	sl, r8
 800b2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d2:	1b1a      	subs	r2, r3, r4
 800b2d4:	d004      	beq.n	800b2e0 <_dtoa_r+0x7c0>
 800b2d6:	4651      	mov	r1, sl
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f001 f9dd 	bl	800c698 <__pow5mult>
 800b2de:	4682      	mov	sl, r0
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f001 f91e 	bl	800c524 <__i2b>
 800b2e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f340 8087 	ble.w	800b400 <_dtoa_r+0x8e0>
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4601      	mov	r1, r0
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f001 f9ce 	bl	800c698 <__pow5mult>
 800b2fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2fe:	4604      	mov	r4, r0
 800b300:	2b01      	cmp	r3, #1
 800b302:	f340 8080 	ble.w	800b406 <_dtoa_r+0x8e6>
 800b306:	f04f 0800 	mov.w	r8, #0
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b310:	6918      	ldr	r0, [r3, #16]
 800b312:	f001 f8b9 	bl	800c488 <__hi0bits>
 800b316:	f1c0 0020 	rsb	r0, r0, #32
 800b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31c:	4418      	add	r0, r3
 800b31e:	f010 001f 	ands.w	r0, r0, #31
 800b322:	f000 8092 	beq.w	800b44a <_dtoa_r+0x92a>
 800b326:	f1c0 0320 	rsb	r3, r0, #32
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	f340 808a 	ble.w	800b444 <_dtoa_r+0x924>
 800b330:	f1c0 001c 	rsb	r0, r0, #28
 800b334:	9b06      	ldr	r3, [sp, #24]
 800b336:	4407      	add	r7, r0
 800b338:	4403      	add	r3, r0
 800b33a:	9306      	str	r3, [sp, #24]
 800b33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33e:	4403      	add	r3, r0
 800b340:	9309      	str	r3, [sp, #36]	; 0x24
 800b342:	9b06      	ldr	r3, [sp, #24]
 800b344:	2b00      	cmp	r3, #0
 800b346:	dd05      	ble.n	800b354 <_dtoa_r+0x834>
 800b348:	4651      	mov	r1, sl
 800b34a:	461a      	mov	r2, r3
 800b34c:	4628      	mov	r0, r5
 800b34e:	f001 f9fd 	bl	800c74c <__lshift>
 800b352:	4682      	mov	sl, r0
 800b354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	dd05      	ble.n	800b366 <_dtoa_r+0x846>
 800b35a:	4621      	mov	r1, r4
 800b35c:	461a      	mov	r2, r3
 800b35e:	4628      	mov	r0, r5
 800b360:	f001 f9f4 	bl	800c74c <__lshift>
 800b364:	4604      	mov	r4, r0
 800b366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d070      	beq.n	800b44e <_dtoa_r+0x92e>
 800b36c:	4621      	mov	r1, r4
 800b36e:	4650      	mov	r0, sl
 800b370:	f001 fa58 	bl	800c824 <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	da6a      	bge.n	800b44e <_dtoa_r+0x92e>
 800b378:	2300      	movs	r3, #0
 800b37a:	4651      	mov	r1, sl
 800b37c:	220a      	movs	r2, #10
 800b37e:	4628      	mov	r0, r5
 800b380:	f000 ffee 	bl	800c360 <__multadd>
 800b384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b386:	4682      	mov	sl, r0
 800b388:	f109 39ff 	add.w	r9, r9, #4294967295
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8193 	beq.w	800b6b8 <_dtoa_r+0xb98>
 800b392:	4631      	mov	r1, r6
 800b394:	2300      	movs	r3, #0
 800b396:	220a      	movs	r2, #10
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 ffe1 	bl	800c360 <__multadd>
 800b39e:	f1bb 0f00 	cmp.w	fp, #0
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	f300 8093 	bgt.w	800b4ce <_dtoa_r+0x9ae>
 800b3a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	dc57      	bgt.n	800b45e <_dtoa_r+0x93e>
 800b3ae:	e08e      	b.n	800b4ce <_dtoa_r+0x9ae>
 800b3b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3b6:	e756      	b.n	800b266 <_dtoa_r+0x746>
 800b3b8:	9b02      	ldr	r3, [sp, #8]
 800b3ba:	1e5c      	subs	r4, r3, #1
 800b3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3be:	42a3      	cmp	r3, r4
 800b3c0:	bfb7      	itett	lt
 800b3c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3c4:	1b1c      	subge	r4, r3, r4
 800b3c6:	1ae2      	sublt	r2, r4, r3
 800b3c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b3ca:	bfbe      	ittt	lt
 800b3cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b3ce:	189b      	addlt	r3, r3, r2
 800b3d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b3d2:	9b02      	ldr	r3, [sp, #8]
 800b3d4:	bfb8      	it	lt
 800b3d6:	2400      	movlt	r4, #0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bfbb      	ittet	lt
 800b3dc:	9b06      	ldrlt	r3, [sp, #24]
 800b3de:	9a02      	ldrlt	r2, [sp, #8]
 800b3e0:	9f06      	ldrge	r7, [sp, #24]
 800b3e2:	1a9f      	sublt	r7, r3, r2
 800b3e4:	bfac      	ite	ge
 800b3e6:	9b02      	ldrge	r3, [sp, #8]
 800b3e8:	2300      	movlt	r3, #0
 800b3ea:	e73e      	b.n	800b26a <_dtoa_r+0x74a>
 800b3ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b3ee:	9f06      	ldr	r7, [sp, #24]
 800b3f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b3f2:	e745      	b.n	800b280 <_dtoa_r+0x760>
 800b3f4:	3fe00000 	.word	0x3fe00000
 800b3f8:	40240000 	.word	0x40240000
 800b3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3fe:	e76a      	b.n	800b2d6 <_dtoa_r+0x7b6>
 800b400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b402:	2b01      	cmp	r3, #1
 800b404:	dc19      	bgt.n	800b43a <_dtoa_r+0x91a>
 800b406:	9b04      	ldr	r3, [sp, #16]
 800b408:	b9bb      	cbnz	r3, 800b43a <_dtoa_r+0x91a>
 800b40a:	9b05      	ldr	r3, [sp, #20]
 800b40c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b410:	b99b      	cbnz	r3, 800b43a <_dtoa_r+0x91a>
 800b412:	9b05      	ldr	r3, [sp, #20]
 800b414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b418:	0d1b      	lsrs	r3, r3, #20
 800b41a:	051b      	lsls	r3, r3, #20
 800b41c:	b183      	cbz	r3, 800b440 <_dtoa_r+0x920>
 800b41e:	f04f 0801 	mov.w	r8, #1
 800b422:	9b06      	ldr	r3, [sp, #24]
 800b424:	3301      	adds	r3, #1
 800b426:	9306      	str	r3, [sp, #24]
 800b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42a:	3301      	adds	r3, #1
 800b42c:	9309      	str	r3, [sp, #36]	; 0x24
 800b42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b430:	2b00      	cmp	r3, #0
 800b432:	f47f af6a 	bne.w	800b30a <_dtoa_r+0x7ea>
 800b436:	2001      	movs	r0, #1
 800b438:	e76f      	b.n	800b31a <_dtoa_r+0x7fa>
 800b43a:	f04f 0800 	mov.w	r8, #0
 800b43e:	e7f6      	b.n	800b42e <_dtoa_r+0x90e>
 800b440:	4698      	mov	r8, r3
 800b442:	e7f4      	b.n	800b42e <_dtoa_r+0x90e>
 800b444:	f43f af7d 	beq.w	800b342 <_dtoa_r+0x822>
 800b448:	4618      	mov	r0, r3
 800b44a:	301c      	adds	r0, #28
 800b44c:	e772      	b.n	800b334 <_dtoa_r+0x814>
 800b44e:	9b02      	ldr	r3, [sp, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	dc36      	bgt.n	800b4c2 <_dtoa_r+0x9a2>
 800b454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b456:	2b02      	cmp	r3, #2
 800b458:	dd33      	ble.n	800b4c2 <_dtoa_r+0x9a2>
 800b45a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b45e:	f1bb 0f00 	cmp.w	fp, #0
 800b462:	d10d      	bne.n	800b480 <_dtoa_r+0x960>
 800b464:	4621      	mov	r1, r4
 800b466:	465b      	mov	r3, fp
 800b468:	2205      	movs	r2, #5
 800b46a:	4628      	mov	r0, r5
 800b46c:	f000 ff78 	bl	800c360 <__multadd>
 800b470:	4601      	mov	r1, r0
 800b472:	4604      	mov	r4, r0
 800b474:	4650      	mov	r0, sl
 800b476:	f001 f9d5 	bl	800c824 <__mcmp>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	f73f adb6 	bgt.w	800afec <_dtoa_r+0x4cc>
 800b480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b482:	9f08      	ldr	r7, [sp, #32]
 800b484:	ea6f 0903 	mvn.w	r9, r3
 800b488:	f04f 0800 	mov.w	r8, #0
 800b48c:	4621      	mov	r1, r4
 800b48e:	4628      	mov	r0, r5
 800b490:	f000 ff44 	bl	800c31c <_Bfree>
 800b494:	2e00      	cmp	r6, #0
 800b496:	f43f aea4 	beq.w	800b1e2 <_dtoa_r+0x6c2>
 800b49a:	f1b8 0f00 	cmp.w	r8, #0
 800b49e:	d005      	beq.n	800b4ac <_dtoa_r+0x98c>
 800b4a0:	45b0      	cmp	r8, r6
 800b4a2:	d003      	beq.n	800b4ac <_dtoa_r+0x98c>
 800b4a4:	4641      	mov	r1, r8
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 ff38 	bl	800c31c <_Bfree>
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f000 ff34 	bl	800c31c <_Bfree>
 800b4b4:	e695      	b.n	800b1e2 <_dtoa_r+0x6c2>
 800b4b6:	2400      	movs	r4, #0
 800b4b8:	4626      	mov	r6, r4
 800b4ba:	e7e1      	b.n	800b480 <_dtoa_r+0x960>
 800b4bc:	46c1      	mov	r9, r8
 800b4be:	4626      	mov	r6, r4
 800b4c0:	e594      	b.n	800afec <_dtoa_r+0x4cc>
 800b4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 80fc 	beq.w	800b6c6 <_dtoa_r+0xba6>
 800b4ce:	2f00      	cmp	r7, #0
 800b4d0:	dd05      	ble.n	800b4de <_dtoa_r+0x9be>
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	463a      	mov	r2, r7
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f001 f938 	bl	800c74c <__lshift>
 800b4dc:	4606      	mov	r6, r0
 800b4de:	f1b8 0f00 	cmp.w	r8, #0
 800b4e2:	d05c      	beq.n	800b59e <_dtoa_r+0xa7e>
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	6871      	ldr	r1, [r6, #4]
 800b4e8:	f000 fed8 	bl	800c29c <_Balloc>
 800b4ec:	4607      	mov	r7, r0
 800b4ee:	b928      	cbnz	r0, 800b4fc <_dtoa_r+0x9dc>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b4f6:	4b7e      	ldr	r3, [pc, #504]	; (800b6f0 <_dtoa_r+0xbd0>)
 800b4f8:	f7ff bb26 	b.w	800ab48 <_dtoa_r+0x28>
 800b4fc:	6932      	ldr	r2, [r6, #16]
 800b4fe:	f106 010c 	add.w	r1, r6, #12
 800b502:	3202      	adds	r2, #2
 800b504:	0092      	lsls	r2, r2, #2
 800b506:	300c      	adds	r0, #12
 800b508:	f7fd fa1e 	bl	8008948 <memcpy>
 800b50c:	2201      	movs	r2, #1
 800b50e:	4639      	mov	r1, r7
 800b510:	4628      	mov	r0, r5
 800b512:	f001 f91b 	bl	800c74c <__lshift>
 800b516:	46b0      	mov	r8, r6
 800b518:	4606      	mov	r6, r0
 800b51a:	9b08      	ldr	r3, [sp, #32]
 800b51c:	3301      	adds	r3, #1
 800b51e:	9302      	str	r3, [sp, #8]
 800b520:	9b08      	ldr	r3, [sp, #32]
 800b522:	445b      	add	r3, fp
 800b524:	930a      	str	r3, [sp, #40]	; 0x28
 800b526:	9b04      	ldr	r3, [sp, #16]
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	9309      	str	r3, [sp, #36]	; 0x24
 800b52e:	9b02      	ldr	r3, [sp, #8]
 800b530:	4621      	mov	r1, r4
 800b532:	4650      	mov	r0, sl
 800b534:	f103 3bff 	add.w	fp, r3, #4294967295
 800b538:	f7ff fa65 	bl	800aa06 <quorem>
 800b53c:	4603      	mov	r3, r0
 800b53e:	4641      	mov	r1, r8
 800b540:	3330      	adds	r3, #48	; 0x30
 800b542:	9004      	str	r0, [sp, #16]
 800b544:	4650      	mov	r0, sl
 800b546:	930b      	str	r3, [sp, #44]	; 0x2c
 800b548:	f001 f96c 	bl	800c824 <__mcmp>
 800b54c:	4632      	mov	r2, r6
 800b54e:	9006      	str	r0, [sp, #24]
 800b550:	4621      	mov	r1, r4
 800b552:	4628      	mov	r0, r5
 800b554:	f001 f982 	bl	800c85c <__mdiff>
 800b558:	68c2      	ldr	r2, [r0, #12]
 800b55a:	4607      	mov	r7, r0
 800b55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b55e:	bb02      	cbnz	r2, 800b5a2 <_dtoa_r+0xa82>
 800b560:	4601      	mov	r1, r0
 800b562:	4650      	mov	r0, sl
 800b564:	f001 f95e 	bl	800c824 <__mcmp>
 800b568:	4602      	mov	r2, r0
 800b56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b56c:	4639      	mov	r1, r7
 800b56e:	4628      	mov	r0, r5
 800b570:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b574:	f000 fed2 	bl	800c31c <_Bfree>
 800b578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b57a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b57c:	9f02      	ldr	r7, [sp, #8]
 800b57e:	ea43 0102 	orr.w	r1, r3, r2
 800b582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b584:	430b      	orrs	r3, r1
 800b586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b588:	d10d      	bne.n	800b5a6 <_dtoa_r+0xa86>
 800b58a:	2b39      	cmp	r3, #57	; 0x39
 800b58c:	d027      	beq.n	800b5de <_dtoa_r+0xabe>
 800b58e:	9a06      	ldr	r2, [sp, #24]
 800b590:	2a00      	cmp	r2, #0
 800b592:	dd01      	ble.n	800b598 <_dtoa_r+0xa78>
 800b594:	9b04      	ldr	r3, [sp, #16]
 800b596:	3331      	adds	r3, #49	; 0x31
 800b598:	f88b 3000 	strb.w	r3, [fp]
 800b59c:	e776      	b.n	800b48c <_dtoa_r+0x96c>
 800b59e:	4630      	mov	r0, r6
 800b5a0:	e7b9      	b.n	800b516 <_dtoa_r+0x9f6>
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	e7e2      	b.n	800b56c <_dtoa_r+0xa4c>
 800b5a6:	9906      	ldr	r1, [sp, #24]
 800b5a8:	2900      	cmp	r1, #0
 800b5aa:	db04      	blt.n	800b5b6 <_dtoa_r+0xa96>
 800b5ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b5ae:	4301      	orrs	r1, r0
 800b5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5b2:	4301      	orrs	r1, r0
 800b5b4:	d120      	bne.n	800b5f8 <_dtoa_r+0xad8>
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	ddee      	ble.n	800b598 <_dtoa_r+0xa78>
 800b5ba:	4651      	mov	r1, sl
 800b5bc:	2201      	movs	r2, #1
 800b5be:	4628      	mov	r0, r5
 800b5c0:	9302      	str	r3, [sp, #8]
 800b5c2:	f001 f8c3 	bl	800c74c <__lshift>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4682      	mov	sl, r0
 800b5ca:	f001 f92b 	bl	800c824 <__mcmp>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	9b02      	ldr	r3, [sp, #8]
 800b5d2:	dc02      	bgt.n	800b5da <_dtoa_r+0xaba>
 800b5d4:	d1e0      	bne.n	800b598 <_dtoa_r+0xa78>
 800b5d6:	07da      	lsls	r2, r3, #31
 800b5d8:	d5de      	bpl.n	800b598 <_dtoa_r+0xa78>
 800b5da:	2b39      	cmp	r3, #57	; 0x39
 800b5dc:	d1da      	bne.n	800b594 <_dtoa_r+0xa74>
 800b5de:	2339      	movs	r3, #57	; 0x39
 800b5e0:	f88b 3000 	strb.w	r3, [fp]
 800b5e4:	463b      	mov	r3, r7
 800b5e6:	461f      	mov	r7, r3
 800b5e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	2a39      	cmp	r2, #57	; 0x39
 800b5f0:	d050      	beq.n	800b694 <_dtoa_r+0xb74>
 800b5f2:	3201      	adds	r2, #1
 800b5f4:	701a      	strb	r2, [r3, #0]
 800b5f6:	e749      	b.n	800b48c <_dtoa_r+0x96c>
 800b5f8:	2a00      	cmp	r2, #0
 800b5fa:	dd03      	ble.n	800b604 <_dtoa_r+0xae4>
 800b5fc:	2b39      	cmp	r3, #57	; 0x39
 800b5fe:	d0ee      	beq.n	800b5de <_dtoa_r+0xabe>
 800b600:	3301      	adds	r3, #1
 800b602:	e7c9      	b.n	800b598 <_dtoa_r+0xa78>
 800b604:	9a02      	ldr	r2, [sp, #8]
 800b606:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b608:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b60c:	428a      	cmp	r2, r1
 800b60e:	d02a      	beq.n	800b666 <_dtoa_r+0xb46>
 800b610:	4651      	mov	r1, sl
 800b612:	2300      	movs	r3, #0
 800b614:	220a      	movs	r2, #10
 800b616:	4628      	mov	r0, r5
 800b618:	f000 fea2 	bl	800c360 <__multadd>
 800b61c:	45b0      	cmp	r8, r6
 800b61e:	4682      	mov	sl, r0
 800b620:	f04f 0300 	mov.w	r3, #0
 800b624:	f04f 020a 	mov.w	r2, #10
 800b628:	4641      	mov	r1, r8
 800b62a:	4628      	mov	r0, r5
 800b62c:	d107      	bne.n	800b63e <_dtoa_r+0xb1e>
 800b62e:	f000 fe97 	bl	800c360 <__multadd>
 800b632:	4680      	mov	r8, r0
 800b634:	4606      	mov	r6, r0
 800b636:	9b02      	ldr	r3, [sp, #8]
 800b638:	3301      	adds	r3, #1
 800b63a:	9302      	str	r3, [sp, #8]
 800b63c:	e777      	b.n	800b52e <_dtoa_r+0xa0e>
 800b63e:	f000 fe8f 	bl	800c360 <__multadd>
 800b642:	4631      	mov	r1, r6
 800b644:	4680      	mov	r8, r0
 800b646:	2300      	movs	r3, #0
 800b648:	220a      	movs	r2, #10
 800b64a:	4628      	mov	r0, r5
 800b64c:	f000 fe88 	bl	800c360 <__multadd>
 800b650:	4606      	mov	r6, r0
 800b652:	e7f0      	b.n	800b636 <_dtoa_r+0xb16>
 800b654:	f1bb 0f00 	cmp.w	fp, #0
 800b658:	bfcc      	ite	gt
 800b65a:	465f      	movgt	r7, fp
 800b65c:	2701      	movle	r7, #1
 800b65e:	f04f 0800 	mov.w	r8, #0
 800b662:	9a08      	ldr	r2, [sp, #32]
 800b664:	4417      	add	r7, r2
 800b666:	4651      	mov	r1, sl
 800b668:	2201      	movs	r2, #1
 800b66a:	4628      	mov	r0, r5
 800b66c:	9302      	str	r3, [sp, #8]
 800b66e:	f001 f86d 	bl	800c74c <__lshift>
 800b672:	4621      	mov	r1, r4
 800b674:	4682      	mov	sl, r0
 800b676:	f001 f8d5 	bl	800c824 <__mcmp>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	dcb2      	bgt.n	800b5e4 <_dtoa_r+0xac4>
 800b67e:	d102      	bne.n	800b686 <_dtoa_r+0xb66>
 800b680:	9b02      	ldr	r3, [sp, #8]
 800b682:	07db      	lsls	r3, r3, #31
 800b684:	d4ae      	bmi.n	800b5e4 <_dtoa_r+0xac4>
 800b686:	463b      	mov	r3, r7
 800b688:	461f      	mov	r7, r3
 800b68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b68e:	2a30      	cmp	r2, #48	; 0x30
 800b690:	d0fa      	beq.n	800b688 <_dtoa_r+0xb68>
 800b692:	e6fb      	b.n	800b48c <_dtoa_r+0x96c>
 800b694:	9a08      	ldr	r2, [sp, #32]
 800b696:	429a      	cmp	r2, r3
 800b698:	d1a5      	bne.n	800b5e6 <_dtoa_r+0xac6>
 800b69a:	2331      	movs	r3, #49	; 0x31
 800b69c:	f109 0901 	add.w	r9, r9, #1
 800b6a0:	7013      	strb	r3, [r2, #0]
 800b6a2:	e6f3      	b.n	800b48c <_dtoa_r+0x96c>
 800b6a4:	4b13      	ldr	r3, [pc, #76]	; (800b6f4 <_dtoa_r+0xbd4>)
 800b6a6:	f7ff baa7 	b.w	800abf8 <_dtoa_r+0xd8>
 800b6aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f47f aa80 	bne.w	800abb2 <_dtoa_r+0x92>
 800b6b2:	4b11      	ldr	r3, [pc, #68]	; (800b6f8 <_dtoa_r+0xbd8>)
 800b6b4:	f7ff baa0 	b.w	800abf8 <_dtoa_r+0xd8>
 800b6b8:	f1bb 0f00 	cmp.w	fp, #0
 800b6bc:	dc03      	bgt.n	800b6c6 <_dtoa_r+0xba6>
 800b6be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	f73f aecc 	bgt.w	800b45e <_dtoa_r+0x93e>
 800b6c6:	9f08      	ldr	r7, [sp, #32]
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	f7ff f99b 	bl	800aa06 <quorem>
 800b6d0:	9a08      	ldr	r2, [sp, #32]
 800b6d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b6d6:	f807 3b01 	strb.w	r3, [r7], #1
 800b6da:	1aba      	subs	r2, r7, r2
 800b6dc:	4593      	cmp	fp, r2
 800b6de:	ddb9      	ble.n	800b654 <_dtoa_r+0xb34>
 800b6e0:	4651      	mov	r1, sl
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	220a      	movs	r2, #10
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 fe3a 	bl	800c360 <__multadd>
 800b6ec:	4682      	mov	sl, r0
 800b6ee:	e7eb      	b.n	800b6c8 <_dtoa_r+0xba8>
 800b6f0:	08010604 	.word	0x08010604
 800b6f4:	08010405 	.word	0x08010405
 800b6f8:	08010581 	.word	0x08010581

0800b6fc <__sflush_r>:
 800b6fc:	898a      	ldrh	r2, [r1, #12]
 800b6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	4605      	mov	r5, r0
 800b704:	0710      	lsls	r0, r2, #28
 800b706:	460c      	mov	r4, r1
 800b708:	d458      	bmi.n	800b7bc <__sflush_r+0xc0>
 800b70a:	684b      	ldr	r3, [r1, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dc05      	bgt.n	800b71c <__sflush_r+0x20>
 800b710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b712:	2b00      	cmp	r3, #0
 800b714:	dc02      	bgt.n	800b71c <__sflush_r+0x20>
 800b716:	2000      	movs	r0, #0
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b71e:	2e00      	cmp	r6, #0
 800b720:	d0f9      	beq.n	800b716 <__sflush_r+0x1a>
 800b722:	2300      	movs	r3, #0
 800b724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b728:	682f      	ldr	r7, [r5, #0]
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	d032      	beq.n	800b794 <__sflush_r+0x98>
 800b72e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	075a      	lsls	r2, r3, #29
 800b734:	d505      	bpl.n	800b742 <__sflush_r+0x46>
 800b736:	6863      	ldr	r3, [r4, #4]
 800b738:	1ac0      	subs	r0, r0, r3
 800b73a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b73c:	b10b      	cbz	r3, 800b742 <__sflush_r+0x46>
 800b73e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b740:	1ac0      	subs	r0, r0, r3
 800b742:	2300      	movs	r3, #0
 800b744:	4602      	mov	r2, r0
 800b746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b748:	4628      	mov	r0, r5
 800b74a:	6a21      	ldr	r1, [r4, #32]
 800b74c:	47b0      	blx	r6
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	d106      	bne.n	800b762 <__sflush_r+0x66>
 800b754:	6829      	ldr	r1, [r5, #0]
 800b756:	291d      	cmp	r1, #29
 800b758:	d82c      	bhi.n	800b7b4 <__sflush_r+0xb8>
 800b75a:	4a2a      	ldr	r2, [pc, #168]	; (800b804 <__sflush_r+0x108>)
 800b75c:	40ca      	lsrs	r2, r1
 800b75e:	07d6      	lsls	r6, r2, #31
 800b760:	d528      	bpl.n	800b7b4 <__sflush_r+0xb8>
 800b762:	2200      	movs	r2, #0
 800b764:	6062      	str	r2, [r4, #4]
 800b766:	6922      	ldr	r2, [r4, #16]
 800b768:	04d9      	lsls	r1, r3, #19
 800b76a:	6022      	str	r2, [r4, #0]
 800b76c:	d504      	bpl.n	800b778 <__sflush_r+0x7c>
 800b76e:	1c42      	adds	r2, r0, #1
 800b770:	d101      	bne.n	800b776 <__sflush_r+0x7a>
 800b772:	682b      	ldr	r3, [r5, #0]
 800b774:	b903      	cbnz	r3, 800b778 <__sflush_r+0x7c>
 800b776:	6560      	str	r0, [r4, #84]	; 0x54
 800b778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b77a:	602f      	str	r7, [r5, #0]
 800b77c:	2900      	cmp	r1, #0
 800b77e:	d0ca      	beq.n	800b716 <__sflush_r+0x1a>
 800b780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b784:	4299      	cmp	r1, r3
 800b786:	d002      	beq.n	800b78e <__sflush_r+0x92>
 800b788:	4628      	mov	r0, r5
 800b78a:	f7fd f8f3 	bl	8008974 <_free_r>
 800b78e:	2000      	movs	r0, #0
 800b790:	6360      	str	r0, [r4, #52]	; 0x34
 800b792:	e7c1      	b.n	800b718 <__sflush_r+0x1c>
 800b794:	6a21      	ldr	r1, [r4, #32]
 800b796:	2301      	movs	r3, #1
 800b798:	4628      	mov	r0, r5
 800b79a:	47b0      	blx	r6
 800b79c:	1c41      	adds	r1, r0, #1
 800b79e:	d1c7      	bne.n	800b730 <__sflush_r+0x34>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0c4      	beq.n	800b730 <__sflush_r+0x34>
 800b7a6:	2b1d      	cmp	r3, #29
 800b7a8:	d001      	beq.n	800b7ae <__sflush_r+0xb2>
 800b7aa:	2b16      	cmp	r3, #22
 800b7ac:	d101      	bne.n	800b7b2 <__sflush_r+0xb6>
 800b7ae:	602f      	str	r7, [r5, #0]
 800b7b0:	e7b1      	b.n	800b716 <__sflush_r+0x1a>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	e7ad      	b.n	800b718 <__sflush_r+0x1c>
 800b7bc:	690f      	ldr	r7, [r1, #16]
 800b7be:	2f00      	cmp	r7, #0
 800b7c0:	d0a9      	beq.n	800b716 <__sflush_r+0x1a>
 800b7c2:	0793      	lsls	r3, r2, #30
 800b7c4:	bf18      	it	ne
 800b7c6:	2300      	movne	r3, #0
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	bf08      	it	eq
 800b7cc:	694b      	ldreq	r3, [r1, #20]
 800b7ce:	eba6 0807 	sub.w	r8, r6, r7
 800b7d2:	600f      	str	r7, [r1, #0]
 800b7d4:	608b      	str	r3, [r1, #8]
 800b7d6:	f1b8 0f00 	cmp.w	r8, #0
 800b7da:	dd9c      	ble.n	800b716 <__sflush_r+0x1a>
 800b7dc:	4643      	mov	r3, r8
 800b7de:	463a      	mov	r2, r7
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	6a21      	ldr	r1, [r4, #32]
 800b7e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7e6:	47b0      	blx	r6
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	dc06      	bgt.n	800b7fa <__sflush_r+0xfe>
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	e78e      	b.n	800b718 <__sflush_r+0x1c>
 800b7fa:	4407      	add	r7, r0
 800b7fc:	eba8 0800 	sub.w	r8, r8, r0
 800b800:	e7e9      	b.n	800b7d6 <__sflush_r+0xda>
 800b802:	bf00      	nop
 800b804:	20400001 	.word	0x20400001

0800b808 <_fflush_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	690b      	ldr	r3, [r1, #16]
 800b80c:	4605      	mov	r5, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	b913      	cbnz	r3, 800b818 <_fflush_r+0x10>
 800b812:	2500      	movs	r5, #0
 800b814:	4628      	mov	r0, r5
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	b118      	cbz	r0, 800b822 <_fflush_r+0x1a>
 800b81a:	6983      	ldr	r3, [r0, #24]
 800b81c:	b90b      	cbnz	r3, 800b822 <_fflush_r+0x1a>
 800b81e:	f000 f887 	bl	800b930 <__sinit>
 800b822:	4b14      	ldr	r3, [pc, #80]	; (800b874 <_fflush_r+0x6c>)
 800b824:	429c      	cmp	r4, r3
 800b826:	d11b      	bne.n	800b860 <_fflush_r+0x58>
 800b828:	686c      	ldr	r4, [r5, #4]
 800b82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d0ef      	beq.n	800b812 <_fflush_r+0xa>
 800b832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b834:	07d0      	lsls	r0, r2, #31
 800b836:	d404      	bmi.n	800b842 <_fflush_r+0x3a>
 800b838:	0599      	lsls	r1, r3, #22
 800b83a:	d402      	bmi.n	800b842 <_fflush_r+0x3a>
 800b83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b83e:	f000 fc80 	bl	800c142 <__retarget_lock_acquire_recursive>
 800b842:	4628      	mov	r0, r5
 800b844:	4621      	mov	r1, r4
 800b846:	f7ff ff59 	bl	800b6fc <__sflush_r>
 800b84a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b84c:	4605      	mov	r5, r0
 800b84e:	07da      	lsls	r2, r3, #31
 800b850:	d4e0      	bmi.n	800b814 <_fflush_r+0xc>
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	059b      	lsls	r3, r3, #22
 800b856:	d4dd      	bmi.n	800b814 <_fflush_r+0xc>
 800b858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b85a:	f000 fc73 	bl	800c144 <__retarget_lock_release_recursive>
 800b85e:	e7d9      	b.n	800b814 <_fflush_r+0xc>
 800b860:	4b05      	ldr	r3, [pc, #20]	; (800b878 <_fflush_r+0x70>)
 800b862:	429c      	cmp	r4, r3
 800b864:	d101      	bne.n	800b86a <_fflush_r+0x62>
 800b866:	68ac      	ldr	r4, [r5, #8]
 800b868:	e7df      	b.n	800b82a <_fflush_r+0x22>
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <_fflush_r+0x74>)
 800b86c:	429c      	cmp	r4, r3
 800b86e:	bf08      	it	eq
 800b870:	68ec      	ldreq	r4, [r5, #12]
 800b872:	e7da      	b.n	800b82a <_fflush_r+0x22>
 800b874:	08010638 	.word	0x08010638
 800b878:	08010658 	.word	0x08010658
 800b87c:	08010618 	.word	0x08010618

0800b880 <std>:
 800b880:	2300      	movs	r3, #0
 800b882:	b510      	push	{r4, lr}
 800b884:	4604      	mov	r4, r0
 800b886:	e9c0 3300 	strd	r3, r3, [r0]
 800b88a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b88e:	6083      	str	r3, [r0, #8]
 800b890:	8181      	strh	r1, [r0, #12]
 800b892:	6643      	str	r3, [r0, #100]	; 0x64
 800b894:	81c2      	strh	r2, [r0, #14]
 800b896:	6183      	str	r3, [r0, #24]
 800b898:	4619      	mov	r1, r3
 800b89a:	2208      	movs	r2, #8
 800b89c:	305c      	adds	r0, #92	; 0x5c
 800b89e:	f7fd f861 	bl	8008964 <memset>
 800b8a2:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <std+0x38>)
 800b8a4:	6224      	str	r4, [r4, #32]
 800b8a6:	6263      	str	r3, [r4, #36]	; 0x24
 800b8a8:	4b04      	ldr	r3, [pc, #16]	; (800b8bc <std+0x3c>)
 800b8aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8ac:	4b04      	ldr	r3, [pc, #16]	; (800b8c0 <std+0x40>)
 800b8ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8b0:	4b04      	ldr	r3, [pc, #16]	; (800b8c4 <std+0x44>)
 800b8b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	bf00      	nop
 800b8b8:	0800cfc1 	.word	0x0800cfc1
 800b8bc:	0800cfe3 	.word	0x0800cfe3
 800b8c0:	0800d01b 	.word	0x0800d01b
 800b8c4:	0800d03f 	.word	0x0800d03f

0800b8c8 <_cleanup_r>:
 800b8c8:	4901      	ldr	r1, [pc, #4]	; (800b8d0 <_cleanup_r+0x8>)
 800b8ca:	f000 b8af 	b.w	800ba2c <_fwalk_reent>
 800b8ce:	bf00      	nop
 800b8d0:	0800b809 	.word	0x0800b809

0800b8d4 <__sfmoreglue>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	2568      	movs	r5, #104	; 0x68
 800b8d8:	1e4a      	subs	r2, r1, #1
 800b8da:	4355      	muls	r5, r2
 800b8dc:	460e      	mov	r6, r1
 800b8de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8e2:	f7fd f893 	bl	8008a0c <_malloc_r>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	b140      	cbz	r0, 800b8fc <__sfmoreglue+0x28>
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b8f0:	300c      	adds	r0, #12
 800b8f2:	60a0      	str	r0, [r4, #8]
 800b8f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8f8:	f7fd f834 	bl	8008964 <memset>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}

0800b900 <__sfp_lock_acquire>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__sfp_lock_acquire+0x8>)
 800b902:	f000 bc1e 	b.w	800c142 <__retarget_lock_acquire_recursive>
 800b906:	bf00      	nop
 800b908:	200005f4 	.word	0x200005f4

0800b90c <__sfp_lock_release>:
 800b90c:	4801      	ldr	r0, [pc, #4]	; (800b914 <__sfp_lock_release+0x8>)
 800b90e:	f000 bc19 	b.w	800c144 <__retarget_lock_release_recursive>
 800b912:	bf00      	nop
 800b914:	200005f4 	.word	0x200005f4

0800b918 <__sinit_lock_acquire>:
 800b918:	4801      	ldr	r0, [pc, #4]	; (800b920 <__sinit_lock_acquire+0x8>)
 800b91a:	f000 bc12 	b.w	800c142 <__retarget_lock_acquire_recursive>
 800b91e:	bf00      	nop
 800b920:	200005ef 	.word	0x200005ef

0800b924 <__sinit_lock_release>:
 800b924:	4801      	ldr	r0, [pc, #4]	; (800b92c <__sinit_lock_release+0x8>)
 800b926:	f000 bc0d 	b.w	800c144 <__retarget_lock_release_recursive>
 800b92a:	bf00      	nop
 800b92c:	200005ef 	.word	0x200005ef

0800b930 <__sinit>:
 800b930:	b510      	push	{r4, lr}
 800b932:	4604      	mov	r4, r0
 800b934:	f7ff fff0 	bl	800b918 <__sinit_lock_acquire>
 800b938:	69a3      	ldr	r3, [r4, #24]
 800b93a:	b11b      	cbz	r3, 800b944 <__sinit+0x14>
 800b93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b940:	f7ff bff0 	b.w	800b924 <__sinit_lock_release>
 800b944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b948:	6523      	str	r3, [r4, #80]	; 0x50
 800b94a:	4b13      	ldr	r3, [pc, #76]	; (800b998 <__sinit+0x68>)
 800b94c:	4a13      	ldr	r2, [pc, #76]	; (800b99c <__sinit+0x6c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	62a2      	str	r2, [r4, #40]	; 0x28
 800b952:	42a3      	cmp	r3, r4
 800b954:	bf08      	it	eq
 800b956:	2301      	moveq	r3, #1
 800b958:	4620      	mov	r0, r4
 800b95a:	bf08      	it	eq
 800b95c:	61a3      	streq	r3, [r4, #24]
 800b95e:	f000 f81f 	bl	800b9a0 <__sfp>
 800b962:	6060      	str	r0, [r4, #4]
 800b964:	4620      	mov	r0, r4
 800b966:	f000 f81b 	bl	800b9a0 <__sfp>
 800b96a:	60a0      	str	r0, [r4, #8]
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 f817 	bl	800b9a0 <__sfp>
 800b972:	2200      	movs	r2, #0
 800b974:	2104      	movs	r1, #4
 800b976:	60e0      	str	r0, [r4, #12]
 800b978:	6860      	ldr	r0, [r4, #4]
 800b97a:	f7ff ff81 	bl	800b880 <std>
 800b97e:	2201      	movs	r2, #1
 800b980:	2109      	movs	r1, #9
 800b982:	68a0      	ldr	r0, [r4, #8]
 800b984:	f7ff ff7c 	bl	800b880 <std>
 800b988:	2202      	movs	r2, #2
 800b98a:	2112      	movs	r1, #18
 800b98c:	68e0      	ldr	r0, [r4, #12]
 800b98e:	f7ff ff77 	bl	800b880 <std>
 800b992:	2301      	movs	r3, #1
 800b994:	61a3      	str	r3, [r4, #24]
 800b996:	e7d1      	b.n	800b93c <__sinit+0xc>
 800b998:	080103e0 	.word	0x080103e0
 800b99c:	0800b8c9 	.word	0x0800b8c9

0800b9a0 <__sfp>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	4607      	mov	r7, r0
 800b9a4:	f7ff ffac 	bl	800b900 <__sfp_lock_acquire>
 800b9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ba24 <__sfp+0x84>)
 800b9aa:	681e      	ldr	r6, [r3, #0]
 800b9ac:	69b3      	ldr	r3, [r6, #24]
 800b9ae:	b913      	cbnz	r3, 800b9b6 <__sfp+0x16>
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7ff ffbd 	bl	800b930 <__sinit>
 800b9b6:	3648      	adds	r6, #72	; 0x48
 800b9b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	d503      	bpl.n	800b9c8 <__sfp+0x28>
 800b9c0:	6833      	ldr	r3, [r6, #0]
 800b9c2:	b30b      	cbz	r3, 800ba08 <__sfp+0x68>
 800b9c4:	6836      	ldr	r6, [r6, #0]
 800b9c6:	e7f7      	b.n	800b9b8 <__sfp+0x18>
 800b9c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9cc:	b9d5      	cbnz	r5, 800ba04 <__sfp+0x64>
 800b9ce:	4b16      	ldr	r3, [pc, #88]	; (800ba28 <__sfp+0x88>)
 800b9d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9d4:	60e3      	str	r3, [r4, #12]
 800b9d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b9d8:	f000 fbb2 	bl	800c140 <__retarget_lock_init_recursive>
 800b9dc:	f7ff ff96 	bl	800b90c <__sfp_lock_release>
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9ec:	6025      	str	r5, [r4, #0]
 800b9ee:	61a5      	str	r5, [r4, #24]
 800b9f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9f4:	f7fc ffb6 	bl	8008964 <memset>
 800b9f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba00:	4620      	mov	r0, r4
 800ba02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba04:	3468      	adds	r4, #104	; 0x68
 800ba06:	e7d9      	b.n	800b9bc <__sfp+0x1c>
 800ba08:	2104      	movs	r1, #4
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	f7ff ff62 	bl	800b8d4 <__sfmoreglue>
 800ba10:	4604      	mov	r4, r0
 800ba12:	6030      	str	r0, [r6, #0]
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d1d5      	bne.n	800b9c4 <__sfp+0x24>
 800ba18:	f7ff ff78 	bl	800b90c <__sfp_lock_release>
 800ba1c:	230c      	movs	r3, #12
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	e7ee      	b.n	800ba00 <__sfp+0x60>
 800ba22:	bf00      	nop
 800ba24:	080103e0 	.word	0x080103e0
 800ba28:	ffff0001 	.word	0xffff0001

0800ba2c <_fwalk_reent>:
 800ba2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba30:	4606      	mov	r6, r0
 800ba32:	4688      	mov	r8, r1
 800ba34:	2700      	movs	r7, #0
 800ba36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ba42:	d505      	bpl.n	800ba50 <_fwalk_reent+0x24>
 800ba44:	6824      	ldr	r4, [r4, #0]
 800ba46:	2c00      	cmp	r4, #0
 800ba48:	d1f7      	bne.n	800ba3a <_fwalk_reent+0xe>
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba50:	89ab      	ldrh	r3, [r5, #12]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d907      	bls.n	800ba66 <_fwalk_reent+0x3a>
 800ba56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	d003      	beq.n	800ba66 <_fwalk_reent+0x3a>
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4630      	mov	r0, r6
 800ba62:	47c0      	blx	r8
 800ba64:	4307      	orrs	r7, r0
 800ba66:	3568      	adds	r5, #104	; 0x68
 800ba68:	e7e9      	b.n	800ba3e <_fwalk_reent+0x12>

0800ba6a <rshift>:
 800ba6a:	6903      	ldr	r3, [r0, #16]
 800ba6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba70:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba74:	f100 0414 	add.w	r4, r0, #20
 800ba78:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba7c:	dd46      	ble.n	800bb0c <rshift+0xa2>
 800ba7e:	f011 011f 	ands.w	r1, r1, #31
 800ba82:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba86:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba8a:	d10c      	bne.n	800baa6 <rshift+0x3c>
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	f100 0710 	add.w	r7, r0, #16
 800ba92:	42b1      	cmp	r1, r6
 800ba94:	d335      	bcc.n	800bb02 <rshift+0x98>
 800ba96:	1a9b      	subs	r3, r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	1eea      	subs	r2, r5, #3
 800ba9c:	4296      	cmp	r6, r2
 800ba9e:	bf38      	it	cc
 800baa0:	2300      	movcc	r3, #0
 800baa2:	4423      	add	r3, r4
 800baa4:	e015      	b.n	800bad2 <rshift+0x68>
 800baa6:	46a1      	mov	r9, r4
 800baa8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800baac:	f1c1 0820 	rsb	r8, r1, #32
 800bab0:	40cf      	lsrs	r7, r1
 800bab2:	f105 0e04 	add.w	lr, r5, #4
 800bab6:	4576      	cmp	r6, lr
 800bab8:	46f4      	mov	ip, lr
 800baba:	d816      	bhi.n	800baea <rshift+0x80>
 800babc:	1a9b      	subs	r3, r3, r2
 800babe:	009a      	lsls	r2, r3, #2
 800bac0:	3a04      	subs	r2, #4
 800bac2:	3501      	adds	r5, #1
 800bac4:	42ae      	cmp	r6, r5
 800bac6:	bf38      	it	cc
 800bac8:	2200      	movcc	r2, #0
 800baca:	18a3      	adds	r3, r4, r2
 800bacc:	50a7      	str	r7, [r4, r2]
 800bace:	b107      	cbz	r7, 800bad2 <rshift+0x68>
 800bad0:	3304      	adds	r3, #4
 800bad2:	42a3      	cmp	r3, r4
 800bad4:	eba3 0204 	sub.w	r2, r3, r4
 800bad8:	bf08      	it	eq
 800bada:	2300      	moveq	r3, #0
 800badc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bae0:	6102      	str	r2, [r0, #16]
 800bae2:	bf08      	it	eq
 800bae4:	6143      	streq	r3, [r0, #20]
 800bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baea:	f8dc c000 	ldr.w	ip, [ip]
 800baee:	fa0c fc08 	lsl.w	ip, ip, r8
 800baf2:	ea4c 0707 	orr.w	r7, ip, r7
 800baf6:	f849 7b04 	str.w	r7, [r9], #4
 800bafa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bafe:	40cf      	lsrs	r7, r1
 800bb00:	e7d9      	b.n	800bab6 <rshift+0x4c>
 800bb02:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb06:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb0a:	e7c2      	b.n	800ba92 <rshift+0x28>
 800bb0c:	4623      	mov	r3, r4
 800bb0e:	e7e0      	b.n	800bad2 <rshift+0x68>

0800bb10 <__hexdig_fun>:
 800bb10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb14:	2b09      	cmp	r3, #9
 800bb16:	d802      	bhi.n	800bb1e <__hexdig_fun+0xe>
 800bb18:	3820      	subs	r0, #32
 800bb1a:	b2c0      	uxtb	r0, r0
 800bb1c:	4770      	bx	lr
 800bb1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d801      	bhi.n	800bb2a <__hexdig_fun+0x1a>
 800bb26:	3847      	subs	r0, #71	; 0x47
 800bb28:	e7f7      	b.n	800bb1a <__hexdig_fun+0xa>
 800bb2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb2e:	2b05      	cmp	r3, #5
 800bb30:	d801      	bhi.n	800bb36 <__hexdig_fun+0x26>
 800bb32:	3827      	subs	r0, #39	; 0x27
 800bb34:	e7f1      	b.n	800bb1a <__hexdig_fun+0xa>
 800bb36:	2000      	movs	r0, #0
 800bb38:	4770      	bx	lr
	...

0800bb3c <__gethex>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	b08b      	sub	sp, #44	; 0x2c
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	4bb9      	ldr	r3, [pc, #740]	; (800be2c <__gethex+0x2f0>)
 800bb46:	9002      	str	r0, [sp, #8]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	468b      	mov	fp, r1
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	4690      	mov	r8, r2
 800bb50:	9303      	str	r3, [sp, #12]
 800bb52:	f7f4 fafd 	bl	8000150 <strlen>
 800bb56:	4682      	mov	sl, r0
 800bb58:	9b03      	ldr	r3, [sp, #12]
 800bb5a:	f8db 2000 	ldr.w	r2, [fp]
 800bb5e:	4403      	add	r3, r0
 800bb60:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bb64:	9307      	str	r3, [sp, #28]
 800bb66:	1c93      	adds	r3, r2, #2
 800bb68:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb6c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb70:	32fe      	adds	r2, #254	; 0xfe
 800bb72:	18d1      	adds	r1, r2, r3
 800bb74:	461f      	mov	r7, r3
 800bb76:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb7a:	9101      	str	r1, [sp, #4]
 800bb7c:	2830      	cmp	r0, #48	; 0x30
 800bb7e:	d0f8      	beq.n	800bb72 <__gethex+0x36>
 800bb80:	f7ff ffc6 	bl	800bb10 <__hexdig_fun>
 800bb84:	4604      	mov	r4, r0
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d13a      	bne.n	800bc00 <__gethex+0xc4>
 800bb8a:	4652      	mov	r2, sl
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	9903      	ldr	r1, [sp, #12]
 800bb90:	f001 fa59 	bl	800d046 <strncmp>
 800bb94:	4605      	mov	r5, r0
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d166      	bne.n	800bc68 <__gethex+0x12c>
 800bb9a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bb9e:	eb07 060a 	add.w	r6, r7, sl
 800bba2:	f7ff ffb5 	bl	800bb10 <__hexdig_fun>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d060      	beq.n	800bc6c <__gethex+0x130>
 800bbaa:	4633      	mov	r3, r6
 800bbac:	7818      	ldrb	r0, [r3, #0]
 800bbae:	461f      	mov	r7, r3
 800bbb0:	2830      	cmp	r0, #48	; 0x30
 800bbb2:	f103 0301 	add.w	r3, r3, #1
 800bbb6:	d0f9      	beq.n	800bbac <__gethex+0x70>
 800bbb8:	f7ff ffaa 	bl	800bb10 <__hexdig_fun>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	fab0 f480 	clz	r4, r0
 800bbc2:	4635      	mov	r5, r6
 800bbc4:	0964      	lsrs	r4, r4, #5
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	463a      	mov	r2, r7
 800bbca:	4616      	mov	r6, r2
 800bbcc:	7830      	ldrb	r0, [r6, #0]
 800bbce:	3201      	adds	r2, #1
 800bbd0:	f7ff ff9e 	bl	800bb10 <__hexdig_fun>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d1f8      	bne.n	800bbca <__gethex+0x8e>
 800bbd8:	4652      	mov	r2, sl
 800bbda:	4630      	mov	r0, r6
 800bbdc:	9903      	ldr	r1, [sp, #12]
 800bbde:	f001 fa32 	bl	800d046 <strncmp>
 800bbe2:	b980      	cbnz	r0, 800bc06 <__gethex+0xca>
 800bbe4:	b94d      	cbnz	r5, 800bbfa <__gethex+0xbe>
 800bbe6:	eb06 050a 	add.w	r5, r6, sl
 800bbea:	462a      	mov	r2, r5
 800bbec:	4616      	mov	r6, r2
 800bbee:	7830      	ldrb	r0, [r6, #0]
 800bbf0:	3201      	adds	r2, #1
 800bbf2:	f7ff ff8d 	bl	800bb10 <__hexdig_fun>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d1f8      	bne.n	800bbec <__gethex+0xb0>
 800bbfa:	1bad      	subs	r5, r5, r6
 800bbfc:	00ad      	lsls	r5, r5, #2
 800bbfe:	e004      	b.n	800bc0a <__gethex+0xce>
 800bc00:	2400      	movs	r4, #0
 800bc02:	4625      	mov	r5, r4
 800bc04:	e7e0      	b.n	800bbc8 <__gethex+0x8c>
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	d1f7      	bne.n	800bbfa <__gethex+0xbe>
 800bc0a:	7833      	ldrb	r3, [r6, #0]
 800bc0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc10:	2b50      	cmp	r3, #80	; 0x50
 800bc12:	d139      	bne.n	800bc88 <__gethex+0x14c>
 800bc14:	7873      	ldrb	r3, [r6, #1]
 800bc16:	2b2b      	cmp	r3, #43	; 0x2b
 800bc18:	d02a      	beq.n	800bc70 <__gethex+0x134>
 800bc1a:	2b2d      	cmp	r3, #45	; 0x2d
 800bc1c:	d02c      	beq.n	800bc78 <__gethex+0x13c>
 800bc1e:	f04f 0900 	mov.w	r9, #0
 800bc22:	1c71      	adds	r1, r6, #1
 800bc24:	7808      	ldrb	r0, [r1, #0]
 800bc26:	f7ff ff73 	bl	800bb10 <__hexdig_fun>
 800bc2a:	1e43      	subs	r3, r0, #1
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b18      	cmp	r3, #24
 800bc30:	d82a      	bhi.n	800bc88 <__gethex+0x14c>
 800bc32:	f1a0 0210 	sub.w	r2, r0, #16
 800bc36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc3a:	f7ff ff69 	bl	800bb10 <__hexdig_fun>
 800bc3e:	1e43      	subs	r3, r0, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b18      	cmp	r3, #24
 800bc44:	d91b      	bls.n	800bc7e <__gethex+0x142>
 800bc46:	f1b9 0f00 	cmp.w	r9, #0
 800bc4a:	d000      	beq.n	800bc4e <__gethex+0x112>
 800bc4c:	4252      	negs	r2, r2
 800bc4e:	4415      	add	r5, r2
 800bc50:	f8cb 1000 	str.w	r1, [fp]
 800bc54:	b1d4      	cbz	r4, 800bc8c <__gethex+0x150>
 800bc56:	9b01      	ldr	r3, [sp, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bf14      	ite	ne
 800bc5c:	2700      	movne	r7, #0
 800bc5e:	2706      	moveq	r7, #6
 800bc60:	4638      	mov	r0, r7
 800bc62:	b00b      	add	sp, #44	; 0x2c
 800bc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc68:	463e      	mov	r6, r7
 800bc6a:	4625      	mov	r5, r4
 800bc6c:	2401      	movs	r4, #1
 800bc6e:	e7cc      	b.n	800bc0a <__gethex+0xce>
 800bc70:	f04f 0900 	mov.w	r9, #0
 800bc74:	1cb1      	adds	r1, r6, #2
 800bc76:	e7d5      	b.n	800bc24 <__gethex+0xe8>
 800bc78:	f04f 0901 	mov.w	r9, #1
 800bc7c:	e7fa      	b.n	800bc74 <__gethex+0x138>
 800bc7e:	230a      	movs	r3, #10
 800bc80:	fb03 0202 	mla	r2, r3, r2, r0
 800bc84:	3a10      	subs	r2, #16
 800bc86:	e7d6      	b.n	800bc36 <__gethex+0xfa>
 800bc88:	4631      	mov	r1, r6
 800bc8a:	e7e1      	b.n	800bc50 <__gethex+0x114>
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	1bf3      	subs	r3, r6, r7
 800bc90:	3b01      	subs	r3, #1
 800bc92:	2b07      	cmp	r3, #7
 800bc94:	dc0a      	bgt.n	800bcac <__gethex+0x170>
 800bc96:	9802      	ldr	r0, [sp, #8]
 800bc98:	f000 fb00 	bl	800c29c <_Balloc>
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	b940      	cbnz	r0, 800bcb2 <__gethex+0x176>
 800bca0:	4602      	mov	r2, r0
 800bca2:	21de      	movs	r1, #222	; 0xde
 800bca4:	4b62      	ldr	r3, [pc, #392]	; (800be30 <__gethex+0x2f4>)
 800bca6:	4863      	ldr	r0, [pc, #396]	; (800be34 <__gethex+0x2f8>)
 800bca8:	f7fc fdec 	bl	8008884 <__assert_func>
 800bcac:	3101      	adds	r1, #1
 800bcae:	105b      	asrs	r3, r3, #1
 800bcb0:	e7ef      	b.n	800bc92 <__gethex+0x156>
 800bcb2:	f04f 0b00 	mov.w	fp, #0
 800bcb6:	f100 0914 	add.w	r9, r0, #20
 800bcba:	f1ca 0301 	rsb	r3, sl, #1
 800bcbe:	f8cd 9010 	str.w	r9, [sp, #16]
 800bcc2:	f8cd b004 	str.w	fp, [sp, #4]
 800bcc6:	9308      	str	r3, [sp, #32]
 800bcc8:	42b7      	cmp	r7, r6
 800bcca:	d33f      	bcc.n	800bd4c <__gethex+0x210>
 800bccc:	9f04      	ldr	r7, [sp, #16]
 800bcce:	9b01      	ldr	r3, [sp, #4]
 800bcd0:	f847 3b04 	str.w	r3, [r7], #4
 800bcd4:	eba7 0709 	sub.w	r7, r7, r9
 800bcd8:	10bf      	asrs	r7, r7, #2
 800bcda:	6127      	str	r7, [r4, #16]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 fbd3 	bl	800c488 <__hi0bits>
 800bce2:	017f      	lsls	r7, r7, #5
 800bce4:	f8d8 6000 	ldr.w	r6, [r8]
 800bce8:	1a3f      	subs	r7, r7, r0
 800bcea:	42b7      	cmp	r7, r6
 800bcec:	dd62      	ble.n	800bdb4 <__gethex+0x278>
 800bcee:	1bbf      	subs	r7, r7, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 ff69 	bl	800cbca <__any_on>
 800bcf8:	4682      	mov	sl, r0
 800bcfa:	b1a8      	cbz	r0, 800bd28 <__gethex+0x1ec>
 800bcfc:	f04f 0a01 	mov.w	sl, #1
 800bd00:	1e7b      	subs	r3, r7, #1
 800bd02:	1159      	asrs	r1, r3, #5
 800bd04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bd08:	f003 021f 	and.w	r2, r3, #31
 800bd0c:	fa0a f202 	lsl.w	r2, sl, r2
 800bd10:	420a      	tst	r2, r1
 800bd12:	d009      	beq.n	800bd28 <__gethex+0x1ec>
 800bd14:	4553      	cmp	r3, sl
 800bd16:	dd05      	ble.n	800bd24 <__gethex+0x1e8>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	1eb9      	subs	r1, r7, #2
 800bd1c:	f000 ff55 	bl	800cbca <__any_on>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d144      	bne.n	800bdae <__gethex+0x272>
 800bd24:	f04f 0a02 	mov.w	sl, #2
 800bd28:	4639      	mov	r1, r7
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f7ff fe9d 	bl	800ba6a <rshift>
 800bd30:	443d      	add	r5, r7
 800bd32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd36:	42ab      	cmp	r3, r5
 800bd38:	da4a      	bge.n	800bdd0 <__gethex+0x294>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	9802      	ldr	r0, [sp, #8]
 800bd3e:	f000 faed 	bl	800c31c <_Bfree>
 800bd42:	2300      	movs	r3, #0
 800bd44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd46:	27a3      	movs	r7, #163	; 0xa3
 800bd48:	6013      	str	r3, [r2, #0]
 800bd4a:	e789      	b.n	800bc60 <__gethex+0x124>
 800bd4c:	1e73      	subs	r3, r6, #1
 800bd4e:	9a07      	ldr	r2, [sp, #28]
 800bd50:	9305      	str	r3, [sp, #20]
 800bd52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d019      	beq.n	800bd8e <__gethex+0x252>
 800bd5a:	f1bb 0f20 	cmp.w	fp, #32
 800bd5e:	d107      	bne.n	800bd70 <__gethex+0x234>
 800bd60:	9b04      	ldr	r3, [sp, #16]
 800bd62:	9a01      	ldr	r2, [sp, #4]
 800bd64:	f843 2b04 	str.w	r2, [r3], #4
 800bd68:	9304      	str	r3, [sp, #16]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	469b      	mov	fp, r3
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bd74:	f7ff fecc 	bl	800bb10 <__hexdig_fun>
 800bd78:	9b01      	ldr	r3, [sp, #4]
 800bd7a:	f000 000f 	and.w	r0, r0, #15
 800bd7e:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd82:	4303      	orrs	r3, r0
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	f10b 0b04 	add.w	fp, fp, #4
 800bd8a:	9b05      	ldr	r3, [sp, #20]
 800bd8c:	e00d      	b.n	800bdaa <__gethex+0x26e>
 800bd8e:	9b05      	ldr	r3, [sp, #20]
 800bd90:	9a08      	ldr	r2, [sp, #32]
 800bd92:	4413      	add	r3, r2
 800bd94:	42bb      	cmp	r3, r7
 800bd96:	d3e0      	bcc.n	800bd5a <__gethex+0x21e>
 800bd98:	4618      	mov	r0, r3
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	9903      	ldr	r1, [sp, #12]
 800bd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bda0:	f001 f951 	bl	800d046 <strncmp>
 800bda4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d1d7      	bne.n	800bd5a <__gethex+0x21e>
 800bdaa:	461e      	mov	r6, r3
 800bdac:	e78c      	b.n	800bcc8 <__gethex+0x18c>
 800bdae:	f04f 0a03 	mov.w	sl, #3
 800bdb2:	e7b9      	b.n	800bd28 <__gethex+0x1ec>
 800bdb4:	da09      	bge.n	800bdca <__gethex+0x28e>
 800bdb6:	1bf7      	subs	r7, r6, r7
 800bdb8:	4621      	mov	r1, r4
 800bdba:	463a      	mov	r2, r7
 800bdbc:	9802      	ldr	r0, [sp, #8]
 800bdbe:	f000 fcc5 	bl	800c74c <__lshift>
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	1bed      	subs	r5, r5, r7
 800bdc6:	f100 0914 	add.w	r9, r0, #20
 800bdca:	f04f 0a00 	mov.w	sl, #0
 800bdce:	e7b0      	b.n	800bd32 <__gethex+0x1f6>
 800bdd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bdd4:	42a8      	cmp	r0, r5
 800bdd6:	dd71      	ble.n	800bebc <__gethex+0x380>
 800bdd8:	1b45      	subs	r5, r0, r5
 800bdda:	42ae      	cmp	r6, r5
 800bddc:	dc34      	bgt.n	800be48 <__gethex+0x30c>
 800bdde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d028      	beq.n	800be38 <__gethex+0x2fc>
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d02a      	beq.n	800be40 <__gethex+0x304>
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d115      	bne.n	800be1a <__gethex+0x2de>
 800bdee:	42ae      	cmp	r6, r5
 800bdf0:	d113      	bne.n	800be1a <__gethex+0x2de>
 800bdf2:	2e01      	cmp	r6, #1
 800bdf4:	d10b      	bne.n	800be0e <__gethex+0x2d2>
 800bdf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bdfa:	9a06      	ldr	r2, [sp, #24]
 800bdfc:	2762      	movs	r7, #98	; 0x62
 800bdfe:	6013      	str	r3, [r2, #0]
 800be00:	2301      	movs	r3, #1
 800be02:	6123      	str	r3, [r4, #16]
 800be04:	f8c9 3000 	str.w	r3, [r9]
 800be08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be0a:	601c      	str	r4, [r3, #0]
 800be0c:	e728      	b.n	800bc60 <__gethex+0x124>
 800be0e:	4620      	mov	r0, r4
 800be10:	1e71      	subs	r1, r6, #1
 800be12:	f000 feda 	bl	800cbca <__any_on>
 800be16:	2800      	cmp	r0, #0
 800be18:	d1ed      	bne.n	800bdf6 <__gethex+0x2ba>
 800be1a:	4621      	mov	r1, r4
 800be1c:	9802      	ldr	r0, [sp, #8]
 800be1e:	f000 fa7d 	bl	800c31c <_Bfree>
 800be22:	2300      	movs	r3, #0
 800be24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be26:	2750      	movs	r7, #80	; 0x50
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	e719      	b.n	800bc60 <__gethex+0x124>
 800be2c:	080106e4 	.word	0x080106e4
 800be30:	08010604 	.word	0x08010604
 800be34:	08010678 	.word	0x08010678
 800be38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1ed      	bne.n	800be1a <__gethex+0x2de>
 800be3e:	e7da      	b.n	800bdf6 <__gethex+0x2ba>
 800be40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1d7      	bne.n	800bdf6 <__gethex+0x2ba>
 800be46:	e7e8      	b.n	800be1a <__gethex+0x2de>
 800be48:	1e6f      	subs	r7, r5, #1
 800be4a:	f1ba 0f00 	cmp.w	sl, #0
 800be4e:	d132      	bne.n	800beb6 <__gethex+0x37a>
 800be50:	b127      	cbz	r7, 800be5c <__gethex+0x320>
 800be52:	4639      	mov	r1, r7
 800be54:	4620      	mov	r0, r4
 800be56:	f000 feb8 	bl	800cbca <__any_on>
 800be5a:	4682      	mov	sl, r0
 800be5c:	2101      	movs	r1, #1
 800be5e:	117b      	asrs	r3, r7, #5
 800be60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be64:	f007 071f 	and.w	r7, r7, #31
 800be68:	fa01 f707 	lsl.w	r7, r1, r7
 800be6c:	421f      	tst	r7, r3
 800be6e:	f04f 0702 	mov.w	r7, #2
 800be72:	4629      	mov	r1, r5
 800be74:	4620      	mov	r0, r4
 800be76:	bf18      	it	ne
 800be78:	f04a 0a02 	orrne.w	sl, sl, #2
 800be7c:	1b76      	subs	r6, r6, r5
 800be7e:	f7ff fdf4 	bl	800ba6a <rshift>
 800be82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be86:	f1ba 0f00 	cmp.w	sl, #0
 800be8a:	d048      	beq.n	800bf1e <__gethex+0x3e2>
 800be8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be90:	2b02      	cmp	r3, #2
 800be92:	d015      	beq.n	800bec0 <__gethex+0x384>
 800be94:	2b03      	cmp	r3, #3
 800be96:	d017      	beq.n	800bec8 <__gethex+0x38c>
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d109      	bne.n	800beb0 <__gethex+0x374>
 800be9c:	f01a 0f02 	tst.w	sl, #2
 800bea0:	d006      	beq.n	800beb0 <__gethex+0x374>
 800bea2:	f8d9 0000 	ldr.w	r0, [r9]
 800bea6:	ea4a 0a00 	orr.w	sl, sl, r0
 800beaa:	f01a 0f01 	tst.w	sl, #1
 800beae:	d10e      	bne.n	800bece <__gethex+0x392>
 800beb0:	f047 0710 	orr.w	r7, r7, #16
 800beb4:	e033      	b.n	800bf1e <__gethex+0x3e2>
 800beb6:	f04f 0a01 	mov.w	sl, #1
 800beba:	e7cf      	b.n	800be5c <__gethex+0x320>
 800bebc:	2701      	movs	r7, #1
 800bebe:	e7e2      	b.n	800be86 <__gethex+0x34a>
 800bec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bec2:	f1c3 0301 	rsb	r3, r3, #1
 800bec6:	9315      	str	r3, [sp, #84]	; 0x54
 800bec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800beca:	2b00      	cmp	r3, #0
 800becc:	d0f0      	beq.n	800beb0 <__gethex+0x374>
 800bece:	f04f 0c00 	mov.w	ip, #0
 800bed2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bed6:	f104 0314 	add.w	r3, r4, #20
 800beda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bede:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800beec:	d01c      	beq.n	800bf28 <__gethex+0x3ec>
 800beee:	3201      	adds	r2, #1
 800bef0:	6002      	str	r2, [r0, #0]
 800bef2:	2f02      	cmp	r7, #2
 800bef4:	f104 0314 	add.w	r3, r4, #20
 800bef8:	d13d      	bne.n	800bf76 <__gethex+0x43a>
 800befa:	f8d8 2000 	ldr.w	r2, [r8]
 800befe:	3a01      	subs	r2, #1
 800bf00:	42b2      	cmp	r2, r6
 800bf02:	d10a      	bne.n	800bf1a <__gethex+0x3de>
 800bf04:	2201      	movs	r2, #1
 800bf06:	1171      	asrs	r1, r6, #5
 800bf08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf0c:	f006 061f 	and.w	r6, r6, #31
 800bf10:	fa02 f606 	lsl.w	r6, r2, r6
 800bf14:	421e      	tst	r6, r3
 800bf16:	bf18      	it	ne
 800bf18:	4617      	movne	r7, r2
 800bf1a:	f047 0720 	orr.w	r7, r7, #32
 800bf1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf20:	601c      	str	r4, [r3, #0]
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	601d      	str	r5, [r3, #0]
 800bf26:	e69b      	b.n	800bc60 <__gethex+0x124>
 800bf28:	4299      	cmp	r1, r3
 800bf2a:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf2e:	d8d8      	bhi.n	800bee2 <__gethex+0x3a6>
 800bf30:	68a3      	ldr	r3, [r4, #8]
 800bf32:	459b      	cmp	fp, r3
 800bf34:	db17      	blt.n	800bf66 <__gethex+0x42a>
 800bf36:	6861      	ldr	r1, [r4, #4]
 800bf38:	9802      	ldr	r0, [sp, #8]
 800bf3a:	3101      	adds	r1, #1
 800bf3c:	f000 f9ae 	bl	800c29c <_Balloc>
 800bf40:	4681      	mov	r9, r0
 800bf42:	b918      	cbnz	r0, 800bf4c <__gethex+0x410>
 800bf44:	4602      	mov	r2, r0
 800bf46:	2184      	movs	r1, #132	; 0x84
 800bf48:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <__gethex+0x474>)
 800bf4a:	e6ac      	b.n	800bca6 <__gethex+0x16a>
 800bf4c:	6922      	ldr	r2, [r4, #16]
 800bf4e:	f104 010c 	add.w	r1, r4, #12
 800bf52:	3202      	adds	r2, #2
 800bf54:	0092      	lsls	r2, r2, #2
 800bf56:	300c      	adds	r0, #12
 800bf58:	f7fc fcf6 	bl	8008948 <memcpy>
 800bf5c:	4621      	mov	r1, r4
 800bf5e:	9802      	ldr	r0, [sp, #8]
 800bf60:	f000 f9dc 	bl	800c31c <_Bfree>
 800bf64:	464c      	mov	r4, r9
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	6122      	str	r2, [r4, #16]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf72:	615a      	str	r2, [r3, #20]
 800bf74:	e7bd      	b.n	800bef2 <__gethex+0x3b6>
 800bf76:	6922      	ldr	r2, [r4, #16]
 800bf78:	455a      	cmp	r2, fp
 800bf7a:	dd0b      	ble.n	800bf94 <__gethex+0x458>
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f7ff fd73 	bl	800ba6a <rshift>
 800bf84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf88:	3501      	adds	r5, #1
 800bf8a:	42ab      	cmp	r3, r5
 800bf8c:	f6ff aed5 	blt.w	800bd3a <__gethex+0x1fe>
 800bf90:	2701      	movs	r7, #1
 800bf92:	e7c2      	b.n	800bf1a <__gethex+0x3de>
 800bf94:	f016 061f 	ands.w	r6, r6, #31
 800bf98:	d0fa      	beq.n	800bf90 <__gethex+0x454>
 800bf9a:	449a      	add	sl, r3
 800bf9c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bfa0:	f000 fa72 	bl	800c488 <__hi0bits>
 800bfa4:	f1c6 0620 	rsb	r6, r6, #32
 800bfa8:	42b0      	cmp	r0, r6
 800bfaa:	dbe7      	blt.n	800bf7c <__gethex+0x440>
 800bfac:	e7f0      	b.n	800bf90 <__gethex+0x454>
 800bfae:	bf00      	nop
 800bfb0:	08010604 	.word	0x08010604

0800bfb4 <L_shift>:
 800bfb4:	f1c2 0208 	rsb	r2, r2, #8
 800bfb8:	0092      	lsls	r2, r2, #2
 800bfba:	b570      	push	{r4, r5, r6, lr}
 800bfbc:	f1c2 0620 	rsb	r6, r2, #32
 800bfc0:	6843      	ldr	r3, [r0, #4]
 800bfc2:	6804      	ldr	r4, [r0, #0]
 800bfc4:	fa03 f506 	lsl.w	r5, r3, r6
 800bfc8:	432c      	orrs	r4, r5
 800bfca:	40d3      	lsrs	r3, r2
 800bfcc:	6004      	str	r4, [r0, #0]
 800bfce:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfd2:	4288      	cmp	r0, r1
 800bfd4:	d3f4      	bcc.n	800bfc0 <L_shift+0xc>
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}

0800bfd8 <__match>:
 800bfd8:	b530      	push	{r4, r5, lr}
 800bfda:	6803      	ldr	r3, [r0, #0]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe2:	b914      	cbnz	r4, 800bfea <__match+0x12>
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	bd30      	pop	{r4, r5, pc}
 800bfea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bff2:	2d19      	cmp	r5, #25
 800bff4:	bf98      	it	ls
 800bff6:	3220      	addls	r2, #32
 800bff8:	42a2      	cmp	r2, r4
 800bffa:	d0f0      	beq.n	800bfde <__match+0x6>
 800bffc:	2000      	movs	r0, #0
 800bffe:	e7f3      	b.n	800bfe8 <__match+0x10>

0800c000 <__hexnan>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	2500      	movs	r5, #0
 800c006:	680b      	ldr	r3, [r1, #0]
 800c008:	4682      	mov	sl, r0
 800c00a:	115e      	asrs	r6, r3, #5
 800c00c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c010:	f013 031f 	ands.w	r3, r3, #31
 800c014:	bf18      	it	ne
 800c016:	3604      	addne	r6, #4
 800c018:	1f37      	subs	r7, r6, #4
 800c01a:	4690      	mov	r8, r2
 800c01c:	46b9      	mov	r9, r7
 800c01e:	463c      	mov	r4, r7
 800c020:	46ab      	mov	fp, r5
 800c022:	b087      	sub	sp, #28
 800c024:	6801      	ldr	r1, [r0, #0]
 800c026:	9301      	str	r3, [sp, #4]
 800c028:	f846 5c04 	str.w	r5, [r6, #-4]
 800c02c:	9502      	str	r5, [sp, #8]
 800c02e:	784a      	ldrb	r2, [r1, #1]
 800c030:	1c4b      	adds	r3, r1, #1
 800c032:	9303      	str	r3, [sp, #12]
 800c034:	b342      	cbz	r2, 800c088 <__hexnan+0x88>
 800c036:	4610      	mov	r0, r2
 800c038:	9105      	str	r1, [sp, #20]
 800c03a:	9204      	str	r2, [sp, #16]
 800c03c:	f7ff fd68 	bl	800bb10 <__hexdig_fun>
 800c040:	2800      	cmp	r0, #0
 800c042:	d14f      	bne.n	800c0e4 <__hexnan+0xe4>
 800c044:	9a04      	ldr	r2, [sp, #16]
 800c046:	9905      	ldr	r1, [sp, #20]
 800c048:	2a20      	cmp	r2, #32
 800c04a:	d818      	bhi.n	800c07e <__hexnan+0x7e>
 800c04c:	9b02      	ldr	r3, [sp, #8]
 800c04e:	459b      	cmp	fp, r3
 800c050:	dd13      	ble.n	800c07a <__hexnan+0x7a>
 800c052:	454c      	cmp	r4, r9
 800c054:	d206      	bcs.n	800c064 <__hexnan+0x64>
 800c056:	2d07      	cmp	r5, #7
 800c058:	dc04      	bgt.n	800c064 <__hexnan+0x64>
 800c05a:	462a      	mov	r2, r5
 800c05c:	4649      	mov	r1, r9
 800c05e:	4620      	mov	r0, r4
 800c060:	f7ff ffa8 	bl	800bfb4 <L_shift>
 800c064:	4544      	cmp	r4, r8
 800c066:	d950      	bls.n	800c10a <__hexnan+0x10a>
 800c068:	2300      	movs	r3, #0
 800c06a:	f1a4 0904 	sub.w	r9, r4, #4
 800c06e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c072:	461d      	mov	r5, r3
 800c074:	464c      	mov	r4, r9
 800c076:	f8cd b008 	str.w	fp, [sp, #8]
 800c07a:	9903      	ldr	r1, [sp, #12]
 800c07c:	e7d7      	b.n	800c02e <__hexnan+0x2e>
 800c07e:	2a29      	cmp	r2, #41	; 0x29
 800c080:	d156      	bne.n	800c130 <__hexnan+0x130>
 800c082:	3102      	adds	r1, #2
 800c084:	f8ca 1000 	str.w	r1, [sl]
 800c088:	f1bb 0f00 	cmp.w	fp, #0
 800c08c:	d050      	beq.n	800c130 <__hexnan+0x130>
 800c08e:	454c      	cmp	r4, r9
 800c090:	d206      	bcs.n	800c0a0 <__hexnan+0xa0>
 800c092:	2d07      	cmp	r5, #7
 800c094:	dc04      	bgt.n	800c0a0 <__hexnan+0xa0>
 800c096:	462a      	mov	r2, r5
 800c098:	4649      	mov	r1, r9
 800c09a:	4620      	mov	r0, r4
 800c09c:	f7ff ff8a 	bl	800bfb4 <L_shift>
 800c0a0:	4544      	cmp	r4, r8
 800c0a2:	d934      	bls.n	800c10e <__hexnan+0x10e>
 800c0a4:	4623      	mov	r3, r4
 800c0a6:	f1a8 0204 	sub.w	r2, r8, #4
 800c0aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0ae:	429f      	cmp	r7, r3
 800c0b0:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0b4:	d2f9      	bcs.n	800c0aa <__hexnan+0xaa>
 800c0b6:	1b3b      	subs	r3, r7, r4
 800c0b8:	f023 0303 	bic.w	r3, r3, #3
 800c0bc:	3304      	adds	r3, #4
 800c0be:	3401      	adds	r4, #1
 800c0c0:	3e03      	subs	r6, #3
 800c0c2:	42b4      	cmp	r4, r6
 800c0c4:	bf88      	it	hi
 800c0c6:	2304      	movhi	r3, #4
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	4443      	add	r3, r8
 800c0cc:	f843 2b04 	str.w	r2, [r3], #4
 800c0d0:	429f      	cmp	r7, r3
 800c0d2:	d2fb      	bcs.n	800c0cc <__hexnan+0xcc>
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	b91b      	cbnz	r3, 800c0e0 <__hexnan+0xe0>
 800c0d8:	4547      	cmp	r7, r8
 800c0da:	d127      	bne.n	800c12c <__hexnan+0x12c>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	2005      	movs	r0, #5
 800c0e2:	e026      	b.n	800c132 <__hexnan+0x132>
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	2d08      	cmp	r5, #8
 800c0e8:	f10b 0b01 	add.w	fp, fp, #1
 800c0ec:	dd06      	ble.n	800c0fc <__hexnan+0xfc>
 800c0ee:	4544      	cmp	r4, r8
 800c0f0:	d9c3      	bls.n	800c07a <__hexnan+0x7a>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	2501      	movs	r5, #1
 800c0f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0fa:	3c04      	subs	r4, #4
 800c0fc:	6822      	ldr	r2, [r4, #0]
 800c0fe:	f000 000f 	and.w	r0, r0, #15
 800c102:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c106:	6022      	str	r2, [r4, #0]
 800c108:	e7b7      	b.n	800c07a <__hexnan+0x7a>
 800c10a:	2508      	movs	r5, #8
 800c10c:	e7b5      	b.n	800c07a <__hexnan+0x7a>
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0df      	beq.n	800c0d4 <__hexnan+0xd4>
 800c114:	f04f 32ff 	mov.w	r2, #4294967295
 800c118:	f1c3 0320 	rsb	r3, r3, #32
 800c11c:	fa22 f303 	lsr.w	r3, r2, r3
 800c120:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c124:	401a      	ands	r2, r3
 800c126:	f846 2c04 	str.w	r2, [r6, #-4]
 800c12a:	e7d3      	b.n	800c0d4 <__hexnan+0xd4>
 800c12c:	3f04      	subs	r7, #4
 800c12e:	e7d1      	b.n	800c0d4 <__hexnan+0xd4>
 800c130:	2004      	movs	r0, #4
 800c132:	b007      	add	sp, #28
 800c134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c138 <_localeconv_r>:
 800c138:	4800      	ldr	r0, [pc, #0]	; (800c13c <_localeconv_r+0x4>)
 800c13a:	4770      	bx	lr
 800c13c:	20000164 	.word	0x20000164

0800c140 <__retarget_lock_init_recursive>:
 800c140:	4770      	bx	lr

0800c142 <__retarget_lock_acquire_recursive>:
 800c142:	4770      	bx	lr

0800c144 <__retarget_lock_release_recursive>:
 800c144:	4770      	bx	lr

0800c146 <__swhatbuf_r>:
 800c146:	b570      	push	{r4, r5, r6, lr}
 800c148:	460e      	mov	r6, r1
 800c14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14e:	4614      	mov	r4, r2
 800c150:	2900      	cmp	r1, #0
 800c152:	461d      	mov	r5, r3
 800c154:	b096      	sub	sp, #88	; 0x58
 800c156:	da07      	bge.n	800c168 <__swhatbuf_r+0x22>
 800c158:	2300      	movs	r3, #0
 800c15a:	602b      	str	r3, [r5, #0]
 800c15c:	89b3      	ldrh	r3, [r6, #12]
 800c15e:	061a      	lsls	r2, r3, #24
 800c160:	d410      	bmi.n	800c184 <__swhatbuf_r+0x3e>
 800c162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c166:	e00e      	b.n	800c186 <__swhatbuf_r+0x40>
 800c168:	466a      	mov	r2, sp
 800c16a:	f000 ffad 	bl	800d0c8 <_fstat_r>
 800c16e:	2800      	cmp	r0, #0
 800c170:	dbf2      	blt.n	800c158 <__swhatbuf_r+0x12>
 800c172:	9a01      	ldr	r2, [sp, #4]
 800c174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c17c:	425a      	negs	r2, r3
 800c17e:	415a      	adcs	r2, r3
 800c180:	602a      	str	r2, [r5, #0]
 800c182:	e7ee      	b.n	800c162 <__swhatbuf_r+0x1c>
 800c184:	2340      	movs	r3, #64	; 0x40
 800c186:	2000      	movs	r0, #0
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	b016      	add	sp, #88	; 0x58
 800c18c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c190 <__smakebuf_r>:
 800c190:	898b      	ldrh	r3, [r1, #12]
 800c192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c194:	079d      	lsls	r5, r3, #30
 800c196:	4606      	mov	r6, r0
 800c198:	460c      	mov	r4, r1
 800c19a:	d507      	bpl.n	800c1ac <__smakebuf_r+0x1c>
 800c19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	6163      	str	r3, [r4, #20]
 800c1a8:	b002      	add	sp, #8
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	466a      	mov	r2, sp
 800c1ae:	ab01      	add	r3, sp, #4
 800c1b0:	f7ff ffc9 	bl	800c146 <__swhatbuf_r>
 800c1b4:	9900      	ldr	r1, [sp, #0]
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f7fc fc27 	bl	8008a0c <_malloc_r>
 800c1be:	b948      	cbnz	r0, 800c1d4 <__smakebuf_r+0x44>
 800c1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c4:	059a      	lsls	r2, r3, #22
 800c1c6:	d4ef      	bmi.n	800c1a8 <__smakebuf_r+0x18>
 800c1c8:	f023 0303 	bic.w	r3, r3, #3
 800c1cc:	f043 0302 	orr.w	r3, r3, #2
 800c1d0:	81a3      	strh	r3, [r4, #12]
 800c1d2:	e7e3      	b.n	800c19c <__smakebuf_r+0xc>
 800c1d4:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <__smakebuf_r+0x7c>)
 800c1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	6020      	str	r0, [r4, #0]
 800c1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	9b00      	ldr	r3, [sp, #0]
 800c1e4:	6120      	str	r0, [r4, #16]
 800c1e6:	6163      	str	r3, [r4, #20]
 800c1e8:	9b01      	ldr	r3, [sp, #4]
 800c1ea:	b15b      	cbz	r3, 800c204 <__smakebuf_r+0x74>
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f2:	f000 ff7b 	bl	800d0ec <_isatty_r>
 800c1f6:	b128      	cbz	r0, 800c204 <__smakebuf_r+0x74>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	f043 0301 	orr.w	r3, r3, #1
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	89a0      	ldrh	r0, [r4, #12]
 800c206:	4305      	orrs	r5, r0
 800c208:	81a5      	strh	r5, [r4, #12]
 800c20a:	e7cd      	b.n	800c1a8 <__smakebuf_r+0x18>
 800c20c:	0800b8c9 	.word	0x0800b8c9

0800c210 <__ascii_mbtowc>:
 800c210:	b082      	sub	sp, #8
 800c212:	b901      	cbnz	r1, 800c216 <__ascii_mbtowc+0x6>
 800c214:	a901      	add	r1, sp, #4
 800c216:	b142      	cbz	r2, 800c22a <__ascii_mbtowc+0x1a>
 800c218:	b14b      	cbz	r3, 800c22e <__ascii_mbtowc+0x1e>
 800c21a:	7813      	ldrb	r3, [r2, #0]
 800c21c:	600b      	str	r3, [r1, #0]
 800c21e:	7812      	ldrb	r2, [r2, #0]
 800c220:	1e10      	subs	r0, r2, #0
 800c222:	bf18      	it	ne
 800c224:	2001      	movne	r0, #1
 800c226:	b002      	add	sp, #8
 800c228:	4770      	bx	lr
 800c22a:	4610      	mov	r0, r2
 800c22c:	e7fb      	b.n	800c226 <__ascii_mbtowc+0x16>
 800c22e:	f06f 0001 	mvn.w	r0, #1
 800c232:	e7f8      	b.n	800c226 <__ascii_mbtowc+0x16>

0800c234 <memchr>:
 800c234:	4603      	mov	r3, r0
 800c236:	b510      	push	{r4, lr}
 800c238:	b2c9      	uxtb	r1, r1
 800c23a:	4402      	add	r2, r0
 800c23c:	4293      	cmp	r3, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	d101      	bne.n	800c246 <memchr+0x12>
 800c242:	2000      	movs	r0, #0
 800c244:	e003      	b.n	800c24e <memchr+0x1a>
 800c246:	7804      	ldrb	r4, [r0, #0]
 800c248:	3301      	adds	r3, #1
 800c24a:	428c      	cmp	r4, r1
 800c24c:	d1f6      	bne.n	800c23c <memchr+0x8>
 800c24e:	bd10      	pop	{r4, pc}

0800c250 <memmove>:
 800c250:	4288      	cmp	r0, r1
 800c252:	b510      	push	{r4, lr}
 800c254:	eb01 0402 	add.w	r4, r1, r2
 800c258:	d902      	bls.n	800c260 <memmove+0x10>
 800c25a:	4284      	cmp	r4, r0
 800c25c:	4623      	mov	r3, r4
 800c25e:	d807      	bhi.n	800c270 <memmove+0x20>
 800c260:	1e43      	subs	r3, r0, #1
 800c262:	42a1      	cmp	r1, r4
 800c264:	d008      	beq.n	800c278 <memmove+0x28>
 800c266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c26a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c26e:	e7f8      	b.n	800c262 <memmove+0x12>
 800c270:	4601      	mov	r1, r0
 800c272:	4402      	add	r2, r0
 800c274:	428a      	cmp	r2, r1
 800c276:	d100      	bne.n	800c27a <memmove+0x2a>
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c27e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c282:	e7f7      	b.n	800c274 <memmove+0x24>

0800c284 <__malloc_lock>:
 800c284:	4801      	ldr	r0, [pc, #4]	; (800c28c <__malloc_lock+0x8>)
 800c286:	f7ff bf5c 	b.w	800c142 <__retarget_lock_acquire_recursive>
 800c28a:	bf00      	nop
 800c28c:	200005f0 	.word	0x200005f0

0800c290 <__malloc_unlock>:
 800c290:	4801      	ldr	r0, [pc, #4]	; (800c298 <__malloc_unlock+0x8>)
 800c292:	f7ff bf57 	b.w	800c144 <__retarget_lock_release_recursive>
 800c296:	bf00      	nop
 800c298:	200005f0 	.word	0x200005f0

0800c29c <_Balloc>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	460d      	mov	r5, r1
 800c2a4:	b976      	cbnz	r6, 800c2c4 <_Balloc+0x28>
 800c2a6:	2010      	movs	r0, #16
 800c2a8:	f7fc fb46 	bl	8008938 <malloc>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	6260      	str	r0, [r4, #36]	; 0x24
 800c2b0:	b920      	cbnz	r0, 800c2bc <_Balloc+0x20>
 800c2b2:	2166      	movs	r1, #102	; 0x66
 800c2b4:	4b17      	ldr	r3, [pc, #92]	; (800c314 <_Balloc+0x78>)
 800c2b6:	4818      	ldr	r0, [pc, #96]	; (800c318 <_Balloc+0x7c>)
 800c2b8:	f7fc fae4 	bl	8008884 <__assert_func>
 800c2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2c0:	6006      	str	r6, [r0, #0]
 800c2c2:	60c6      	str	r6, [r0, #12]
 800c2c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2c6:	68f3      	ldr	r3, [r6, #12]
 800c2c8:	b183      	cbz	r3, 800c2ec <_Balloc+0x50>
 800c2ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2d2:	b9b8      	cbnz	r0, 800c304 <_Balloc+0x68>
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2da:	1d72      	adds	r2, r6, #5
 800c2dc:	4620      	mov	r0, r4
 800c2de:	0092      	lsls	r2, r2, #2
 800c2e0:	f000 fc94 	bl	800cc0c <_calloc_r>
 800c2e4:	b160      	cbz	r0, 800c300 <_Balloc+0x64>
 800c2e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ea:	e00e      	b.n	800c30a <_Balloc+0x6e>
 800c2ec:	2221      	movs	r2, #33	; 0x21
 800c2ee:	2104      	movs	r1, #4
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f000 fc8b 	bl	800cc0c <_calloc_r>
 800c2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2f8:	60f0      	str	r0, [r6, #12]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e4      	bne.n	800c2ca <_Balloc+0x2e>
 800c300:	2000      	movs	r0, #0
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	6802      	ldr	r2, [r0, #0]
 800c306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c30a:	2300      	movs	r3, #0
 800c30c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c310:	e7f7      	b.n	800c302 <_Balloc+0x66>
 800c312:	bf00      	nop
 800c314:	0801058e 	.word	0x0801058e
 800c318:	080106f8 	.word	0x080106f8

0800c31c <_Bfree>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c320:	4605      	mov	r5, r0
 800c322:	460c      	mov	r4, r1
 800c324:	b976      	cbnz	r6, 800c344 <_Bfree+0x28>
 800c326:	2010      	movs	r0, #16
 800c328:	f7fc fb06 	bl	8008938 <malloc>
 800c32c:	4602      	mov	r2, r0
 800c32e:	6268      	str	r0, [r5, #36]	; 0x24
 800c330:	b920      	cbnz	r0, 800c33c <_Bfree+0x20>
 800c332:	218a      	movs	r1, #138	; 0x8a
 800c334:	4b08      	ldr	r3, [pc, #32]	; (800c358 <_Bfree+0x3c>)
 800c336:	4809      	ldr	r0, [pc, #36]	; (800c35c <_Bfree+0x40>)
 800c338:	f7fc faa4 	bl	8008884 <__assert_func>
 800c33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c340:	6006      	str	r6, [r0, #0]
 800c342:	60c6      	str	r6, [r0, #12]
 800c344:	b13c      	cbz	r4, 800c356 <_Bfree+0x3a>
 800c346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c348:	6862      	ldr	r2, [r4, #4]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c350:	6021      	str	r1, [r4, #0]
 800c352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	0801058e 	.word	0x0801058e
 800c35c:	080106f8 	.word	0x080106f8

0800c360 <__multadd>:
 800c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c364:	4698      	mov	r8, r3
 800c366:	460c      	mov	r4, r1
 800c368:	2300      	movs	r3, #0
 800c36a:	690e      	ldr	r6, [r1, #16]
 800c36c:	4607      	mov	r7, r0
 800c36e:	f101 0014 	add.w	r0, r1, #20
 800c372:	6805      	ldr	r5, [r0, #0]
 800c374:	3301      	adds	r3, #1
 800c376:	b2a9      	uxth	r1, r5
 800c378:	fb02 8101 	mla	r1, r2, r1, r8
 800c37c:	0c2d      	lsrs	r5, r5, #16
 800c37e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c382:	fb02 c505 	mla	r5, r2, r5, ip
 800c386:	b289      	uxth	r1, r1
 800c388:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c38c:	429e      	cmp	r6, r3
 800c38e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c392:	f840 1b04 	str.w	r1, [r0], #4
 800c396:	dcec      	bgt.n	800c372 <__multadd+0x12>
 800c398:	f1b8 0f00 	cmp.w	r8, #0
 800c39c:	d022      	beq.n	800c3e4 <__multadd+0x84>
 800c39e:	68a3      	ldr	r3, [r4, #8]
 800c3a0:	42b3      	cmp	r3, r6
 800c3a2:	dc19      	bgt.n	800c3d8 <__multadd+0x78>
 800c3a4:	6861      	ldr	r1, [r4, #4]
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	3101      	adds	r1, #1
 800c3aa:	f7ff ff77 	bl	800c29c <_Balloc>
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	b928      	cbnz	r0, 800c3be <__multadd+0x5e>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	21b5      	movs	r1, #181	; 0xb5
 800c3b6:	4b0d      	ldr	r3, [pc, #52]	; (800c3ec <__multadd+0x8c>)
 800c3b8:	480d      	ldr	r0, [pc, #52]	; (800c3f0 <__multadd+0x90>)
 800c3ba:	f7fc fa63 	bl	8008884 <__assert_func>
 800c3be:	6922      	ldr	r2, [r4, #16]
 800c3c0:	f104 010c 	add.w	r1, r4, #12
 800c3c4:	3202      	adds	r2, #2
 800c3c6:	0092      	lsls	r2, r2, #2
 800c3c8:	300c      	adds	r0, #12
 800c3ca:	f7fc fabd 	bl	8008948 <memcpy>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7ff ffa3 	bl	800c31c <_Bfree>
 800c3d6:	462c      	mov	r4, r5
 800c3d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c3dc:	3601      	adds	r6, #1
 800c3de:	f8c3 8014 	str.w	r8, [r3, #20]
 800c3e2:	6126      	str	r6, [r4, #16]
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ea:	bf00      	nop
 800c3ec:	08010604 	.word	0x08010604
 800c3f0:	080106f8 	.word	0x080106f8

0800c3f4 <__s2b>:
 800c3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f8:	4615      	mov	r5, r2
 800c3fa:	2209      	movs	r2, #9
 800c3fc:	461f      	mov	r7, r3
 800c3fe:	3308      	adds	r3, #8
 800c400:	460c      	mov	r4, r1
 800c402:	fb93 f3f2 	sdiv	r3, r3, r2
 800c406:	4606      	mov	r6, r0
 800c408:	2201      	movs	r2, #1
 800c40a:	2100      	movs	r1, #0
 800c40c:	429a      	cmp	r2, r3
 800c40e:	db09      	blt.n	800c424 <__s2b+0x30>
 800c410:	4630      	mov	r0, r6
 800c412:	f7ff ff43 	bl	800c29c <_Balloc>
 800c416:	b940      	cbnz	r0, 800c42a <__s2b+0x36>
 800c418:	4602      	mov	r2, r0
 800c41a:	21ce      	movs	r1, #206	; 0xce
 800c41c:	4b18      	ldr	r3, [pc, #96]	; (800c480 <__s2b+0x8c>)
 800c41e:	4819      	ldr	r0, [pc, #100]	; (800c484 <__s2b+0x90>)
 800c420:	f7fc fa30 	bl	8008884 <__assert_func>
 800c424:	0052      	lsls	r2, r2, #1
 800c426:	3101      	adds	r1, #1
 800c428:	e7f0      	b.n	800c40c <__s2b+0x18>
 800c42a:	9b08      	ldr	r3, [sp, #32]
 800c42c:	2d09      	cmp	r5, #9
 800c42e:	6143      	str	r3, [r0, #20]
 800c430:	f04f 0301 	mov.w	r3, #1
 800c434:	6103      	str	r3, [r0, #16]
 800c436:	dd16      	ble.n	800c466 <__s2b+0x72>
 800c438:	f104 0909 	add.w	r9, r4, #9
 800c43c:	46c8      	mov	r8, r9
 800c43e:	442c      	add	r4, r5
 800c440:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c444:	4601      	mov	r1, r0
 800c446:	220a      	movs	r2, #10
 800c448:	4630      	mov	r0, r6
 800c44a:	3b30      	subs	r3, #48	; 0x30
 800c44c:	f7ff ff88 	bl	800c360 <__multadd>
 800c450:	45a0      	cmp	r8, r4
 800c452:	d1f5      	bne.n	800c440 <__s2b+0x4c>
 800c454:	f1a5 0408 	sub.w	r4, r5, #8
 800c458:	444c      	add	r4, r9
 800c45a:	1b2d      	subs	r5, r5, r4
 800c45c:	1963      	adds	r3, r4, r5
 800c45e:	42bb      	cmp	r3, r7
 800c460:	db04      	blt.n	800c46c <__s2b+0x78>
 800c462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c466:	2509      	movs	r5, #9
 800c468:	340a      	adds	r4, #10
 800c46a:	e7f6      	b.n	800c45a <__s2b+0x66>
 800c46c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c470:	4601      	mov	r1, r0
 800c472:	220a      	movs	r2, #10
 800c474:	4630      	mov	r0, r6
 800c476:	3b30      	subs	r3, #48	; 0x30
 800c478:	f7ff ff72 	bl	800c360 <__multadd>
 800c47c:	e7ee      	b.n	800c45c <__s2b+0x68>
 800c47e:	bf00      	nop
 800c480:	08010604 	.word	0x08010604
 800c484:	080106f8 	.word	0x080106f8

0800c488 <__hi0bits>:
 800c488:	0c02      	lsrs	r2, r0, #16
 800c48a:	0412      	lsls	r2, r2, #16
 800c48c:	4603      	mov	r3, r0
 800c48e:	b9ca      	cbnz	r2, 800c4c4 <__hi0bits+0x3c>
 800c490:	0403      	lsls	r3, r0, #16
 800c492:	2010      	movs	r0, #16
 800c494:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c498:	bf04      	itt	eq
 800c49a:	021b      	lsleq	r3, r3, #8
 800c49c:	3008      	addeq	r0, #8
 800c49e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c4a2:	bf04      	itt	eq
 800c4a4:	011b      	lsleq	r3, r3, #4
 800c4a6:	3004      	addeq	r0, #4
 800c4a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c4ac:	bf04      	itt	eq
 800c4ae:	009b      	lsleq	r3, r3, #2
 800c4b0:	3002      	addeq	r0, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	db05      	blt.n	800c4c2 <__hi0bits+0x3a>
 800c4b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c4ba:	f100 0001 	add.w	r0, r0, #1
 800c4be:	bf08      	it	eq
 800c4c0:	2020      	moveq	r0, #32
 800c4c2:	4770      	bx	lr
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	e7e5      	b.n	800c494 <__hi0bits+0xc>

0800c4c8 <__lo0bits>:
 800c4c8:	6803      	ldr	r3, [r0, #0]
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	f013 0007 	ands.w	r0, r3, #7
 800c4d0:	d00b      	beq.n	800c4ea <__lo0bits+0x22>
 800c4d2:	07d9      	lsls	r1, r3, #31
 800c4d4:	d422      	bmi.n	800c51c <__lo0bits+0x54>
 800c4d6:	0798      	lsls	r0, r3, #30
 800c4d8:	bf49      	itett	mi
 800c4da:	085b      	lsrmi	r3, r3, #1
 800c4dc:	089b      	lsrpl	r3, r3, #2
 800c4de:	2001      	movmi	r0, #1
 800c4e0:	6013      	strmi	r3, [r2, #0]
 800c4e2:	bf5c      	itt	pl
 800c4e4:	2002      	movpl	r0, #2
 800c4e6:	6013      	strpl	r3, [r2, #0]
 800c4e8:	4770      	bx	lr
 800c4ea:	b299      	uxth	r1, r3
 800c4ec:	b909      	cbnz	r1, 800c4f2 <__lo0bits+0x2a>
 800c4ee:	2010      	movs	r0, #16
 800c4f0:	0c1b      	lsrs	r3, r3, #16
 800c4f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c4f6:	bf04      	itt	eq
 800c4f8:	0a1b      	lsreq	r3, r3, #8
 800c4fa:	3008      	addeq	r0, #8
 800c4fc:	0719      	lsls	r1, r3, #28
 800c4fe:	bf04      	itt	eq
 800c500:	091b      	lsreq	r3, r3, #4
 800c502:	3004      	addeq	r0, #4
 800c504:	0799      	lsls	r1, r3, #30
 800c506:	bf04      	itt	eq
 800c508:	089b      	lsreq	r3, r3, #2
 800c50a:	3002      	addeq	r0, #2
 800c50c:	07d9      	lsls	r1, r3, #31
 800c50e:	d403      	bmi.n	800c518 <__lo0bits+0x50>
 800c510:	085b      	lsrs	r3, r3, #1
 800c512:	f100 0001 	add.w	r0, r0, #1
 800c516:	d003      	beq.n	800c520 <__lo0bits+0x58>
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	4770      	bx	lr
 800c51c:	2000      	movs	r0, #0
 800c51e:	4770      	bx	lr
 800c520:	2020      	movs	r0, #32
 800c522:	4770      	bx	lr

0800c524 <__i2b>:
 800c524:	b510      	push	{r4, lr}
 800c526:	460c      	mov	r4, r1
 800c528:	2101      	movs	r1, #1
 800c52a:	f7ff feb7 	bl	800c29c <_Balloc>
 800c52e:	4602      	mov	r2, r0
 800c530:	b928      	cbnz	r0, 800c53e <__i2b+0x1a>
 800c532:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c536:	4b04      	ldr	r3, [pc, #16]	; (800c548 <__i2b+0x24>)
 800c538:	4804      	ldr	r0, [pc, #16]	; (800c54c <__i2b+0x28>)
 800c53a:	f7fc f9a3 	bl	8008884 <__assert_func>
 800c53e:	2301      	movs	r3, #1
 800c540:	6144      	str	r4, [r0, #20]
 800c542:	6103      	str	r3, [r0, #16]
 800c544:	bd10      	pop	{r4, pc}
 800c546:	bf00      	nop
 800c548:	08010604 	.word	0x08010604
 800c54c:	080106f8 	.word	0x080106f8

0800c550 <__multiply>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	4614      	mov	r4, r2
 800c556:	690a      	ldr	r2, [r1, #16]
 800c558:	6923      	ldr	r3, [r4, #16]
 800c55a:	460d      	mov	r5, r1
 800c55c:	429a      	cmp	r2, r3
 800c55e:	bfbe      	ittt	lt
 800c560:	460b      	movlt	r3, r1
 800c562:	4625      	movlt	r5, r4
 800c564:	461c      	movlt	r4, r3
 800c566:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c56a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c56e:	68ab      	ldr	r3, [r5, #8]
 800c570:	6869      	ldr	r1, [r5, #4]
 800c572:	eb0a 0709 	add.w	r7, sl, r9
 800c576:	42bb      	cmp	r3, r7
 800c578:	b085      	sub	sp, #20
 800c57a:	bfb8      	it	lt
 800c57c:	3101      	addlt	r1, #1
 800c57e:	f7ff fe8d 	bl	800c29c <_Balloc>
 800c582:	b930      	cbnz	r0, 800c592 <__multiply+0x42>
 800c584:	4602      	mov	r2, r0
 800c586:	f240 115d 	movw	r1, #349	; 0x15d
 800c58a:	4b41      	ldr	r3, [pc, #260]	; (800c690 <__multiply+0x140>)
 800c58c:	4841      	ldr	r0, [pc, #260]	; (800c694 <__multiply+0x144>)
 800c58e:	f7fc f979 	bl	8008884 <__assert_func>
 800c592:	f100 0614 	add.w	r6, r0, #20
 800c596:	4633      	mov	r3, r6
 800c598:	2200      	movs	r2, #0
 800c59a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c59e:	4543      	cmp	r3, r8
 800c5a0:	d31e      	bcc.n	800c5e0 <__multiply+0x90>
 800c5a2:	f105 0c14 	add.w	ip, r5, #20
 800c5a6:	f104 0314 	add.w	r3, r4, #20
 800c5aa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c5ae:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c5b2:	9202      	str	r2, [sp, #8]
 800c5b4:	ebac 0205 	sub.w	r2, ip, r5
 800c5b8:	3a15      	subs	r2, #21
 800c5ba:	f022 0203 	bic.w	r2, r2, #3
 800c5be:	3204      	adds	r2, #4
 800c5c0:	f105 0115 	add.w	r1, r5, #21
 800c5c4:	458c      	cmp	ip, r1
 800c5c6:	bf38      	it	cc
 800c5c8:	2204      	movcc	r2, #4
 800c5ca:	9201      	str	r2, [sp, #4]
 800c5cc:	9a02      	ldr	r2, [sp, #8]
 800c5ce:	9303      	str	r3, [sp, #12]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d808      	bhi.n	800c5e6 <__multiply+0x96>
 800c5d4:	2f00      	cmp	r7, #0
 800c5d6:	dc55      	bgt.n	800c684 <__multiply+0x134>
 800c5d8:	6107      	str	r7, [r0, #16]
 800c5da:	b005      	add	sp, #20
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	f843 2b04 	str.w	r2, [r3], #4
 800c5e4:	e7db      	b.n	800c59e <__multiply+0x4e>
 800c5e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5ea:	f1ba 0f00 	cmp.w	sl, #0
 800c5ee:	d020      	beq.n	800c632 <__multiply+0xe2>
 800c5f0:	46b1      	mov	r9, r6
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f105 0e14 	add.w	lr, r5, #20
 800c5f8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c5fc:	f8d9 b000 	ldr.w	fp, [r9]
 800c600:	b2a1      	uxth	r1, r4
 800c602:	fa1f fb8b 	uxth.w	fp, fp
 800c606:	fb0a b101 	mla	r1, sl, r1, fp
 800c60a:	4411      	add	r1, r2
 800c60c:	f8d9 2000 	ldr.w	r2, [r9]
 800c610:	0c24      	lsrs	r4, r4, #16
 800c612:	0c12      	lsrs	r2, r2, #16
 800c614:	fb0a 2404 	mla	r4, sl, r4, r2
 800c618:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c61c:	b289      	uxth	r1, r1
 800c61e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c622:	45f4      	cmp	ip, lr
 800c624:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c628:	f849 1b04 	str.w	r1, [r9], #4
 800c62c:	d8e4      	bhi.n	800c5f8 <__multiply+0xa8>
 800c62e:	9901      	ldr	r1, [sp, #4]
 800c630:	5072      	str	r2, [r6, r1]
 800c632:	9a03      	ldr	r2, [sp, #12]
 800c634:	3304      	adds	r3, #4
 800c636:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c63a:	f1b9 0f00 	cmp.w	r9, #0
 800c63e:	d01f      	beq.n	800c680 <__multiply+0x130>
 800c640:	46b6      	mov	lr, r6
 800c642:	f04f 0a00 	mov.w	sl, #0
 800c646:	6834      	ldr	r4, [r6, #0]
 800c648:	f105 0114 	add.w	r1, r5, #20
 800c64c:	880a      	ldrh	r2, [r1, #0]
 800c64e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c652:	b2a4      	uxth	r4, r4
 800c654:	fb09 b202 	mla	r2, r9, r2, fp
 800c658:	4492      	add	sl, r2
 800c65a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c65e:	f84e 4b04 	str.w	r4, [lr], #4
 800c662:	f851 4b04 	ldr.w	r4, [r1], #4
 800c666:	f8be 2000 	ldrh.w	r2, [lr]
 800c66a:	0c24      	lsrs	r4, r4, #16
 800c66c:	fb09 2404 	mla	r4, r9, r4, r2
 800c670:	458c      	cmp	ip, r1
 800c672:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c676:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c67a:	d8e7      	bhi.n	800c64c <__multiply+0xfc>
 800c67c:	9a01      	ldr	r2, [sp, #4]
 800c67e:	50b4      	str	r4, [r6, r2]
 800c680:	3604      	adds	r6, #4
 800c682:	e7a3      	b.n	800c5cc <__multiply+0x7c>
 800c684:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1a5      	bne.n	800c5d8 <__multiply+0x88>
 800c68c:	3f01      	subs	r7, #1
 800c68e:	e7a1      	b.n	800c5d4 <__multiply+0x84>
 800c690:	08010604 	.word	0x08010604
 800c694:	080106f8 	.word	0x080106f8

0800c698 <__pow5mult>:
 800c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69c:	4615      	mov	r5, r2
 800c69e:	f012 0203 	ands.w	r2, r2, #3
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	d007      	beq.n	800c6b8 <__pow5mult+0x20>
 800c6a8:	4c25      	ldr	r4, [pc, #148]	; (800c740 <__pow5mult+0xa8>)
 800c6aa:	3a01      	subs	r2, #1
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6b2:	f7ff fe55 	bl	800c360 <__multadd>
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	10ad      	asrs	r5, r5, #2
 800c6ba:	d03d      	beq.n	800c738 <__pow5mult+0xa0>
 800c6bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6be:	b97c      	cbnz	r4, 800c6e0 <__pow5mult+0x48>
 800c6c0:	2010      	movs	r0, #16
 800c6c2:	f7fc f939 	bl	8008938 <malloc>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	6270      	str	r0, [r6, #36]	; 0x24
 800c6ca:	b928      	cbnz	r0, 800c6d8 <__pow5mult+0x40>
 800c6cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6d0:	4b1c      	ldr	r3, [pc, #112]	; (800c744 <__pow5mult+0xac>)
 800c6d2:	481d      	ldr	r0, [pc, #116]	; (800c748 <__pow5mult+0xb0>)
 800c6d4:	f7fc f8d6 	bl	8008884 <__assert_func>
 800c6d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6dc:	6004      	str	r4, [r0, #0]
 800c6de:	60c4      	str	r4, [r0, #12]
 800c6e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6e8:	b94c      	cbnz	r4, 800c6fe <__pow5mult+0x66>
 800c6ea:	f240 2171 	movw	r1, #625	; 0x271
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f7ff ff18 	bl	800c524 <__i2b>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6fc:	6003      	str	r3, [r0, #0]
 800c6fe:	f04f 0900 	mov.w	r9, #0
 800c702:	07eb      	lsls	r3, r5, #31
 800c704:	d50a      	bpl.n	800c71c <__pow5mult+0x84>
 800c706:	4639      	mov	r1, r7
 800c708:	4622      	mov	r2, r4
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7ff ff20 	bl	800c550 <__multiply>
 800c710:	4680      	mov	r8, r0
 800c712:	4639      	mov	r1, r7
 800c714:	4630      	mov	r0, r6
 800c716:	f7ff fe01 	bl	800c31c <_Bfree>
 800c71a:	4647      	mov	r7, r8
 800c71c:	106d      	asrs	r5, r5, #1
 800c71e:	d00b      	beq.n	800c738 <__pow5mult+0xa0>
 800c720:	6820      	ldr	r0, [r4, #0]
 800c722:	b938      	cbnz	r0, 800c734 <__pow5mult+0x9c>
 800c724:	4622      	mov	r2, r4
 800c726:	4621      	mov	r1, r4
 800c728:	4630      	mov	r0, r6
 800c72a:	f7ff ff11 	bl	800c550 <__multiply>
 800c72e:	6020      	str	r0, [r4, #0]
 800c730:	f8c0 9000 	str.w	r9, [r0]
 800c734:	4604      	mov	r4, r0
 800c736:	e7e4      	b.n	800c702 <__pow5mult+0x6a>
 800c738:	4638      	mov	r0, r7
 800c73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73e:	bf00      	nop
 800c740:	08010848 	.word	0x08010848
 800c744:	0801058e 	.word	0x0801058e
 800c748:	080106f8 	.word	0x080106f8

0800c74c <__lshift>:
 800c74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c750:	460c      	mov	r4, r1
 800c752:	4607      	mov	r7, r0
 800c754:	4691      	mov	r9, r2
 800c756:	6923      	ldr	r3, [r4, #16]
 800c758:	6849      	ldr	r1, [r1, #4]
 800c75a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c75e:	68a3      	ldr	r3, [r4, #8]
 800c760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c764:	f108 0601 	add.w	r6, r8, #1
 800c768:	42b3      	cmp	r3, r6
 800c76a:	db0b      	blt.n	800c784 <__lshift+0x38>
 800c76c:	4638      	mov	r0, r7
 800c76e:	f7ff fd95 	bl	800c29c <_Balloc>
 800c772:	4605      	mov	r5, r0
 800c774:	b948      	cbnz	r0, 800c78a <__lshift+0x3e>
 800c776:	4602      	mov	r2, r0
 800c778:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c77c:	4b27      	ldr	r3, [pc, #156]	; (800c81c <__lshift+0xd0>)
 800c77e:	4828      	ldr	r0, [pc, #160]	; (800c820 <__lshift+0xd4>)
 800c780:	f7fc f880 	bl	8008884 <__assert_func>
 800c784:	3101      	adds	r1, #1
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	e7ee      	b.n	800c768 <__lshift+0x1c>
 800c78a:	2300      	movs	r3, #0
 800c78c:	f100 0114 	add.w	r1, r0, #20
 800c790:	f100 0210 	add.w	r2, r0, #16
 800c794:	4618      	mov	r0, r3
 800c796:	4553      	cmp	r3, sl
 800c798:	db33      	blt.n	800c802 <__lshift+0xb6>
 800c79a:	6920      	ldr	r0, [r4, #16]
 800c79c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7a0:	f104 0314 	add.w	r3, r4, #20
 800c7a4:	f019 091f 	ands.w	r9, r9, #31
 800c7a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7b0:	d02b      	beq.n	800c80a <__lshift+0xbe>
 800c7b2:	468a      	mov	sl, r1
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f1c9 0e20 	rsb	lr, r9, #32
 800c7ba:	6818      	ldr	r0, [r3, #0]
 800c7bc:	fa00 f009 	lsl.w	r0, r0, r9
 800c7c0:	4302      	orrs	r2, r0
 800c7c2:	f84a 2b04 	str.w	r2, [sl], #4
 800c7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ca:	459c      	cmp	ip, r3
 800c7cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c7d0:	d8f3      	bhi.n	800c7ba <__lshift+0x6e>
 800c7d2:	ebac 0304 	sub.w	r3, ip, r4
 800c7d6:	3b15      	subs	r3, #21
 800c7d8:	f023 0303 	bic.w	r3, r3, #3
 800c7dc:	3304      	adds	r3, #4
 800c7de:	f104 0015 	add.w	r0, r4, #21
 800c7e2:	4584      	cmp	ip, r0
 800c7e4:	bf38      	it	cc
 800c7e6:	2304      	movcc	r3, #4
 800c7e8:	50ca      	str	r2, [r1, r3]
 800c7ea:	b10a      	cbz	r2, 800c7f0 <__lshift+0xa4>
 800c7ec:	f108 0602 	add.w	r6, r8, #2
 800c7f0:	3e01      	subs	r6, #1
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	612e      	str	r6, [r5, #16]
 800c7f8:	f7ff fd90 	bl	800c31c <_Bfree>
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c802:	f842 0f04 	str.w	r0, [r2, #4]!
 800c806:	3301      	adds	r3, #1
 800c808:	e7c5      	b.n	800c796 <__lshift+0x4a>
 800c80a:	3904      	subs	r1, #4
 800c80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c810:	459c      	cmp	ip, r3
 800c812:	f841 2f04 	str.w	r2, [r1, #4]!
 800c816:	d8f9      	bhi.n	800c80c <__lshift+0xc0>
 800c818:	e7ea      	b.n	800c7f0 <__lshift+0xa4>
 800c81a:	bf00      	nop
 800c81c:	08010604 	.word	0x08010604
 800c820:	080106f8 	.word	0x080106f8

0800c824 <__mcmp>:
 800c824:	4603      	mov	r3, r0
 800c826:	690a      	ldr	r2, [r1, #16]
 800c828:	6900      	ldr	r0, [r0, #16]
 800c82a:	b530      	push	{r4, r5, lr}
 800c82c:	1a80      	subs	r0, r0, r2
 800c82e:	d10d      	bne.n	800c84c <__mcmp+0x28>
 800c830:	3314      	adds	r3, #20
 800c832:	3114      	adds	r1, #20
 800c834:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c838:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c83c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c840:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c844:	4295      	cmp	r5, r2
 800c846:	d002      	beq.n	800c84e <__mcmp+0x2a>
 800c848:	d304      	bcc.n	800c854 <__mcmp+0x30>
 800c84a:	2001      	movs	r0, #1
 800c84c:	bd30      	pop	{r4, r5, pc}
 800c84e:	42a3      	cmp	r3, r4
 800c850:	d3f4      	bcc.n	800c83c <__mcmp+0x18>
 800c852:	e7fb      	b.n	800c84c <__mcmp+0x28>
 800c854:	f04f 30ff 	mov.w	r0, #4294967295
 800c858:	e7f8      	b.n	800c84c <__mcmp+0x28>
	...

0800c85c <__mdiff>:
 800c85c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c860:	460c      	mov	r4, r1
 800c862:	4606      	mov	r6, r0
 800c864:	4611      	mov	r1, r2
 800c866:	4620      	mov	r0, r4
 800c868:	4692      	mov	sl, r2
 800c86a:	f7ff ffdb 	bl	800c824 <__mcmp>
 800c86e:	1e05      	subs	r5, r0, #0
 800c870:	d111      	bne.n	800c896 <__mdiff+0x3a>
 800c872:	4629      	mov	r1, r5
 800c874:	4630      	mov	r0, r6
 800c876:	f7ff fd11 	bl	800c29c <_Balloc>
 800c87a:	4602      	mov	r2, r0
 800c87c:	b928      	cbnz	r0, 800c88a <__mdiff+0x2e>
 800c87e:	f240 2132 	movw	r1, #562	; 0x232
 800c882:	4b3c      	ldr	r3, [pc, #240]	; (800c974 <__mdiff+0x118>)
 800c884:	483c      	ldr	r0, [pc, #240]	; (800c978 <__mdiff+0x11c>)
 800c886:	f7fb fffd 	bl	8008884 <__assert_func>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c890:	4610      	mov	r0, r2
 800c892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c896:	bfa4      	itt	ge
 800c898:	4653      	movge	r3, sl
 800c89a:	46a2      	movge	sl, r4
 800c89c:	4630      	mov	r0, r6
 800c89e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c8a2:	bfa6      	itte	ge
 800c8a4:	461c      	movge	r4, r3
 800c8a6:	2500      	movge	r5, #0
 800c8a8:	2501      	movlt	r5, #1
 800c8aa:	f7ff fcf7 	bl	800c29c <_Balloc>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	b918      	cbnz	r0, 800c8ba <__mdiff+0x5e>
 800c8b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8b6:	4b2f      	ldr	r3, [pc, #188]	; (800c974 <__mdiff+0x118>)
 800c8b8:	e7e4      	b.n	800c884 <__mdiff+0x28>
 800c8ba:	f100 0814 	add.w	r8, r0, #20
 800c8be:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c8c2:	60c5      	str	r5, [r0, #12]
 800c8c4:	f04f 0c00 	mov.w	ip, #0
 800c8c8:	f10a 0514 	add.w	r5, sl, #20
 800c8cc:	f10a 0010 	add.w	r0, sl, #16
 800c8d0:	46c2      	mov	sl, r8
 800c8d2:	6926      	ldr	r6, [r4, #16]
 800c8d4:	f104 0914 	add.w	r9, r4, #20
 800c8d8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c8dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c8e0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800c8e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8e8:	fa1f f18b 	uxth.w	r1, fp
 800c8ec:	4461      	add	r1, ip
 800c8ee:	fa1f fc83 	uxth.w	ip, r3
 800c8f2:	0c1b      	lsrs	r3, r3, #16
 800c8f4:	eba1 010c 	sub.w	r1, r1, ip
 800c8f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c8fc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c900:	b289      	uxth	r1, r1
 800c902:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c906:	454e      	cmp	r6, r9
 800c908:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c90c:	f84a 3b04 	str.w	r3, [sl], #4
 800c910:	d8e6      	bhi.n	800c8e0 <__mdiff+0x84>
 800c912:	1b33      	subs	r3, r6, r4
 800c914:	3b15      	subs	r3, #21
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	3415      	adds	r4, #21
 800c91c:	3304      	adds	r3, #4
 800c91e:	42a6      	cmp	r6, r4
 800c920:	bf38      	it	cc
 800c922:	2304      	movcc	r3, #4
 800c924:	441d      	add	r5, r3
 800c926:	4443      	add	r3, r8
 800c928:	461e      	mov	r6, r3
 800c92a:	462c      	mov	r4, r5
 800c92c:	4574      	cmp	r4, lr
 800c92e:	d30e      	bcc.n	800c94e <__mdiff+0xf2>
 800c930:	f10e 0103 	add.w	r1, lr, #3
 800c934:	1b49      	subs	r1, r1, r5
 800c936:	f021 0103 	bic.w	r1, r1, #3
 800c93a:	3d03      	subs	r5, #3
 800c93c:	45ae      	cmp	lr, r5
 800c93e:	bf38      	it	cc
 800c940:	2100      	movcc	r1, #0
 800c942:	4419      	add	r1, r3
 800c944:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c948:	b18b      	cbz	r3, 800c96e <__mdiff+0x112>
 800c94a:	6117      	str	r7, [r2, #16]
 800c94c:	e7a0      	b.n	800c890 <__mdiff+0x34>
 800c94e:	f854 8b04 	ldr.w	r8, [r4], #4
 800c952:	fa1f f188 	uxth.w	r1, r8
 800c956:	4461      	add	r1, ip
 800c958:	1408      	asrs	r0, r1, #16
 800c95a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800c95e:	b289      	uxth	r1, r1
 800c960:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c964:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c968:	f846 1b04 	str.w	r1, [r6], #4
 800c96c:	e7de      	b.n	800c92c <__mdiff+0xd0>
 800c96e:	3f01      	subs	r7, #1
 800c970:	e7e8      	b.n	800c944 <__mdiff+0xe8>
 800c972:	bf00      	nop
 800c974:	08010604 	.word	0x08010604
 800c978:	080106f8 	.word	0x080106f8

0800c97c <__ulp>:
 800c97c:	4b11      	ldr	r3, [pc, #68]	; (800c9c4 <__ulp+0x48>)
 800c97e:	400b      	ands	r3, r1
 800c980:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c984:	2b00      	cmp	r3, #0
 800c986:	dd02      	ble.n	800c98e <__ulp+0x12>
 800c988:	2000      	movs	r0, #0
 800c98a:	4619      	mov	r1, r3
 800c98c:	4770      	bx	lr
 800c98e:	425b      	negs	r3, r3
 800c990:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c994:	f04f 0000 	mov.w	r0, #0
 800c998:	f04f 0100 	mov.w	r1, #0
 800c99c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c9a0:	da04      	bge.n	800c9ac <__ulp+0x30>
 800c9a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c9a6:	fa43 f102 	asr.w	r1, r3, r2
 800c9aa:	4770      	bx	lr
 800c9ac:	f1a2 0314 	sub.w	r3, r2, #20
 800c9b0:	2b1e      	cmp	r3, #30
 800c9b2:	bfd6      	itet	le
 800c9b4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c9b8:	2301      	movgt	r3, #1
 800c9ba:	fa22 f303 	lsrle.w	r3, r2, r3
 800c9be:	4618      	mov	r0, r3
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	7ff00000 	.word	0x7ff00000

0800c9c8 <__b2d>:
 800c9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9cc:	6907      	ldr	r7, [r0, #16]
 800c9ce:	f100 0914 	add.w	r9, r0, #20
 800c9d2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c9d6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c9da:	f1a7 0804 	sub.w	r8, r7, #4
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f7ff fd52 	bl	800c488 <__hi0bits>
 800c9e4:	f1c0 0320 	rsb	r3, r0, #32
 800c9e8:	280a      	cmp	r0, #10
 800c9ea:	600b      	str	r3, [r1, #0]
 800c9ec:	491f      	ldr	r1, [pc, #124]	; (800ca6c <__b2d+0xa4>)
 800c9ee:	dc17      	bgt.n	800ca20 <__b2d+0x58>
 800c9f0:	45c1      	cmp	r9, r8
 800c9f2:	bf28      	it	cs
 800c9f4:	2200      	movcs	r2, #0
 800c9f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c9fa:	fa26 f30c 	lsr.w	r3, r6, ip
 800c9fe:	bf38      	it	cc
 800ca00:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ca04:	ea43 0501 	orr.w	r5, r3, r1
 800ca08:	f100 0315 	add.w	r3, r0, #21
 800ca0c:	fa06 f303 	lsl.w	r3, r6, r3
 800ca10:	fa22 f20c 	lsr.w	r2, r2, ip
 800ca14:	ea43 0402 	orr.w	r4, r3, r2
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca20:	45c1      	cmp	r9, r8
 800ca22:	bf2e      	itee	cs
 800ca24:	2200      	movcs	r2, #0
 800ca26:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ca2a:	f1a7 0808 	subcc.w	r8, r7, #8
 800ca2e:	f1b0 030b 	subs.w	r3, r0, #11
 800ca32:	d016      	beq.n	800ca62 <__b2d+0x9a>
 800ca34:	f1c3 0720 	rsb	r7, r3, #32
 800ca38:	fa22 f107 	lsr.w	r1, r2, r7
 800ca3c:	45c8      	cmp	r8, r9
 800ca3e:	fa06 f603 	lsl.w	r6, r6, r3
 800ca42:	ea46 0601 	orr.w	r6, r6, r1
 800ca46:	bf94      	ite	ls
 800ca48:	2100      	movls	r1, #0
 800ca4a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ca4e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ca52:	fa02 f003 	lsl.w	r0, r2, r3
 800ca56:	40f9      	lsrs	r1, r7
 800ca58:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca5c:	ea40 0401 	orr.w	r4, r0, r1
 800ca60:	e7da      	b.n	800ca18 <__b2d+0x50>
 800ca62:	4614      	mov	r4, r2
 800ca64:	ea46 0501 	orr.w	r5, r6, r1
 800ca68:	e7d6      	b.n	800ca18 <__b2d+0x50>
 800ca6a:	bf00      	nop
 800ca6c:	3ff00000 	.word	0x3ff00000

0800ca70 <__d2b>:
 800ca70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ca74:	2101      	movs	r1, #1
 800ca76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ca7a:	4690      	mov	r8, r2
 800ca7c:	461d      	mov	r5, r3
 800ca7e:	f7ff fc0d 	bl	800c29c <_Balloc>
 800ca82:	4604      	mov	r4, r0
 800ca84:	b930      	cbnz	r0, 800ca94 <__d2b+0x24>
 800ca86:	4602      	mov	r2, r0
 800ca88:	f240 310a 	movw	r1, #778	; 0x30a
 800ca8c:	4b24      	ldr	r3, [pc, #144]	; (800cb20 <__d2b+0xb0>)
 800ca8e:	4825      	ldr	r0, [pc, #148]	; (800cb24 <__d2b+0xb4>)
 800ca90:	f7fb fef8 	bl	8008884 <__assert_func>
 800ca94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ca98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ca9c:	bb2d      	cbnz	r5, 800caea <__d2b+0x7a>
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	f1b8 0300 	subs.w	r3, r8, #0
 800caa4:	d026      	beq.n	800caf4 <__d2b+0x84>
 800caa6:	4668      	mov	r0, sp
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	f7ff fd0d 	bl	800c4c8 <__lo0bits>
 800caae:	9900      	ldr	r1, [sp, #0]
 800cab0:	b1f0      	cbz	r0, 800caf0 <__d2b+0x80>
 800cab2:	9a01      	ldr	r2, [sp, #4]
 800cab4:	f1c0 0320 	rsb	r3, r0, #32
 800cab8:	fa02 f303 	lsl.w	r3, r2, r3
 800cabc:	430b      	orrs	r3, r1
 800cabe:	40c2      	lsrs	r2, r0
 800cac0:	6163      	str	r3, [r4, #20]
 800cac2:	9201      	str	r2, [sp, #4]
 800cac4:	9b01      	ldr	r3, [sp, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bf14      	ite	ne
 800caca:	2102      	movne	r1, #2
 800cacc:	2101      	moveq	r1, #1
 800cace:	61a3      	str	r3, [r4, #24]
 800cad0:	6121      	str	r1, [r4, #16]
 800cad2:	b1c5      	cbz	r5, 800cb06 <__d2b+0x96>
 800cad4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cad8:	4405      	add	r5, r0
 800cada:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cade:	603d      	str	r5, [r7, #0]
 800cae0:	6030      	str	r0, [r6, #0]
 800cae2:	4620      	mov	r0, r4
 800cae4:	b002      	add	sp, #8
 800cae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caee:	e7d6      	b.n	800ca9e <__d2b+0x2e>
 800caf0:	6161      	str	r1, [r4, #20]
 800caf2:	e7e7      	b.n	800cac4 <__d2b+0x54>
 800caf4:	a801      	add	r0, sp, #4
 800caf6:	f7ff fce7 	bl	800c4c8 <__lo0bits>
 800cafa:	2101      	movs	r1, #1
 800cafc:	9b01      	ldr	r3, [sp, #4]
 800cafe:	6121      	str	r1, [r4, #16]
 800cb00:	6163      	str	r3, [r4, #20]
 800cb02:	3020      	adds	r0, #32
 800cb04:	e7e5      	b.n	800cad2 <__d2b+0x62>
 800cb06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cb0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb0e:	6038      	str	r0, [r7, #0]
 800cb10:	6918      	ldr	r0, [r3, #16]
 800cb12:	f7ff fcb9 	bl	800c488 <__hi0bits>
 800cb16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cb1a:	6031      	str	r1, [r6, #0]
 800cb1c:	e7e1      	b.n	800cae2 <__d2b+0x72>
 800cb1e:	bf00      	nop
 800cb20:	08010604 	.word	0x08010604
 800cb24:	080106f8 	.word	0x080106f8

0800cb28 <__ratio>:
 800cb28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	4688      	mov	r8, r1
 800cb2e:	4669      	mov	r1, sp
 800cb30:	4681      	mov	r9, r0
 800cb32:	f7ff ff49 	bl	800c9c8 <__b2d>
 800cb36:	460f      	mov	r7, r1
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	a901      	add	r1, sp, #4
 800cb40:	f7ff ff42 	bl	800c9c8 <__b2d>
 800cb44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb4c:	468b      	mov	fp, r1
 800cb4e:	eba3 0c02 	sub.w	ip, r3, r2
 800cb52:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	bfd5      	itete	le
 800cb60:	460a      	movle	r2, r1
 800cb62:	462a      	movgt	r2, r5
 800cb64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb68:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb6c:	bfd8      	it	le
 800cb6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb72:	465b      	mov	r3, fp
 800cb74:	4602      	mov	r2, r0
 800cb76:	4639      	mov	r1, r7
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f7f3 fdd7 	bl	800072c <__aeabi_ddiv>
 800cb7e:	b003      	add	sp, #12
 800cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb84 <__copybits>:
 800cb84:	3901      	subs	r1, #1
 800cb86:	b570      	push	{r4, r5, r6, lr}
 800cb88:	1149      	asrs	r1, r1, #5
 800cb8a:	6914      	ldr	r4, [r2, #16]
 800cb8c:	3101      	adds	r1, #1
 800cb8e:	f102 0314 	add.w	r3, r2, #20
 800cb92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb9a:	1f05      	subs	r5, r0, #4
 800cb9c:	42a3      	cmp	r3, r4
 800cb9e:	d30c      	bcc.n	800cbba <__copybits+0x36>
 800cba0:	1aa3      	subs	r3, r4, r2
 800cba2:	3b11      	subs	r3, #17
 800cba4:	f023 0303 	bic.w	r3, r3, #3
 800cba8:	3211      	adds	r2, #17
 800cbaa:	42a2      	cmp	r2, r4
 800cbac:	bf88      	it	hi
 800cbae:	2300      	movhi	r3, #0
 800cbb0:	4418      	add	r0, r3
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	4288      	cmp	r0, r1
 800cbb6:	d305      	bcc.n	800cbc4 <__copybits+0x40>
 800cbb8:	bd70      	pop	{r4, r5, r6, pc}
 800cbba:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbbe:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbc2:	e7eb      	b.n	800cb9c <__copybits+0x18>
 800cbc4:	f840 3b04 	str.w	r3, [r0], #4
 800cbc8:	e7f4      	b.n	800cbb4 <__copybits+0x30>

0800cbca <__any_on>:
 800cbca:	f100 0214 	add.w	r2, r0, #20
 800cbce:	6900      	ldr	r0, [r0, #16]
 800cbd0:	114b      	asrs	r3, r1, #5
 800cbd2:	4298      	cmp	r0, r3
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	db11      	blt.n	800cbfc <__any_on+0x32>
 800cbd8:	dd0a      	ble.n	800cbf0 <__any_on+0x26>
 800cbda:	f011 011f 	ands.w	r1, r1, #31
 800cbde:	d007      	beq.n	800cbf0 <__any_on+0x26>
 800cbe0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbe4:	fa24 f001 	lsr.w	r0, r4, r1
 800cbe8:	fa00 f101 	lsl.w	r1, r0, r1
 800cbec:	428c      	cmp	r4, r1
 800cbee:	d10b      	bne.n	800cc08 <__any_on+0x3e>
 800cbf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d803      	bhi.n	800cc00 <__any_on+0x36>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	bd10      	pop	{r4, pc}
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	e7f7      	b.n	800cbf0 <__any_on+0x26>
 800cc00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc04:	2900      	cmp	r1, #0
 800cc06:	d0f5      	beq.n	800cbf4 <__any_on+0x2a>
 800cc08:	2001      	movs	r0, #1
 800cc0a:	e7f6      	b.n	800cbfa <__any_on+0x30>

0800cc0c <_calloc_r>:
 800cc0c:	b538      	push	{r3, r4, r5, lr}
 800cc0e:	fb02 f501 	mul.w	r5, r2, r1
 800cc12:	4629      	mov	r1, r5
 800cc14:	f7fb fefa 	bl	8008a0c <_malloc_r>
 800cc18:	4604      	mov	r4, r0
 800cc1a:	b118      	cbz	r0, 800cc24 <_calloc_r+0x18>
 800cc1c:	462a      	mov	r2, r5
 800cc1e:	2100      	movs	r1, #0
 800cc20:	f7fb fea0 	bl	8008964 <memset>
 800cc24:	4620      	mov	r0, r4
 800cc26:	bd38      	pop	{r3, r4, r5, pc}

0800cc28 <_realloc_r>:
 800cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2a:	4607      	mov	r7, r0
 800cc2c:	4614      	mov	r4, r2
 800cc2e:	460e      	mov	r6, r1
 800cc30:	b921      	cbnz	r1, 800cc3c <_realloc_r+0x14>
 800cc32:	4611      	mov	r1, r2
 800cc34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc38:	f7fb bee8 	b.w	8008a0c <_malloc_r>
 800cc3c:	b922      	cbnz	r2, 800cc48 <_realloc_r+0x20>
 800cc3e:	f7fb fe99 	bl	8008974 <_free_r>
 800cc42:	4625      	mov	r5, r4
 800cc44:	4628      	mov	r0, r5
 800cc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc48:	f000 fa72 	bl	800d130 <_malloc_usable_size_r>
 800cc4c:	42a0      	cmp	r0, r4
 800cc4e:	d20f      	bcs.n	800cc70 <_realloc_r+0x48>
 800cc50:	4621      	mov	r1, r4
 800cc52:	4638      	mov	r0, r7
 800cc54:	f7fb feda 	bl	8008a0c <_malloc_r>
 800cc58:	4605      	mov	r5, r0
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0f2      	beq.n	800cc44 <_realloc_r+0x1c>
 800cc5e:	4631      	mov	r1, r6
 800cc60:	4622      	mov	r2, r4
 800cc62:	f7fb fe71 	bl	8008948 <memcpy>
 800cc66:	4631      	mov	r1, r6
 800cc68:	4638      	mov	r0, r7
 800cc6a:	f7fb fe83 	bl	8008974 <_free_r>
 800cc6e:	e7e9      	b.n	800cc44 <_realloc_r+0x1c>
 800cc70:	4635      	mov	r5, r6
 800cc72:	e7e7      	b.n	800cc44 <_realloc_r+0x1c>

0800cc74 <__ssputs_r>:
 800cc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc78:	688e      	ldr	r6, [r1, #8]
 800cc7a:	4682      	mov	sl, r0
 800cc7c:	429e      	cmp	r6, r3
 800cc7e:	460c      	mov	r4, r1
 800cc80:	4690      	mov	r8, r2
 800cc82:	461f      	mov	r7, r3
 800cc84:	d838      	bhi.n	800ccf8 <__ssputs_r+0x84>
 800cc86:	898a      	ldrh	r2, [r1, #12]
 800cc88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc8c:	d032      	beq.n	800ccf4 <__ssputs_r+0x80>
 800cc8e:	6825      	ldr	r5, [r4, #0]
 800cc90:	6909      	ldr	r1, [r1, #16]
 800cc92:	3301      	adds	r3, #1
 800cc94:	eba5 0901 	sub.w	r9, r5, r1
 800cc98:	6965      	ldr	r5, [r4, #20]
 800cc9a:	444b      	add	r3, r9
 800cc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cca4:	106d      	asrs	r5, r5, #1
 800cca6:	429d      	cmp	r5, r3
 800cca8:	bf38      	it	cc
 800ccaa:	461d      	movcc	r5, r3
 800ccac:	0553      	lsls	r3, r2, #21
 800ccae:	d531      	bpl.n	800cd14 <__ssputs_r+0xa0>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	f7fb feab 	bl	8008a0c <_malloc_r>
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	b950      	cbnz	r0, 800ccd0 <__ssputs_r+0x5c>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	f8ca 3000 	str.w	r3, [sl]
 800ccc4:	89a3      	ldrh	r3, [r4, #12]
 800ccc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccca:	81a3      	strh	r3, [r4, #12]
 800cccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd0:	464a      	mov	r2, r9
 800ccd2:	6921      	ldr	r1, [r4, #16]
 800ccd4:	f7fb fe38 	bl	8008948 <memcpy>
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce2:	81a3      	strh	r3, [r4, #12]
 800cce4:	6126      	str	r6, [r4, #16]
 800cce6:	444e      	add	r6, r9
 800cce8:	6026      	str	r6, [r4, #0]
 800ccea:	463e      	mov	r6, r7
 800ccec:	6165      	str	r5, [r4, #20]
 800ccee:	eba5 0509 	sub.w	r5, r5, r9
 800ccf2:	60a5      	str	r5, [r4, #8]
 800ccf4:	42be      	cmp	r6, r7
 800ccf6:	d900      	bls.n	800ccfa <__ssputs_r+0x86>
 800ccf8:	463e      	mov	r6, r7
 800ccfa:	4632      	mov	r2, r6
 800ccfc:	4641      	mov	r1, r8
 800ccfe:	6820      	ldr	r0, [r4, #0]
 800cd00:	f7ff faa6 	bl	800c250 <memmove>
 800cd04:	68a3      	ldr	r3, [r4, #8]
 800cd06:	6822      	ldr	r2, [r4, #0]
 800cd08:	1b9b      	subs	r3, r3, r6
 800cd0a:	4432      	add	r2, r6
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	60a3      	str	r3, [r4, #8]
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	e7db      	b.n	800cccc <__ssputs_r+0x58>
 800cd14:	462a      	mov	r2, r5
 800cd16:	f7ff ff87 	bl	800cc28 <_realloc_r>
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d1e1      	bne.n	800cce4 <__ssputs_r+0x70>
 800cd20:	4650      	mov	r0, sl
 800cd22:	6921      	ldr	r1, [r4, #16]
 800cd24:	f7fb fe26 	bl	8008974 <_free_r>
 800cd28:	e7c7      	b.n	800ccba <__ssputs_r+0x46>
	...

0800cd2c <_svfiprintf_r>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	4698      	mov	r8, r3
 800cd32:	898b      	ldrh	r3, [r1, #12]
 800cd34:	4607      	mov	r7, r0
 800cd36:	061b      	lsls	r3, r3, #24
 800cd38:	460d      	mov	r5, r1
 800cd3a:	4614      	mov	r4, r2
 800cd3c:	b09d      	sub	sp, #116	; 0x74
 800cd3e:	d50e      	bpl.n	800cd5e <_svfiprintf_r+0x32>
 800cd40:	690b      	ldr	r3, [r1, #16]
 800cd42:	b963      	cbnz	r3, 800cd5e <_svfiprintf_r+0x32>
 800cd44:	2140      	movs	r1, #64	; 0x40
 800cd46:	f7fb fe61 	bl	8008a0c <_malloc_r>
 800cd4a:	6028      	str	r0, [r5, #0]
 800cd4c:	6128      	str	r0, [r5, #16]
 800cd4e:	b920      	cbnz	r0, 800cd5a <_svfiprintf_r+0x2e>
 800cd50:	230c      	movs	r3, #12
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	e0d1      	b.n	800cefe <_svfiprintf_r+0x1d2>
 800cd5a:	2340      	movs	r3, #64	; 0x40
 800cd5c:	616b      	str	r3, [r5, #20]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9309      	str	r3, [sp, #36]	; 0x24
 800cd62:	2320      	movs	r3, #32
 800cd64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd68:	2330      	movs	r3, #48	; 0x30
 800cd6a:	f04f 0901 	mov.w	r9, #1
 800cd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf18 <_svfiprintf_r+0x1ec>
 800cd76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd7a:	4623      	mov	r3, r4
 800cd7c:	469a      	mov	sl, r3
 800cd7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd82:	b10a      	cbz	r2, 800cd88 <_svfiprintf_r+0x5c>
 800cd84:	2a25      	cmp	r2, #37	; 0x25
 800cd86:	d1f9      	bne.n	800cd7c <_svfiprintf_r+0x50>
 800cd88:	ebba 0b04 	subs.w	fp, sl, r4
 800cd8c:	d00b      	beq.n	800cda6 <_svfiprintf_r+0x7a>
 800cd8e:	465b      	mov	r3, fp
 800cd90:	4622      	mov	r2, r4
 800cd92:	4629      	mov	r1, r5
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff ff6d 	bl	800cc74 <__ssputs_r>
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	f000 80aa 	beq.w	800cef4 <_svfiprintf_r+0x1c8>
 800cda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda2:	445a      	add	r2, fp
 800cda4:	9209      	str	r2, [sp, #36]	; 0x24
 800cda6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 80a2 	beq.w	800cef4 <_svfiprintf_r+0x1c8>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdba:	f10a 0a01 	add.w	sl, sl, #1
 800cdbe:	9304      	str	r3, [sp, #16]
 800cdc0:	9307      	str	r3, [sp, #28]
 800cdc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdc6:	931a      	str	r3, [sp, #104]	; 0x68
 800cdc8:	4654      	mov	r4, sl
 800cdca:	2205      	movs	r2, #5
 800cdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd0:	4851      	ldr	r0, [pc, #324]	; (800cf18 <_svfiprintf_r+0x1ec>)
 800cdd2:	f7ff fa2f 	bl	800c234 <memchr>
 800cdd6:	9a04      	ldr	r2, [sp, #16]
 800cdd8:	b9d8      	cbnz	r0, 800ce12 <_svfiprintf_r+0xe6>
 800cdda:	06d0      	lsls	r0, r2, #27
 800cddc:	bf44      	itt	mi
 800cdde:	2320      	movmi	r3, #32
 800cde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cde4:	0711      	lsls	r1, r2, #28
 800cde6:	bf44      	itt	mi
 800cde8:	232b      	movmi	r3, #43	; 0x2b
 800cdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdee:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf2:	2b2a      	cmp	r3, #42	; 0x2a
 800cdf4:	d015      	beq.n	800ce22 <_svfiprintf_r+0xf6>
 800cdf6:	4654      	mov	r4, sl
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	f04f 0c0a 	mov.w	ip, #10
 800cdfe:	9a07      	ldr	r2, [sp, #28]
 800ce00:	4621      	mov	r1, r4
 800ce02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce06:	3b30      	subs	r3, #48	; 0x30
 800ce08:	2b09      	cmp	r3, #9
 800ce0a:	d94e      	bls.n	800ceaa <_svfiprintf_r+0x17e>
 800ce0c:	b1b0      	cbz	r0, 800ce3c <_svfiprintf_r+0x110>
 800ce0e:	9207      	str	r2, [sp, #28]
 800ce10:	e014      	b.n	800ce3c <_svfiprintf_r+0x110>
 800ce12:	eba0 0308 	sub.w	r3, r0, r8
 800ce16:	fa09 f303 	lsl.w	r3, r9, r3
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	46a2      	mov	sl, r4
 800ce1e:	9304      	str	r3, [sp, #16]
 800ce20:	e7d2      	b.n	800cdc8 <_svfiprintf_r+0x9c>
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	1d19      	adds	r1, r3, #4
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	9103      	str	r1, [sp, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	bfbb      	ittet	lt
 800ce2e:	425b      	neglt	r3, r3
 800ce30:	f042 0202 	orrlt.w	r2, r2, #2
 800ce34:	9307      	strge	r3, [sp, #28]
 800ce36:	9307      	strlt	r3, [sp, #28]
 800ce38:	bfb8      	it	lt
 800ce3a:	9204      	strlt	r2, [sp, #16]
 800ce3c:	7823      	ldrb	r3, [r4, #0]
 800ce3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce40:	d10c      	bne.n	800ce5c <_svfiprintf_r+0x130>
 800ce42:	7863      	ldrb	r3, [r4, #1]
 800ce44:	2b2a      	cmp	r3, #42	; 0x2a
 800ce46:	d135      	bne.n	800ceb4 <_svfiprintf_r+0x188>
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	3402      	adds	r4, #2
 800ce4c:	1d1a      	adds	r2, r3, #4
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	9203      	str	r2, [sp, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bfb8      	it	lt
 800ce56:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce5a:	9305      	str	r3, [sp, #20]
 800ce5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf28 <_svfiprintf_r+0x1fc>
 800ce60:	2203      	movs	r2, #3
 800ce62:	4650      	mov	r0, sl
 800ce64:	7821      	ldrb	r1, [r4, #0]
 800ce66:	f7ff f9e5 	bl	800c234 <memchr>
 800ce6a:	b140      	cbz	r0, 800ce7e <_svfiprintf_r+0x152>
 800ce6c:	2340      	movs	r3, #64	; 0x40
 800ce6e:	eba0 000a 	sub.w	r0, r0, sl
 800ce72:	fa03 f000 	lsl.w	r0, r3, r0
 800ce76:	9b04      	ldr	r3, [sp, #16]
 800ce78:	3401      	adds	r4, #1
 800ce7a:	4303      	orrs	r3, r0
 800ce7c:	9304      	str	r3, [sp, #16]
 800ce7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce82:	2206      	movs	r2, #6
 800ce84:	4825      	ldr	r0, [pc, #148]	; (800cf1c <_svfiprintf_r+0x1f0>)
 800ce86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce8a:	f7ff f9d3 	bl	800c234 <memchr>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d038      	beq.n	800cf04 <_svfiprintf_r+0x1d8>
 800ce92:	4b23      	ldr	r3, [pc, #140]	; (800cf20 <_svfiprintf_r+0x1f4>)
 800ce94:	bb1b      	cbnz	r3, 800cede <_svfiprintf_r+0x1b2>
 800ce96:	9b03      	ldr	r3, [sp, #12]
 800ce98:	3307      	adds	r3, #7
 800ce9a:	f023 0307 	bic.w	r3, r3, #7
 800ce9e:	3308      	adds	r3, #8
 800cea0:	9303      	str	r3, [sp, #12]
 800cea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea4:	4433      	add	r3, r6
 800cea6:	9309      	str	r3, [sp, #36]	; 0x24
 800cea8:	e767      	b.n	800cd7a <_svfiprintf_r+0x4e>
 800ceaa:	460c      	mov	r4, r1
 800ceac:	2001      	movs	r0, #1
 800ceae:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb2:	e7a5      	b.n	800ce00 <_svfiprintf_r+0xd4>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f04f 0c0a 	mov.w	ip, #10
 800ceba:	4619      	mov	r1, r3
 800cebc:	3401      	adds	r4, #1
 800cebe:	9305      	str	r3, [sp, #20]
 800cec0:	4620      	mov	r0, r4
 800cec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec6:	3a30      	subs	r2, #48	; 0x30
 800cec8:	2a09      	cmp	r2, #9
 800ceca:	d903      	bls.n	800ced4 <_svfiprintf_r+0x1a8>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d0c5      	beq.n	800ce5c <_svfiprintf_r+0x130>
 800ced0:	9105      	str	r1, [sp, #20]
 800ced2:	e7c3      	b.n	800ce5c <_svfiprintf_r+0x130>
 800ced4:	4604      	mov	r4, r0
 800ced6:	2301      	movs	r3, #1
 800ced8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cedc:	e7f0      	b.n	800cec0 <_svfiprintf_r+0x194>
 800cede:	ab03      	add	r3, sp, #12
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	462a      	mov	r2, r5
 800cee4:	4638      	mov	r0, r7
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <_svfiprintf_r+0x1f8>)
 800cee8:	a904      	add	r1, sp, #16
 800ceea:	f7fb ffdf 	bl	8008eac <_printf_float>
 800ceee:	1c42      	adds	r2, r0, #1
 800cef0:	4606      	mov	r6, r0
 800cef2:	d1d6      	bne.n	800cea2 <_svfiprintf_r+0x176>
 800cef4:	89ab      	ldrh	r3, [r5, #12]
 800cef6:	065b      	lsls	r3, r3, #25
 800cef8:	f53f af2c 	bmi.w	800cd54 <_svfiprintf_r+0x28>
 800cefc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cefe:	b01d      	add	sp, #116	; 0x74
 800cf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf04:	ab03      	add	r3, sp, #12
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	462a      	mov	r2, r5
 800cf0a:	4638      	mov	r0, r7
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <_svfiprintf_r+0x1f8>)
 800cf0e:	a904      	add	r1, sp, #16
 800cf10:	f7fc fa68 	bl	80093e4 <_printf_i>
 800cf14:	e7eb      	b.n	800ceee <_svfiprintf_r+0x1c2>
 800cf16:	bf00      	nop
 800cf18:	080103e4 	.word	0x080103e4
 800cf1c:	080103ee 	.word	0x080103ee
 800cf20:	08008ead 	.word	0x08008ead
 800cf24:	0800cc75 	.word	0x0800cc75
 800cf28:	080103ea 	.word	0x080103ea

0800cf2c <nan>:
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	4901      	ldr	r1, [pc, #4]	; (800cf34 <nan+0x8>)
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	7ff80000 	.word	0x7ff80000

0800cf38 <_raise_r>:
 800cf38:	291f      	cmp	r1, #31
 800cf3a:	b538      	push	{r3, r4, r5, lr}
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	d904      	bls.n	800cf4c <_raise_r+0x14>
 800cf42:	2316      	movs	r3, #22
 800cf44:	6003      	str	r3, [r0, #0]
 800cf46:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf4e:	b112      	cbz	r2, 800cf56 <_raise_r+0x1e>
 800cf50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf54:	b94b      	cbnz	r3, 800cf6a <_raise_r+0x32>
 800cf56:	4620      	mov	r0, r4
 800cf58:	f000 f830 	bl	800cfbc <_getpid_r>
 800cf5c:	462a      	mov	r2, r5
 800cf5e:	4601      	mov	r1, r0
 800cf60:	4620      	mov	r0, r4
 800cf62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf66:	f000 b817 	b.w	800cf98 <_kill_r>
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d00a      	beq.n	800cf84 <_raise_r+0x4c>
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	d103      	bne.n	800cf7a <_raise_r+0x42>
 800cf72:	2316      	movs	r3, #22
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7e7      	b.n	800cf4a <_raise_r+0x12>
 800cf7a:	2400      	movs	r4, #0
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf82:	4798      	blx	r3
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7e0      	b.n	800cf4a <_raise_r+0x12>

0800cf88 <raise>:
 800cf88:	4b02      	ldr	r3, [pc, #8]	; (800cf94 <raise+0xc>)
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	6818      	ldr	r0, [r3, #0]
 800cf8e:	f7ff bfd3 	b.w	800cf38 <_raise_r>
 800cf92:	bf00      	nop
 800cf94:	2000000c 	.word	0x2000000c

0800cf98 <_kill_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4d06      	ldr	r5, [pc, #24]	; (800cfb8 <_kill_r+0x20>)
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	602b      	str	r3, [r5, #0]
 800cfa6:	f7f7 ffd8 	bl	8004f5a <_kill>
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	d102      	bne.n	800cfb4 <_kill_r+0x1c>
 800cfae:	682b      	ldr	r3, [r5, #0]
 800cfb0:	b103      	cbz	r3, 800cfb4 <_kill_r+0x1c>
 800cfb2:	6023      	str	r3, [r4, #0]
 800cfb4:	bd38      	pop	{r3, r4, r5, pc}
 800cfb6:	bf00      	nop
 800cfb8:	200005f8 	.word	0x200005f8

0800cfbc <_getpid_r>:
 800cfbc:	f7f7 bfc6 	b.w	8004f4c <_getpid>

0800cfc0 <__sread>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc8:	f000 f8ba 	bl	800d140 <_read_r>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	bfab      	itete	ge
 800cfd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cfd4:	181b      	addge	r3, r3, r0
 800cfd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cfda:	bfac      	ite	ge
 800cfdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cfde:	81a3      	strhlt	r3, [r4, #12]
 800cfe0:	bd10      	pop	{r4, pc}

0800cfe2 <__swrite>:
 800cfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe6:	461f      	mov	r7, r3
 800cfe8:	898b      	ldrh	r3, [r1, #12]
 800cfea:	4605      	mov	r5, r0
 800cfec:	05db      	lsls	r3, r3, #23
 800cfee:	460c      	mov	r4, r1
 800cff0:	4616      	mov	r6, r2
 800cff2:	d505      	bpl.n	800d000 <__swrite+0x1e>
 800cff4:	2302      	movs	r3, #2
 800cff6:	2200      	movs	r2, #0
 800cff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cffc:	f000 f886 	bl	800d10c <_lseek_r>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	4632      	mov	r2, r6
 800d004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d008:	81a3      	strh	r3, [r4, #12]
 800d00a:	4628      	mov	r0, r5
 800d00c:	463b      	mov	r3, r7
 800d00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d016:	f000 b835 	b.w	800d084 <_write_r>

0800d01a <__sseek>:
 800d01a:	b510      	push	{r4, lr}
 800d01c:	460c      	mov	r4, r1
 800d01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d022:	f000 f873 	bl	800d10c <_lseek_r>
 800d026:	1c43      	adds	r3, r0, #1
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	bf15      	itete	ne
 800d02c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d02e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d036:	81a3      	strheq	r3, [r4, #12]
 800d038:	bf18      	it	ne
 800d03a:	81a3      	strhne	r3, [r4, #12]
 800d03c:	bd10      	pop	{r4, pc}

0800d03e <__sclose>:
 800d03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d042:	f000 b831 	b.w	800d0a8 <_close_r>

0800d046 <strncmp>:
 800d046:	b510      	push	{r4, lr}
 800d048:	b16a      	cbz	r2, 800d066 <strncmp+0x20>
 800d04a:	3901      	subs	r1, #1
 800d04c:	1884      	adds	r4, r0, r2
 800d04e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d052:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d056:	4293      	cmp	r3, r2
 800d058:	d103      	bne.n	800d062 <strncmp+0x1c>
 800d05a:	42a0      	cmp	r0, r4
 800d05c:	d001      	beq.n	800d062 <strncmp+0x1c>
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1f5      	bne.n	800d04e <strncmp+0x8>
 800d062:	1a98      	subs	r0, r3, r2
 800d064:	bd10      	pop	{r4, pc}
 800d066:	4610      	mov	r0, r2
 800d068:	e7fc      	b.n	800d064 <strncmp+0x1e>

0800d06a <__ascii_wctomb>:
 800d06a:	4603      	mov	r3, r0
 800d06c:	4608      	mov	r0, r1
 800d06e:	b141      	cbz	r1, 800d082 <__ascii_wctomb+0x18>
 800d070:	2aff      	cmp	r2, #255	; 0xff
 800d072:	d904      	bls.n	800d07e <__ascii_wctomb+0x14>
 800d074:	228a      	movs	r2, #138	; 0x8a
 800d076:	f04f 30ff 	mov.w	r0, #4294967295
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	4770      	bx	lr
 800d07e:	2001      	movs	r0, #1
 800d080:	700a      	strb	r2, [r1, #0]
 800d082:	4770      	bx	lr

0800d084 <_write_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4604      	mov	r4, r0
 800d088:	4608      	mov	r0, r1
 800d08a:	4611      	mov	r1, r2
 800d08c:	2200      	movs	r2, #0
 800d08e:	4d05      	ldr	r5, [pc, #20]	; (800d0a4 <_write_r+0x20>)
 800d090:	602a      	str	r2, [r5, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	f7f7 ff98 	bl	8004fc8 <_write>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d102      	bne.n	800d0a2 <_write_r+0x1e>
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	b103      	cbz	r3, 800d0a2 <_write_r+0x1e>
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	200005f8 	.word	0x200005f8

0800d0a8 <_close_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	4d05      	ldr	r5, [pc, #20]	; (800d0c4 <_close_r+0x1c>)
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	f7f7 ffa4 	bl	8005000 <_close>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_close_r+0x1a>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_close_r+0x1a>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	200005f8 	.word	0x200005f8

0800d0c8 <_fstat_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4d06      	ldr	r5, [pc, #24]	; (800d0e8 <_fstat_r+0x20>)
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	f7f7 ff9e 	bl	8005016 <_fstat>
 800d0da:	1c43      	adds	r3, r0, #1
 800d0dc:	d102      	bne.n	800d0e4 <_fstat_r+0x1c>
 800d0de:	682b      	ldr	r3, [r5, #0]
 800d0e0:	b103      	cbz	r3, 800d0e4 <_fstat_r+0x1c>
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	bd38      	pop	{r3, r4, r5, pc}
 800d0e6:	bf00      	nop
 800d0e8:	200005f8 	.word	0x200005f8

0800d0ec <_isatty_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	4d05      	ldr	r5, [pc, #20]	; (800d108 <_isatty_r+0x1c>)
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	602b      	str	r3, [r5, #0]
 800d0f8:	f7f7 ff9c 	bl	8005034 <_isatty>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d102      	bne.n	800d106 <_isatty_r+0x1a>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	b103      	cbz	r3, 800d106 <_isatty_r+0x1a>
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	bd38      	pop	{r3, r4, r5, pc}
 800d108:	200005f8 	.word	0x200005f8

0800d10c <_lseek_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4604      	mov	r4, r0
 800d110:	4608      	mov	r0, r1
 800d112:	4611      	mov	r1, r2
 800d114:	2200      	movs	r2, #0
 800d116:	4d05      	ldr	r5, [pc, #20]	; (800d12c <_lseek_r+0x20>)
 800d118:	602a      	str	r2, [r5, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	f7f7 ff94 	bl	8005048 <_lseek>
 800d120:	1c43      	adds	r3, r0, #1
 800d122:	d102      	bne.n	800d12a <_lseek_r+0x1e>
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	b103      	cbz	r3, 800d12a <_lseek_r+0x1e>
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	bd38      	pop	{r3, r4, r5, pc}
 800d12c:	200005f8 	.word	0x200005f8

0800d130 <_malloc_usable_size_r>:
 800d130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d134:	1f18      	subs	r0, r3, #4
 800d136:	2b00      	cmp	r3, #0
 800d138:	bfbc      	itt	lt
 800d13a:	580b      	ldrlt	r3, [r1, r0]
 800d13c:	18c0      	addlt	r0, r0, r3
 800d13e:	4770      	bx	lr

0800d140 <_read_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4604      	mov	r4, r0
 800d144:	4608      	mov	r0, r1
 800d146:	4611      	mov	r1, r2
 800d148:	2200      	movs	r2, #0
 800d14a:	4d05      	ldr	r5, [pc, #20]	; (800d160 <_read_r+0x20>)
 800d14c:	602a      	str	r2, [r5, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	f7f7 ff1d 	bl	8004f8e <_read>
 800d154:	1c43      	adds	r3, r0, #1
 800d156:	d102      	bne.n	800d15e <_read_r+0x1e>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	b103      	cbz	r3, 800d15e <_read_r+0x1e>
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	bd38      	pop	{r3, r4, r5, pc}
 800d160:	200005f8 	.word	0x200005f8

0800d164 <cos>:
 800d164:	b530      	push	{r4, r5, lr}
 800d166:	4a1e      	ldr	r2, [pc, #120]	; (800d1e0 <cos+0x7c>)
 800d168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d16c:	4293      	cmp	r3, r2
 800d16e:	b087      	sub	sp, #28
 800d170:	dc04      	bgt.n	800d17c <cos+0x18>
 800d172:	2200      	movs	r2, #0
 800d174:	2300      	movs	r3, #0
 800d176:	f001 f8f3 	bl	800e360 <__kernel_cos>
 800d17a:	e006      	b.n	800d18a <cos+0x26>
 800d17c:	4a19      	ldr	r2, [pc, #100]	; (800d1e4 <cos+0x80>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	dd05      	ble.n	800d18e <cos+0x2a>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	f7f2 ffef 	bl	8000168 <__aeabi_dsub>
 800d18a:	b007      	add	sp, #28
 800d18c:	bd30      	pop	{r4, r5, pc}
 800d18e:	aa02      	add	r2, sp, #8
 800d190:	f000 fb56 	bl	800d840 <__ieee754_rem_pio2>
 800d194:	f000 0003 	and.w	r0, r0, #3
 800d198:	2801      	cmp	r0, #1
 800d19a:	d007      	beq.n	800d1ac <cos+0x48>
 800d19c:	2802      	cmp	r0, #2
 800d19e:	d00f      	beq.n	800d1c0 <cos+0x5c>
 800d1a0:	b9a8      	cbnz	r0, 800d1ce <cos+0x6a>
 800d1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1aa:	e7e4      	b.n	800d176 <cos+0x12>
 800d1ac:	9000      	str	r0, [sp, #0]
 800d1ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1b6:	f001 fcdb 	bl	800eb70 <__kernel_sin>
 800d1ba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d1be:	e7e4      	b.n	800d18a <cos+0x26>
 800d1c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1c8:	f001 f8ca 	bl	800e360 <__kernel_cos>
 800d1cc:	e7f5      	b.n	800d1ba <cos+0x56>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1da:	f001 fcc9 	bl	800eb70 <__kernel_sin>
 800d1de:	e7d4      	b.n	800d18a <cos+0x26>
 800d1e0:	3fe921fb 	.word	0x3fe921fb
 800d1e4:	7fefffff 	.word	0x7fefffff

0800d1e8 <sin>:
 800d1e8:	b530      	push	{r4, r5, lr}
 800d1ea:	4a20      	ldr	r2, [pc, #128]	; (800d26c <sin+0x84>)
 800d1ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	dc06      	bgt.n	800d204 <sin+0x1c>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f001 fcb7 	bl	800eb70 <__kernel_sin>
 800d202:	e006      	b.n	800d212 <sin+0x2a>
 800d204:	4a1a      	ldr	r2, [pc, #104]	; (800d270 <sin+0x88>)
 800d206:	4293      	cmp	r3, r2
 800d208:	dd05      	ble.n	800d216 <sin+0x2e>
 800d20a:	4602      	mov	r2, r0
 800d20c:	460b      	mov	r3, r1
 800d20e:	f7f2 ffab 	bl	8000168 <__aeabi_dsub>
 800d212:	b007      	add	sp, #28
 800d214:	bd30      	pop	{r4, r5, pc}
 800d216:	aa02      	add	r2, sp, #8
 800d218:	f000 fb12 	bl	800d840 <__ieee754_rem_pio2>
 800d21c:	f000 0003 	and.w	r0, r0, #3
 800d220:	2801      	cmp	r0, #1
 800d222:	d009      	beq.n	800d238 <sin+0x50>
 800d224:	2802      	cmp	r0, #2
 800d226:	d00e      	beq.n	800d246 <sin+0x5e>
 800d228:	b9c0      	cbnz	r0, 800d25c <sin+0x74>
 800d22a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d22e:	2301      	movs	r3, #1
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d236:	e7e2      	b.n	800d1fe <sin+0x16>
 800d238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d240:	f001 f88e 	bl	800e360 <__kernel_cos>
 800d244:	e7e5      	b.n	800d212 <sin+0x2a>
 800d246:	2301      	movs	r3, #1
 800d248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d252:	f001 fc8d 	bl	800eb70 <__kernel_sin>
 800d256:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d25a:	e7da      	b.n	800d212 <sin+0x2a>
 800d25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d264:	f001 f87c 	bl	800e360 <__kernel_cos>
 800d268:	e7f5      	b.n	800d256 <sin+0x6e>
 800d26a:	bf00      	nop
 800d26c:	3fe921fb 	.word	0x3fe921fb
 800d270:	7fefffff 	.word	0x7fefffff

0800d274 <atanf>:
 800d274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d27c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800d280:	4604      	mov	r4, r0
 800d282:	4680      	mov	r8, r0
 800d284:	db0e      	blt.n	800d2a4 <atanf+0x30>
 800d286:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d28a:	dd04      	ble.n	800d296 <atanf+0x22>
 800d28c:	4601      	mov	r1, r0
 800d28e:	f7f3 fc71 	bl	8000b74 <__addsf3>
 800d292:	4604      	mov	r4, r0
 800d294:	e003      	b.n	800d29e <atanf+0x2a>
 800d296:	2800      	cmp	r0, #0
 800d298:	f300 80ce 	bgt.w	800d438 <atanf+0x1c4>
 800d29c:	4c67      	ldr	r4, [pc, #412]	; (800d43c <atanf+0x1c8>)
 800d29e:	4620      	mov	r0, r4
 800d2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a4:	4b66      	ldr	r3, [pc, #408]	; (800d440 <atanf+0x1cc>)
 800d2a6:	429d      	cmp	r5, r3
 800d2a8:	dc0e      	bgt.n	800d2c8 <atanf+0x54>
 800d2aa:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800d2ae:	da08      	bge.n	800d2c2 <atanf+0x4e>
 800d2b0:	4964      	ldr	r1, [pc, #400]	; (800d444 <atanf+0x1d0>)
 800d2b2:	f7f3 fc5f 	bl	8000b74 <__addsf3>
 800d2b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d2ba:	f7f3 ff1f 	bl	80010fc <__aeabi_fcmpgt>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d1ed      	bne.n	800d29e <atanf+0x2a>
 800d2c2:	f04f 36ff 	mov.w	r6, #4294967295
 800d2c6:	e01c      	b.n	800d302 <atanf+0x8e>
 800d2c8:	f000 f914 	bl	800d4f4 <fabsf>
 800d2cc:	4b5e      	ldr	r3, [pc, #376]	; (800d448 <atanf+0x1d4>)
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	429d      	cmp	r5, r3
 800d2d2:	dc7c      	bgt.n	800d3ce <atanf+0x15a>
 800d2d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d2d8:	429d      	cmp	r5, r3
 800d2da:	dc67      	bgt.n	800d3ac <atanf+0x138>
 800d2dc:	4601      	mov	r1, r0
 800d2de:	f7f3 fc49 	bl	8000b74 <__addsf3>
 800d2e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d2e6:	f7f3 fc43 	bl	8000b70 <__aeabi_fsub>
 800d2ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f7f3 fc3f 	bl	8000b74 <__addsf3>
 800d2f6:	4601      	mov	r1, r0
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	f7f3 fdf7 	bl	8000eec <__aeabi_fdiv>
 800d2fe:	2600      	movs	r6, #0
 800d300:	4604      	mov	r4, r0
 800d302:	4621      	mov	r1, r4
 800d304:	4620      	mov	r0, r4
 800d306:	f7f3 fd3d 	bl	8000d84 <__aeabi_fmul>
 800d30a:	4601      	mov	r1, r0
 800d30c:	4607      	mov	r7, r0
 800d30e:	f7f3 fd39 	bl	8000d84 <__aeabi_fmul>
 800d312:	4605      	mov	r5, r0
 800d314:	494d      	ldr	r1, [pc, #308]	; (800d44c <atanf+0x1d8>)
 800d316:	f7f3 fd35 	bl	8000d84 <__aeabi_fmul>
 800d31a:	494d      	ldr	r1, [pc, #308]	; (800d450 <atanf+0x1dc>)
 800d31c:	f7f3 fc2a 	bl	8000b74 <__addsf3>
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 fd2f 	bl	8000d84 <__aeabi_fmul>
 800d326:	494b      	ldr	r1, [pc, #300]	; (800d454 <atanf+0x1e0>)
 800d328:	f7f3 fc24 	bl	8000b74 <__addsf3>
 800d32c:	4629      	mov	r1, r5
 800d32e:	f7f3 fd29 	bl	8000d84 <__aeabi_fmul>
 800d332:	4949      	ldr	r1, [pc, #292]	; (800d458 <atanf+0x1e4>)
 800d334:	f7f3 fc1e 	bl	8000b74 <__addsf3>
 800d338:	4629      	mov	r1, r5
 800d33a:	f7f3 fd23 	bl	8000d84 <__aeabi_fmul>
 800d33e:	4947      	ldr	r1, [pc, #284]	; (800d45c <atanf+0x1e8>)
 800d340:	f7f3 fc18 	bl	8000b74 <__addsf3>
 800d344:	4629      	mov	r1, r5
 800d346:	f7f3 fd1d 	bl	8000d84 <__aeabi_fmul>
 800d34a:	4945      	ldr	r1, [pc, #276]	; (800d460 <atanf+0x1ec>)
 800d34c:	f7f3 fc12 	bl	8000b74 <__addsf3>
 800d350:	4639      	mov	r1, r7
 800d352:	f7f3 fd17 	bl	8000d84 <__aeabi_fmul>
 800d356:	4943      	ldr	r1, [pc, #268]	; (800d464 <atanf+0x1f0>)
 800d358:	4607      	mov	r7, r0
 800d35a:	4628      	mov	r0, r5
 800d35c:	f7f3 fd12 	bl	8000d84 <__aeabi_fmul>
 800d360:	4941      	ldr	r1, [pc, #260]	; (800d468 <atanf+0x1f4>)
 800d362:	f7f3 fc05 	bl	8000b70 <__aeabi_fsub>
 800d366:	4629      	mov	r1, r5
 800d368:	f7f3 fd0c 	bl	8000d84 <__aeabi_fmul>
 800d36c:	493f      	ldr	r1, [pc, #252]	; (800d46c <atanf+0x1f8>)
 800d36e:	f7f3 fbff 	bl	8000b70 <__aeabi_fsub>
 800d372:	4629      	mov	r1, r5
 800d374:	f7f3 fd06 	bl	8000d84 <__aeabi_fmul>
 800d378:	493d      	ldr	r1, [pc, #244]	; (800d470 <atanf+0x1fc>)
 800d37a:	f7f3 fbf9 	bl	8000b70 <__aeabi_fsub>
 800d37e:	4629      	mov	r1, r5
 800d380:	f7f3 fd00 	bl	8000d84 <__aeabi_fmul>
 800d384:	493b      	ldr	r1, [pc, #236]	; (800d474 <atanf+0x200>)
 800d386:	f7f3 fbf3 	bl	8000b70 <__aeabi_fsub>
 800d38a:	4629      	mov	r1, r5
 800d38c:	f7f3 fcfa 	bl	8000d84 <__aeabi_fmul>
 800d390:	4601      	mov	r1, r0
 800d392:	4638      	mov	r0, r7
 800d394:	f7f3 fbee 	bl	8000b74 <__addsf3>
 800d398:	4621      	mov	r1, r4
 800d39a:	f7f3 fcf3 	bl	8000d84 <__aeabi_fmul>
 800d39e:	1c73      	adds	r3, r6, #1
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	d133      	bne.n	800d40c <atanf+0x198>
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f7f3 fbe3 	bl	8000b70 <__aeabi_fsub>
 800d3aa:	e772      	b.n	800d292 <atanf+0x1e>
 800d3ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d3b0:	f7f3 fbde 	bl	8000b70 <__aeabi_fsub>
 800d3b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d3b8:	4605      	mov	r5, r0
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f7f3 fbda 	bl	8000b74 <__addsf3>
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f7f3 fd92 	bl	8000eec <__aeabi_fdiv>
 800d3c8:	2601      	movs	r6, #1
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	e799      	b.n	800d302 <atanf+0x8e>
 800d3ce:	4b2a      	ldr	r3, [pc, #168]	; (800d478 <atanf+0x204>)
 800d3d0:	429d      	cmp	r5, r3
 800d3d2:	dc14      	bgt.n	800d3fe <atanf+0x18a>
 800d3d4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d3d8:	f7f3 fbca 	bl	8000b70 <__aeabi_fsub>
 800d3dc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7f3 fcce 	bl	8000d84 <__aeabi_fmul>
 800d3e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d3ec:	f7f3 fbc2 	bl	8000b74 <__addsf3>
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f7f3 fd7a 	bl	8000eec <__aeabi_fdiv>
 800d3f8:	2602      	movs	r6, #2
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	e781      	b.n	800d302 <atanf+0x8e>
 800d3fe:	4601      	mov	r1, r0
 800d400:	481e      	ldr	r0, [pc, #120]	; (800d47c <atanf+0x208>)
 800d402:	f7f3 fd73 	bl	8000eec <__aeabi_fdiv>
 800d406:	2603      	movs	r6, #3
 800d408:	4604      	mov	r4, r0
 800d40a:	e77a      	b.n	800d302 <atanf+0x8e>
 800d40c:	4b1c      	ldr	r3, [pc, #112]	; (800d480 <atanf+0x20c>)
 800d40e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d412:	f7f3 fbad 	bl	8000b70 <__aeabi_fsub>
 800d416:	4621      	mov	r1, r4
 800d418:	f7f3 fbaa 	bl	8000b70 <__aeabi_fsub>
 800d41c:	4b19      	ldr	r3, [pc, #100]	; (800d484 <atanf+0x210>)
 800d41e:	4601      	mov	r1, r0
 800d420:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d424:	f7f3 fba4 	bl	8000b70 <__aeabi_fsub>
 800d428:	f1b8 0f00 	cmp.w	r8, #0
 800d42c:	4604      	mov	r4, r0
 800d42e:	f6bf af36 	bge.w	800d29e <atanf+0x2a>
 800d432:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d436:	e72c      	b.n	800d292 <atanf+0x1e>
 800d438:	4c13      	ldr	r4, [pc, #76]	; (800d488 <atanf+0x214>)
 800d43a:	e730      	b.n	800d29e <atanf+0x2a>
 800d43c:	bfc90fdb 	.word	0xbfc90fdb
 800d440:	3edfffff 	.word	0x3edfffff
 800d444:	7149f2ca 	.word	0x7149f2ca
 800d448:	3f97ffff 	.word	0x3f97ffff
 800d44c:	3c8569d7 	.word	0x3c8569d7
 800d450:	3d4bda59 	.word	0x3d4bda59
 800d454:	3d886b35 	.word	0x3d886b35
 800d458:	3dba2e6e 	.word	0x3dba2e6e
 800d45c:	3e124925 	.word	0x3e124925
 800d460:	3eaaaaab 	.word	0x3eaaaaab
 800d464:	bd15a221 	.word	0xbd15a221
 800d468:	3d6ef16b 	.word	0x3d6ef16b
 800d46c:	3d9d8795 	.word	0x3d9d8795
 800d470:	3de38e38 	.word	0x3de38e38
 800d474:	3e4ccccd 	.word	0x3e4ccccd
 800d478:	401bffff 	.word	0x401bffff
 800d47c:	bf800000 	.word	0xbf800000
 800d480:	08010864 	.word	0x08010864
 800d484:	08010854 	.word	0x08010854
 800d488:	3fc90fdb 	.word	0x3fc90fdb

0800d48c <cosf>:
 800d48c:	b507      	push	{r0, r1, r2, lr}
 800d48e:	4a18      	ldr	r2, [pc, #96]	; (800d4f0 <cosf+0x64>)
 800d490:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d494:	4293      	cmp	r3, r2
 800d496:	4601      	mov	r1, r0
 800d498:	dc03      	bgt.n	800d4a2 <cosf+0x16>
 800d49a:	2100      	movs	r1, #0
 800d49c:	f001 fc1e 	bl	800ecdc <__kernel_cosf>
 800d4a0:	e004      	b.n	800d4ac <cosf+0x20>
 800d4a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d4a6:	db04      	blt.n	800d4b2 <cosf+0x26>
 800d4a8:	f7f3 fb62 	bl	8000b70 <__aeabi_fsub>
 800d4ac:	b003      	add	sp, #12
 800d4ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4b2:	4669      	mov	r1, sp
 800d4b4:	f000 fda4 	bl	800e000 <__ieee754_rem_pio2f>
 800d4b8:	f000 0203 	and.w	r2, r0, #3
 800d4bc:	2a01      	cmp	r2, #1
 800d4be:	d005      	beq.n	800d4cc <cosf+0x40>
 800d4c0:	2a02      	cmp	r2, #2
 800d4c2:	d00a      	beq.n	800d4da <cosf+0x4e>
 800d4c4:	b972      	cbnz	r2, 800d4e4 <cosf+0x58>
 800d4c6:	9901      	ldr	r1, [sp, #4]
 800d4c8:	9800      	ldr	r0, [sp, #0]
 800d4ca:	e7e7      	b.n	800d49c <cosf+0x10>
 800d4cc:	9901      	ldr	r1, [sp, #4]
 800d4ce:	9800      	ldr	r0, [sp, #0]
 800d4d0:	f001 ff3a 	bl	800f348 <__kernel_sinf>
 800d4d4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d4d8:	e7e8      	b.n	800d4ac <cosf+0x20>
 800d4da:	9901      	ldr	r1, [sp, #4]
 800d4dc:	9800      	ldr	r0, [sp, #0]
 800d4de:	f001 fbfd 	bl	800ecdc <__kernel_cosf>
 800d4e2:	e7f7      	b.n	800d4d4 <cosf+0x48>
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	9901      	ldr	r1, [sp, #4]
 800d4e8:	9800      	ldr	r0, [sp, #0]
 800d4ea:	f001 ff2d 	bl	800f348 <__kernel_sinf>
 800d4ee:	e7dd      	b.n	800d4ac <cosf+0x20>
 800d4f0:	3f490fd8 	.word	0x3f490fd8

0800d4f4 <fabsf>:
 800d4f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d4f8:	4770      	bx	lr
	...

0800d4fc <sinf>:
 800d4fc:	b507      	push	{r0, r1, r2, lr}
 800d4fe:	4a19      	ldr	r2, [pc, #100]	; (800d564 <sinf+0x68>)
 800d500:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d504:	4293      	cmp	r3, r2
 800d506:	4601      	mov	r1, r0
 800d508:	dc04      	bgt.n	800d514 <sinf+0x18>
 800d50a:	2200      	movs	r2, #0
 800d50c:	2100      	movs	r1, #0
 800d50e:	f001 ff1b 	bl	800f348 <__kernel_sinf>
 800d512:	e004      	b.n	800d51e <sinf+0x22>
 800d514:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d518:	db04      	blt.n	800d524 <sinf+0x28>
 800d51a:	f7f3 fb29 	bl	8000b70 <__aeabi_fsub>
 800d51e:	b003      	add	sp, #12
 800d520:	f85d fb04 	ldr.w	pc, [sp], #4
 800d524:	4669      	mov	r1, sp
 800d526:	f000 fd6b 	bl	800e000 <__ieee754_rem_pio2f>
 800d52a:	f000 0003 	and.w	r0, r0, #3
 800d52e:	2801      	cmp	r0, #1
 800d530:	d006      	beq.n	800d540 <sinf+0x44>
 800d532:	2802      	cmp	r0, #2
 800d534:	d009      	beq.n	800d54a <sinf+0x4e>
 800d536:	b980      	cbnz	r0, 800d55a <sinf+0x5e>
 800d538:	2201      	movs	r2, #1
 800d53a:	9901      	ldr	r1, [sp, #4]
 800d53c:	9800      	ldr	r0, [sp, #0]
 800d53e:	e7e6      	b.n	800d50e <sinf+0x12>
 800d540:	9901      	ldr	r1, [sp, #4]
 800d542:	9800      	ldr	r0, [sp, #0]
 800d544:	f001 fbca 	bl	800ecdc <__kernel_cosf>
 800d548:	e7e9      	b.n	800d51e <sinf+0x22>
 800d54a:	2201      	movs	r2, #1
 800d54c:	9901      	ldr	r1, [sp, #4]
 800d54e:	9800      	ldr	r0, [sp, #0]
 800d550:	f001 fefa 	bl	800f348 <__kernel_sinf>
 800d554:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d558:	e7e1      	b.n	800d51e <sinf+0x22>
 800d55a:	9901      	ldr	r1, [sp, #4]
 800d55c:	9800      	ldr	r0, [sp, #0]
 800d55e:	f001 fbbd 	bl	800ecdc <__kernel_cosf>
 800d562:	e7f7      	b.n	800d554 <sinf+0x58>
 800d564:	3f490fd8 	.word	0x3f490fd8

0800d568 <tanf>:
 800d568:	b507      	push	{r0, r1, r2, lr}
 800d56a:	4a0f      	ldr	r2, [pc, #60]	; (800d5a8 <tanf+0x40>)
 800d56c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d570:	4293      	cmp	r3, r2
 800d572:	4601      	mov	r1, r0
 800d574:	dc04      	bgt.n	800d580 <tanf+0x18>
 800d576:	2201      	movs	r2, #1
 800d578:	2100      	movs	r1, #0
 800d57a:	f001 ff5b 	bl	800f434 <__kernel_tanf>
 800d57e:	e004      	b.n	800d58a <tanf+0x22>
 800d580:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d584:	db04      	blt.n	800d590 <tanf+0x28>
 800d586:	f7f3 faf3 	bl	8000b70 <__aeabi_fsub>
 800d58a:	b003      	add	sp, #12
 800d58c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d590:	4669      	mov	r1, sp
 800d592:	f000 fd35 	bl	800e000 <__ieee754_rem_pio2f>
 800d596:	0042      	lsls	r2, r0, #1
 800d598:	f002 0202 	and.w	r2, r2, #2
 800d59c:	9901      	ldr	r1, [sp, #4]
 800d59e:	9800      	ldr	r0, [sp, #0]
 800d5a0:	f1c2 0201 	rsb	r2, r2, #1
 800d5a4:	e7e9      	b.n	800d57a <tanf+0x12>
 800d5a6:	bf00      	nop
 800d5a8:	3f490fda 	.word	0x3f490fda

0800d5ac <atan2>:
 800d5ac:	f000 b874 	b.w	800d698 <__ieee754_atan2>

0800d5b0 <sqrt>:
 800d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	460f      	mov	r7, r1
 800d5b6:	f000 fb33 	bl	800dc20 <__ieee754_sqrt>
 800d5ba:	4b12      	ldr	r3, [pc, #72]	; (800d604 <sqrt+0x54>)
 800d5bc:	4604      	mov	r4, r0
 800d5be:	f993 3000 	ldrsb.w	r3, [r3]
 800d5c2:	460d      	mov	r5, r1
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	d019      	beq.n	800d5fc <sqrt+0x4c>
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	f7f3 fa1c 	bl	8000a0c <__aeabi_dcmpun>
 800d5d4:	b990      	cbnz	r0, 800d5fc <sqrt+0x4c>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4630      	mov	r0, r6
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f3 f9ed 	bl	80009bc <__aeabi_dcmplt>
 800d5e2:	b158      	cbz	r0, 800d5fc <sqrt+0x4c>
 800d5e4:	f7fb f96c 	bl	80088c0 <__errno>
 800d5e8:	2321      	movs	r3, #33	; 0x21
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	6003      	str	r3, [r0, #0]
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	f7f3 f89a 	bl	800072c <__aeabi_ddiv>
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	4629      	mov	r1, r5
 800d600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d602:	bf00      	nop
 800d604:	200001e0 	.word	0x200001e0

0800d608 <asinf>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4604      	mov	r4, r0
 800d60c:	f000 fbb4 	bl	800dd78 <__ieee754_asinf>
 800d610:	4b0e      	ldr	r3, [pc, #56]	; (800d64c <asinf+0x44>)
 800d612:	4605      	mov	r5, r0
 800d614:	f993 3000 	ldrsb.w	r3, [r3]
 800d618:	3301      	adds	r3, #1
 800d61a:	d015      	beq.n	800d648 <asinf+0x40>
 800d61c:	4621      	mov	r1, r4
 800d61e:	4620      	mov	r0, r4
 800d620:	f7f3 fd76 	bl	8001110 <__aeabi_fcmpun>
 800d624:	b980      	cbnz	r0, 800d648 <asinf+0x40>
 800d626:	4620      	mov	r0, r4
 800d628:	f7ff ff64 	bl	800d4f4 <fabsf>
 800d62c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d630:	f7f3 fd64 	bl	80010fc <__aeabi_fcmpgt>
 800d634:	b140      	cbz	r0, 800d648 <asinf+0x40>
 800d636:	f7fb f943 	bl	80088c0 <__errno>
 800d63a:	2321      	movs	r3, #33	; 0x21
 800d63c:	6003      	str	r3, [r0, #0]
 800d63e:	4804      	ldr	r0, [pc, #16]	; (800d650 <asinf+0x48>)
 800d640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d644:	f7fc ba16 	b.w	8009a74 <nanf>
 800d648:	4628      	mov	r0, r5
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	200001e0 	.word	0x200001e0
 800d650:	080103dd 	.word	0x080103dd

0800d654 <sqrtf>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4605      	mov	r5, r0
 800d658:	f000 fe30 	bl	800e2bc <__ieee754_sqrtf>
 800d65c:	4b0d      	ldr	r3, [pc, #52]	; (800d694 <sqrtf+0x40>)
 800d65e:	4604      	mov	r4, r0
 800d660:	f993 3000 	ldrsb.w	r3, [r3]
 800d664:	3301      	adds	r3, #1
 800d666:	d012      	beq.n	800d68e <sqrtf+0x3a>
 800d668:	4629      	mov	r1, r5
 800d66a:	4628      	mov	r0, r5
 800d66c:	f7f3 fd50 	bl	8001110 <__aeabi_fcmpun>
 800d670:	b968      	cbnz	r0, 800d68e <sqrtf+0x3a>
 800d672:	2100      	movs	r1, #0
 800d674:	4628      	mov	r0, r5
 800d676:	f7f3 fd23 	bl	80010c0 <__aeabi_fcmplt>
 800d67a:	b140      	cbz	r0, 800d68e <sqrtf+0x3a>
 800d67c:	f7fb f920 	bl	80088c0 <__errno>
 800d680:	2321      	movs	r3, #33	; 0x21
 800d682:	2100      	movs	r1, #0
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	4608      	mov	r0, r1
 800d688:	f7f3 fc30 	bl	8000eec <__aeabi_fdiv>
 800d68c:	4604      	mov	r4, r0
 800d68e:	4620      	mov	r0, r4
 800d690:	bd38      	pop	{r3, r4, r5, pc}
 800d692:	bf00      	nop
 800d694:	200001e0 	.word	0x200001e0

0800d698 <__ieee754_atan2>:
 800d698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	4692      	mov	sl, r2
 800d69e:	4699      	mov	r9, r3
 800d6a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d6a4:	461f      	mov	r7, r3
 800d6a6:	f1ca 0300 	rsb	r3, sl, #0
 800d6aa:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800d838 <__ieee754_atan2+0x1a0>
 800d6ae:	ea43 030a 	orr.w	r3, r3, sl
 800d6b2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d6b6:	4573      	cmp	r3, lr
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	460d      	mov	r5, r1
 800d6bc:	d808      	bhi.n	800d6d0 <__ieee754_atan2+0x38>
 800d6be:	4246      	negs	r6, r0
 800d6c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6c4:	4306      	orrs	r6, r0
 800d6c6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800d6ca:	4576      	cmp	r6, lr
 800d6cc:	468c      	mov	ip, r1
 800d6ce:	d908      	bls.n	800d6e2 <__ieee754_atan2+0x4a>
 800d6d0:	4652      	mov	r2, sl
 800d6d2:	464b      	mov	r3, r9
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	f7f2 fd48 	bl	800016c <__adddf3>
 800d6dc:	4604      	mov	r4, r0
 800d6de:	460d      	mov	r5, r1
 800d6e0:	e019      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d6e2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800d6e6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800d6ea:	ea56 060a 	orrs.w	r6, r6, sl
 800d6ee:	d103      	bne.n	800d6f8 <__ieee754_atan2+0x60>
 800d6f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f4:	f001 bfcc 	b.w	800f690 <atan>
 800d6f8:	17be      	asrs	r6, r7, #30
 800d6fa:	f006 0602 	and.w	r6, r6, #2
 800d6fe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800d702:	ea53 0100 	orrs.w	r1, r3, r0
 800d706:	d10a      	bne.n	800d71e <__ieee754_atan2+0x86>
 800d708:	2e02      	cmp	r6, #2
 800d70a:	d067      	beq.n	800d7dc <__ieee754_atan2+0x144>
 800d70c:	2e03      	cmp	r6, #3
 800d70e:	d102      	bne.n	800d716 <__ieee754_atan2+0x7e>
 800d710:	a53b      	add	r5, pc, #236	; (adr r5, 800d800 <__ieee754_atan2+0x168>)
 800d712:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d716:	4620      	mov	r0, r4
 800d718:	4629      	mov	r1, r5
 800d71a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71e:	ea52 010a 	orrs.w	r1, r2, sl
 800d722:	d106      	bne.n	800d732 <__ieee754_atan2+0x9a>
 800d724:	f1bc 0f00 	cmp.w	ip, #0
 800d728:	da63      	bge.n	800d7f2 <__ieee754_atan2+0x15a>
 800d72a:	a537      	add	r5, pc, #220	; (adr r5, 800d808 <__ieee754_atan2+0x170>)
 800d72c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d730:	e7f1      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d732:	4572      	cmp	r2, lr
 800d734:	d10f      	bne.n	800d756 <__ieee754_atan2+0xbe>
 800d736:	4293      	cmp	r3, r2
 800d738:	f106 36ff 	add.w	r6, r6, #4294967295
 800d73c:	d107      	bne.n	800d74e <__ieee754_atan2+0xb6>
 800d73e:	2e02      	cmp	r6, #2
 800d740:	d850      	bhi.n	800d7e4 <__ieee754_atan2+0x14c>
 800d742:	4b3b      	ldr	r3, [pc, #236]	; (800d830 <__ieee754_atan2+0x198>)
 800d744:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d748:	e9d6 4500 	ldrd	r4, r5, [r6]
 800d74c:	e7e3      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d74e:	2e02      	cmp	r6, #2
 800d750:	d84c      	bhi.n	800d7ec <__ieee754_atan2+0x154>
 800d752:	4b38      	ldr	r3, [pc, #224]	; (800d834 <__ieee754_atan2+0x19c>)
 800d754:	e7f6      	b.n	800d744 <__ieee754_atan2+0xac>
 800d756:	4573      	cmp	r3, lr
 800d758:	d0e4      	beq.n	800d724 <__ieee754_atan2+0x8c>
 800d75a:	1a9b      	subs	r3, r3, r2
 800d75c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d760:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d764:	da20      	bge.n	800d7a8 <__ieee754_atan2+0x110>
 800d766:	2f00      	cmp	r7, #0
 800d768:	da01      	bge.n	800d76e <__ieee754_atan2+0xd6>
 800d76a:	323c      	adds	r2, #60	; 0x3c
 800d76c:	db20      	blt.n	800d7b0 <__ieee754_atan2+0x118>
 800d76e:	4652      	mov	r2, sl
 800d770:	464b      	mov	r3, r9
 800d772:	4620      	mov	r0, r4
 800d774:	4629      	mov	r1, r5
 800d776:	f7f2 ffd9 	bl	800072c <__aeabi_ddiv>
 800d77a:	f002 f913 	bl	800f9a4 <fabs>
 800d77e:	f001 ff87 	bl	800f690 <atan>
 800d782:	4604      	mov	r4, r0
 800d784:	460d      	mov	r5, r1
 800d786:	2e01      	cmp	r6, #1
 800d788:	d015      	beq.n	800d7b6 <__ieee754_atan2+0x11e>
 800d78a:	2e02      	cmp	r6, #2
 800d78c:	d017      	beq.n	800d7be <__ieee754_atan2+0x126>
 800d78e:	2e00      	cmp	r6, #0
 800d790:	d0c1      	beq.n	800d716 <__ieee754_atan2+0x7e>
 800d792:	a31f      	add	r3, pc, #124	; (adr r3, 800d810 <__ieee754_atan2+0x178>)
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	4620      	mov	r0, r4
 800d79a:	4629      	mov	r1, r5
 800d79c:	f7f2 fce4 	bl	8000168 <__aeabi_dsub>
 800d7a0:	a31d      	add	r3, pc, #116	; (adr r3, 800d818 <__ieee754_atan2+0x180>)
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	e016      	b.n	800d7d6 <__ieee754_atan2+0x13e>
 800d7a8:	a51d      	add	r5, pc, #116	; (adr r5, 800d820 <__ieee754_atan2+0x188>)
 800d7aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7ae:	e7ea      	b.n	800d786 <__ieee754_atan2+0xee>
 800d7b0:	2400      	movs	r4, #0
 800d7b2:	2500      	movs	r5, #0
 800d7b4:	e7e7      	b.n	800d786 <__ieee754_atan2+0xee>
 800d7b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d7ba:	461d      	mov	r5, r3
 800d7bc:	e7ab      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d7be:	a314      	add	r3, pc, #80	; (adr r3, 800d810 <__ieee754_atan2+0x178>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	f7f2 fcce 	bl	8000168 <__aeabi_dsub>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	a111      	add	r1, pc, #68	; (adr r1, 800d818 <__ieee754_atan2+0x180>)
 800d7d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7d6:	f7f2 fcc7 	bl	8000168 <__aeabi_dsub>
 800d7da:	e77f      	b.n	800d6dc <__ieee754_atan2+0x44>
 800d7dc:	a50e      	add	r5, pc, #56	; (adr r5, 800d818 <__ieee754_atan2+0x180>)
 800d7de:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7e2:	e798      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d7e4:	a510      	add	r5, pc, #64	; (adr r5, 800d828 <__ieee754_atan2+0x190>)
 800d7e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7ea:	e794      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d7ec:	2400      	movs	r4, #0
 800d7ee:	2500      	movs	r5, #0
 800d7f0:	e791      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d7f2:	a50b      	add	r5, pc, #44	; (adr r5, 800d820 <__ieee754_atan2+0x188>)
 800d7f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7f8:	e78d      	b.n	800d716 <__ieee754_atan2+0x7e>
 800d7fa:	bf00      	nop
 800d7fc:	f3af 8000 	nop.w
 800d800:	54442d18 	.word	0x54442d18
 800d804:	c00921fb 	.word	0xc00921fb
 800d808:	54442d18 	.word	0x54442d18
 800d80c:	bff921fb 	.word	0xbff921fb
 800d810:	33145c07 	.word	0x33145c07
 800d814:	3ca1a626 	.word	0x3ca1a626
 800d818:	54442d18 	.word	0x54442d18
 800d81c:	400921fb 	.word	0x400921fb
 800d820:	54442d18 	.word	0x54442d18
 800d824:	3ff921fb 	.word	0x3ff921fb
 800d828:	54442d18 	.word	0x54442d18
 800d82c:	3fe921fb 	.word	0x3fe921fb
 800d830:	08010878 	.word	0x08010878
 800d834:	08010890 	.word	0x08010890
 800d838:	7ff00000 	.word	0x7ff00000
 800d83c:	00000000 	.word	0x00000000

0800d840 <__ieee754_rem_pio2>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	4614      	mov	r4, r2
 800d846:	4ac4      	ldr	r2, [pc, #784]	; (800db58 <__ieee754_rem_pio2+0x318>)
 800d848:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d84c:	b08d      	sub	sp, #52	; 0x34
 800d84e:	4592      	cmp	sl, r2
 800d850:	9104      	str	r1, [sp, #16]
 800d852:	dc07      	bgt.n	800d864 <__ieee754_rem_pio2+0x24>
 800d854:	2200      	movs	r2, #0
 800d856:	2300      	movs	r3, #0
 800d858:	e9c4 0100 	strd	r0, r1, [r4]
 800d85c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d860:	2500      	movs	r5, #0
 800d862:	e024      	b.n	800d8ae <__ieee754_rem_pio2+0x6e>
 800d864:	4abd      	ldr	r2, [pc, #756]	; (800db5c <__ieee754_rem_pio2+0x31c>)
 800d866:	4592      	cmp	sl, r2
 800d868:	dc72      	bgt.n	800d950 <__ieee754_rem_pio2+0x110>
 800d86a:	9b04      	ldr	r3, [sp, #16]
 800d86c:	4dbc      	ldr	r5, [pc, #752]	; (800db60 <__ieee754_rem_pio2+0x320>)
 800d86e:	2b00      	cmp	r3, #0
 800d870:	a3ab      	add	r3, pc, #684	; (adr r3, 800db20 <__ieee754_rem_pio2+0x2e0>)
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	dd36      	ble.n	800d8e6 <__ieee754_rem_pio2+0xa6>
 800d878:	f7f2 fc76 	bl	8000168 <__aeabi_dsub>
 800d87c:	45aa      	cmp	sl, r5
 800d87e:	4606      	mov	r6, r0
 800d880:	460f      	mov	r7, r1
 800d882:	d018      	beq.n	800d8b6 <__ieee754_rem_pio2+0x76>
 800d884:	a3a8      	add	r3, pc, #672	; (adr r3, 800db28 <__ieee754_rem_pio2+0x2e8>)
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	f7f2 fc6d 	bl	8000168 <__aeabi_dsub>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4630      	mov	r0, r6
 800d894:	e9c4 2300 	strd	r2, r3, [r4]
 800d898:	4639      	mov	r1, r7
 800d89a:	f7f2 fc65 	bl	8000168 <__aeabi_dsub>
 800d89e:	a3a2      	add	r3, pc, #648	; (adr r3, 800db28 <__ieee754_rem_pio2+0x2e8>)
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	f7f2 fc60 	bl	8000168 <__aeabi_dsub>
 800d8a8:	2501      	movs	r5, #1
 800d8aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	b00d      	add	sp, #52	; 0x34
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	a39e      	add	r3, pc, #632	; (adr r3, 800db30 <__ieee754_rem_pio2+0x2f0>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	f7f2 fc54 	bl	8000168 <__aeabi_dsub>
 800d8c0:	a39d      	add	r3, pc, #628	; (adr r3, 800db38 <__ieee754_rem_pio2+0x2f8>)
 800d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	460f      	mov	r7, r1
 800d8ca:	f7f2 fc4d 	bl	8000168 <__aeabi_dsub>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	e9c4 2300 	strd	r2, r3, [r4]
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 fc45 	bl	8000168 <__aeabi_dsub>
 800d8de:	a396      	add	r3, pc, #600	; (adr r3, 800db38 <__ieee754_rem_pio2+0x2f8>)
 800d8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e4:	e7de      	b.n	800d8a4 <__ieee754_rem_pio2+0x64>
 800d8e6:	f7f2 fc41 	bl	800016c <__adddf3>
 800d8ea:	45aa      	cmp	sl, r5
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	460f      	mov	r7, r1
 800d8f0:	d016      	beq.n	800d920 <__ieee754_rem_pio2+0xe0>
 800d8f2:	a38d      	add	r3, pc, #564	; (adr r3, 800db28 <__ieee754_rem_pio2+0x2e8>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f7f2 fc38 	bl	800016c <__adddf3>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	4630      	mov	r0, r6
 800d902:	e9c4 2300 	strd	r2, r3, [r4]
 800d906:	4639      	mov	r1, r7
 800d908:	f7f2 fc2e 	bl	8000168 <__aeabi_dsub>
 800d90c:	a386      	add	r3, pc, #536	; (adr r3, 800db28 <__ieee754_rem_pio2+0x2e8>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fc2b 	bl	800016c <__adddf3>
 800d916:	f04f 35ff 	mov.w	r5, #4294967295
 800d91a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d91e:	e7c6      	b.n	800d8ae <__ieee754_rem_pio2+0x6e>
 800d920:	a383      	add	r3, pc, #524	; (adr r3, 800db30 <__ieee754_rem_pio2+0x2f0>)
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	f7f2 fc21 	bl	800016c <__adddf3>
 800d92a:	a383      	add	r3, pc, #524	; (adr r3, 800db38 <__ieee754_rem_pio2+0x2f8>)
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	4606      	mov	r6, r0
 800d932:	460f      	mov	r7, r1
 800d934:	f7f2 fc1a 	bl	800016c <__adddf3>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4630      	mov	r0, r6
 800d93e:	e9c4 2300 	strd	r2, r3, [r4]
 800d942:	4639      	mov	r1, r7
 800d944:	f7f2 fc10 	bl	8000168 <__aeabi_dsub>
 800d948:	a37b      	add	r3, pc, #492	; (adr r3, 800db38 <__ieee754_rem_pio2+0x2f8>)
 800d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94e:	e7e0      	b.n	800d912 <__ieee754_rem_pio2+0xd2>
 800d950:	4a84      	ldr	r2, [pc, #528]	; (800db64 <__ieee754_rem_pio2+0x324>)
 800d952:	4592      	cmp	sl, r2
 800d954:	f300 80d5 	bgt.w	800db02 <__ieee754_rem_pio2+0x2c2>
 800d958:	f002 f824 	bl	800f9a4 <fabs>
 800d95c:	a378      	add	r3, pc, #480	; (adr r3, 800db40 <__ieee754_rem_pio2+0x300>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	4606      	mov	r6, r0
 800d964:	460f      	mov	r7, r1
 800d966:	f7f2 fdb7 	bl	80004d8 <__aeabi_dmul>
 800d96a:	2200      	movs	r2, #0
 800d96c:	4b7e      	ldr	r3, [pc, #504]	; (800db68 <__ieee754_rem_pio2+0x328>)
 800d96e:	f7f2 fbfd 	bl	800016c <__adddf3>
 800d972:	f7f3 f861 	bl	8000a38 <__aeabi_d2iz>
 800d976:	4605      	mov	r5, r0
 800d978:	f7f2 fd44 	bl	8000404 <__aeabi_i2d>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d984:	a366      	add	r3, pc, #408	; (adr r3, 800db20 <__ieee754_rem_pio2+0x2e0>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fda5 	bl	80004d8 <__aeabi_dmul>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4630      	mov	r0, r6
 800d994:	4639      	mov	r1, r7
 800d996:	f7f2 fbe7 	bl	8000168 <__aeabi_dsub>
 800d99a:	a363      	add	r3, pc, #396	; (adr r3, 800db28 <__ieee754_rem_pio2+0x2e8>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	4680      	mov	r8, r0
 800d9a2:	4689      	mov	r9, r1
 800d9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9a8:	f7f2 fd96 	bl	80004d8 <__aeabi_dmul>
 800d9ac:	2d1f      	cmp	r5, #31
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	460f      	mov	r7, r1
 800d9b2:	dc0e      	bgt.n	800d9d2 <__ieee754_rem_pio2+0x192>
 800d9b4:	4b6d      	ldr	r3, [pc, #436]	; (800db6c <__ieee754_rem_pio2+0x32c>)
 800d9b6:	1e6a      	subs	r2, r5, #1
 800d9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9bc:	4553      	cmp	r3, sl
 800d9be:	d008      	beq.n	800d9d2 <__ieee754_rem_pio2+0x192>
 800d9c0:	4632      	mov	r2, r6
 800d9c2:	463b      	mov	r3, r7
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	4649      	mov	r1, r9
 800d9c8:	f7f2 fbce 	bl	8000168 <__aeabi_dsub>
 800d9cc:	e9c4 0100 	strd	r0, r1, [r4]
 800d9d0:	e013      	b.n	800d9fa <__ieee754_rem_pio2+0x1ba>
 800d9d2:	463b      	mov	r3, r7
 800d9d4:	4632      	mov	r2, r6
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	4649      	mov	r1, r9
 800d9da:	f7f2 fbc5 	bl	8000168 <__aeabi_dsub>
 800d9de:	ea4f 532a 	mov.w	r3, sl, asr #20
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d9e8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800d9ec:	f1ba 0f10 	cmp.w	sl, #16
 800d9f0:	dc1f      	bgt.n	800da32 <__ieee754_rem_pio2+0x1f2>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	e9c4 2300 	strd	r2, r3, [r4]
 800d9fa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d9fe:	4640      	mov	r0, r8
 800da00:	4653      	mov	r3, sl
 800da02:	4649      	mov	r1, r9
 800da04:	f7f2 fbb0 	bl	8000168 <__aeabi_dsub>
 800da08:	4632      	mov	r2, r6
 800da0a:	463b      	mov	r3, r7
 800da0c:	f7f2 fbac 	bl	8000168 <__aeabi_dsub>
 800da10:	460b      	mov	r3, r1
 800da12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da16:	9904      	ldr	r1, [sp, #16]
 800da18:	4602      	mov	r2, r0
 800da1a:	2900      	cmp	r1, #0
 800da1c:	f6bf af47 	bge.w	800d8ae <__ieee754_rem_pio2+0x6e>
 800da20:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800da24:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800da28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da2c:	60e3      	str	r3, [r4, #12]
 800da2e:	426d      	negs	r5, r5
 800da30:	e73d      	b.n	800d8ae <__ieee754_rem_pio2+0x6e>
 800da32:	a33f      	add	r3, pc, #252	; (adr r3, 800db30 <__ieee754_rem_pio2+0x2f0>)
 800da34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da3c:	f7f2 fd4c 	bl	80004d8 <__aeabi_dmul>
 800da40:	4606      	mov	r6, r0
 800da42:	460f      	mov	r7, r1
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4640      	mov	r0, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	f7f2 fb8c 	bl	8000168 <__aeabi_dsub>
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	4682      	mov	sl, r0
 800da56:	468b      	mov	fp, r1
 800da58:	4640      	mov	r0, r8
 800da5a:	4649      	mov	r1, r9
 800da5c:	f7f2 fb84 	bl	8000168 <__aeabi_dsub>
 800da60:	4632      	mov	r2, r6
 800da62:	463b      	mov	r3, r7
 800da64:	f7f2 fb80 	bl	8000168 <__aeabi_dsub>
 800da68:	a333      	add	r3, pc, #204	; (adr r3, 800db38 <__ieee754_rem_pio2+0x2f8>)
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	4606      	mov	r6, r0
 800da70:	460f      	mov	r7, r1
 800da72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da76:	f7f2 fd2f 	bl	80004d8 <__aeabi_dmul>
 800da7a:	4632      	mov	r2, r6
 800da7c:	463b      	mov	r3, r7
 800da7e:	f7f2 fb73 	bl	8000168 <__aeabi_dsub>
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
 800da86:	4606      	mov	r6, r0
 800da88:	460f      	mov	r7, r1
 800da8a:	4650      	mov	r0, sl
 800da8c:	4659      	mov	r1, fp
 800da8e:	f7f2 fb6b 	bl	8000168 <__aeabi_dsub>
 800da92:	9a05      	ldr	r2, [sp, #20]
 800da94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	2b31      	cmp	r3, #49	; 0x31
 800da9c:	dc06      	bgt.n	800daac <__ieee754_rem_pio2+0x26c>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	46d0      	mov	r8, sl
 800daa4:	46d9      	mov	r9, fp
 800daa6:	e9c4 2300 	strd	r2, r3, [r4]
 800daaa:	e7a6      	b.n	800d9fa <__ieee754_rem_pio2+0x1ba>
 800daac:	a326      	add	r3, pc, #152	; (adr r3, 800db48 <__ieee754_rem_pio2+0x308>)
 800daae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dab6:	f7f2 fd0f 	bl	80004d8 <__aeabi_dmul>
 800daba:	4606      	mov	r6, r0
 800dabc:	460f      	mov	r7, r1
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4650      	mov	r0, sl
 800dac4:	4659      	mov	r1, fp
 800dac6:	f7f2 fb4f 	bl	8000168 <__aeabi_dsub>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4680      	mov	r8, r0
 800dad0:	4689      	mov	r9, r1
 800dad2:	4650      	mov	r0, sl
 800dad4:	4659      	mov	r1, fp
 800dad6:	f7f2 fb47 	bl	8000168 <__aeabi_dsub>
 800dada:	4632      	mov	r2, r6
 800dadc:	463b      	mov	r3, r7
 800dade:	f7f2 fb43 	bl	8000168 <__aeabi_dsub>
 800dae2:	a31b      	add	r3, pc, #108	; (adr r3, 800db50 <__ieee754_rem_pio2+0x310>)
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	4606      	mov	r6, r0
 800daea:	460f      	mov	r7, r1
 800daec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daf0:	f7f2 fcf2 	bl	80004d8 <__aeabi_dmul>
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	f7f2 fb36 	bl	8000168 <__aeabi_dsub>
 800dafc:	4606      	mov	r6, r0
 800dafe:	460f      	mov	r7, r1
 800db00:	e75e      	b.n	800d9c0 <__ieee754_rem_pio2+0x180>
 800db02:	4a1b      	ldr	r2, [pc, #108]	; (800db70 <__ieee754_rem_pio2+0x330>)
 800db04:	4592      	cmp	sl, r2
 800db06:	dd35      	ble.n	800db74 <__ieee754_rem_pio2+0x334>
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	f7f2 fb2c 	bl	8000168 <__aeabi_dsub>
 800db10:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db14:	e9c4 0100 	strd	r0, r1, [r4]
 800db18:	e6a2      	b.n	800d860 <__ieee754_rem_pio2+0x20>
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	54400000 	.word	0x54400000
 800db24:	3ff921fb 	.word	0x3ff921fb
 800db28:	1a626331 	.word	0x1a626331
 800db2c:	3dd0b461 	.word	0x3dd0b461
 800db30:	1a600000 	.word	0x1a600000
 800db34:	3dd0b461 	.word	0x3dd0b461
 800db38:	2e037073 	.word	0x2e037073
 800db3c:	3ba3198a 	.word	0x3ba3198a
 800db40:	6dc9c883 	.word	0x6dc9c883
 800db44:	3fe45f30 	.word	0x3fe45f30
 800db48:	2e000000 	.word	0x2e000000
 800db4c:	3ba3198a 	.word	0x3ba3198a
 800db50:	252049c1 	.word	0x252049c1
 800db54:	397b839a 	.word	0x397b839a
 800db58:	3fe921fb 	.word	0x3fe921fb
 800db5c:	4002d97b 	.word	0x4002d97b
 800db60:	3ff921fb 	.word	0x3ff921fb
 800db64:	413921fb 	.word	0x413921fb
 800db68:	3fe00000 	.word	0x3fe00000
 800db6c:	080108a8 	.word	0x080108a8
 800db70:	7fefffff 	.word	0x7fefffff
 800db74:	ea4f 552a 	mov.w	r5, sl, asr #20
 800db78:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800db7c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800db80:	460f      	mov	r7, r1
 800db82:	4606      	mov	r6, r0
 800db84:	f7f2 ff58 	bl	8000a38 <__aeabi_d2iz>
 800db88:	f7f2 fc3c 	bl	8000404 <__aeabi_i2d>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	4630      	mov	r0, r6
 800db92:	4639      	mov	r1, r7
 800db94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800db98:	f7f2 fae6 	bl	8000168 <__aeabi_dsub>
 800db9c:	2200      	movs	r2, #0
 800db9e:	4b1e      	ldr	r3, [pc, #120]	; (800dc18 <__ieee754_rem_pio2+0x3d8>)
 800dba0:	f7f2 fc9a 	bl	80004d8 <__aeabi_dmul>
 800dba4:	460f      	mov	r7, r1
 800dba6:	4606      	mov	r6, r0
 800dba8:	f7f2 ff46 	bl	8000a38 <__aeabi_d2iz>
 800dbac:	f7f2 fc2a 	bl	8000404 <__aeabi_i2d>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dbbc:	f7f2 fad4 	bl	8000168 <__aeabi_dsub>
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4b15      	ldr	r3, [pc, #84]	; (800dc18 <__ieee754_rem_pio2+0x3d8>)
 800dbc4:	f7f2 fc88 	bl	80004d8 <__aeabi_dmul>
 800dbc8:	f04f 0803 	mov.w	r8, #3
 800dbcc:	2600      	movs	r6, #0
 800dbce:	2700      	movs	r7, #0
 800dbd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dbd4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800dbd8:	4632      	mov	r2, r6
 800dbda:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800dbde:	463b      	mov	r3, r7
 800dbe0:	46c2      	mov	sl, r8
 800dbe2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dbe6:	f7f2 fedf 	bl	80009a8 <__aeabi_dcmpeq>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d1f4      	bne.n	800dbd8 <__ieee754_rem_pio2+0x398>
 800dbee:	4b0b      	ldr	r3, [pc, #44]	; (800dc1c <__ieee754_rem_pio2+0x3dc>)
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	9301      	str	r3, [sp, #4]
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	a806      	add	r0, sp, #24
 800dbfc:	4653      	mov	r3, sl
 800dbfe:	f000 fc6d 	bl	800e4dc <__kernel_rem_pio2>
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	4605      	mov	r5, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f6bf ae51 	bge.w	800d8ae <__ieee754_rem_pio2+0x6e>
 800dc0c:	6863      	ldr	r3, [r4, #4]
 800dc0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dc12:	6063      	str	r3, [r4, #4]
 800dc14:	68e3      	ldr	r3, [r4, #12]
 800dc16:	e707      	b.n	800da28 <__ieee754_rem_pio2+0x1e8>
 800dc18:	41700000 	.word	0x41700000
 800dc1c:	08010928 	.word	0x08010928

0800dc20 <__ieee754_sqrt>:
 800dc20:	f8df c150 	ldr.w	ip, [pc, #336]	; 800dd74 <__ieee754_sqrt+0x154>
 800dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc28:	ea3c 0c01 	bics.w	ip, ip, r1
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4606      	mov	r6, r0
 800dc30:	460d      	mov	r5, r1
 800dc32:	460a      	mov	r2, r1
 800dc34:	4607      	mov	r7, r0
 800dc36:	4604      	mov	r4, r0
 800dc38:	d10e      	bne.n	800dc58 <__ieee754_sqrt+0x38>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	f7f2 fc4c 	bl	80004d8 <__aeabi_dmul>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	4630      	mov	r0, r6
 800dc46:	4629      	mov	r1, r5
 800dc48:	f7f2 fa90 	bl	800016c <__adddf3>
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	460d      	mov	r5, r1
 800dc50:	4630      	mov	r0, r6
 800dc52:	4629      	mov	r1, r5
 800dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc58:	2900      	cmp	r1, #0
 800dc5a:	dc0d      	bgt.n	800dc78 <__ieee754_sqrt+0x58>
 800dc5c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800dc60:	ea5c 0707 	orrs.w	r7, ip, r7
 800dc64:	d0f4      	beq.n	800dc50 <__ieee754_sqrt+0x30>
 800dc66:	b139      	cbz	r1, 800dc78 <__ieee754_sqrt+0x58>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	f7f2 fa7d 	bl	8000168 <__aeabi_dsub>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	f7f2 fd5b 	bl	800072c <__aeabi_ddiv>
 800dc76:	e7e9      	b.n	800dc4c <__ieee754_sqrt+0x2c>
 800dc78:	1512      	asrs	r2, r2, #20
 800dc7a:	d074      	beq.n	800dd66 <__ieee754_sqrt+0x146>
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	07d5      	lsls	r5, r2, #31
 800dc80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc84:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800dc88:	bf5e      	ittt	pl
 800dc8a:	0fe3      	lsrpl	r3, r4, #31
 800dc8c:	0064      	lslpl	r4, r4, #1
 800dc8e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800dc92:	0fe3      	lsrs	r3, r4, #31
 800dc94:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dc98:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800dc9c:	2516      	movs	r5, #22
 800dc9e:	4601      	mov	r1, r0
 800dca0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dca4:	1076      	asrs	r6, r6, #1
 800dca6:	0064      	lsls	r4, r4, #1
 800dca8:	188f      	adds	r7, r1, r2
 800dcaa:	429f      	cmp	r7, r3
 800dcac:	bfde      	ittt	le
 800dcae:	1bdb      	suble	r3, r3, r7
 800dcb0:	18b9      	addle	r1, r7, r2
 800dcb2:	1880      	addle	r0, r0, r2
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	3d01      	subs	r5, #1
 800dcb8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800dcbc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dcc0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dcc4:	d1f0      	bne.n	800dca8 <__ieee754_sqrt+0x88>
 800dcc6:	462a      	mov	r2, r5
 800dcc8:	f04f 0e20 	mov.w	lr, #32
 800dccc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800dcd0:	428b      	cmp	r3, r1
 800dcd2:	eb07 0c05 	add.w	ip, r7, r5
 800dcd6:	dc02      	bgt.n	800dcde <__ieee754_sqrt+0xbe>
 800dcd8:	d113      	bne.n	800dd02 <__ieee754_sqrt+0xe2>
 800dcda:	45a4      	cmp	ip, r4
 800dcdc:	d811      	bhi.n	800dd02 <__ieee754_sqrt+0xe2>
 800dcde:	f1bc 0f00 	cmp.w	ip, #0
 800dce2:	eb0c 0507 	add.w	r5, ip, r7
 800dce6:	da43      	bge.n	800dd70 <__ieee754_sqrt+0x150>
 800dce8:	2d00      	cmp	r5, #0
 800dcea:	db41      	blt.n	800dd70 <__ieee754_sqrt+0x150>
 800dcec:	f101 0801 	add.w	r8, r1, #1
 800dcf0:	1a5b      	subs	r3, r3, r1
 800dcf2:	4641      	mov	r1, r8
 800dcf4:	45a4      	cmp	ip, r4
 800dcf6:	bf88      	it	hi
 800dcf8:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dcfc:	eba4 040c 	sub.w	r4, r4, ip
 800dd00:	443a      	add	r2, r7
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	f1be 0e01 	subs.w	lr, lr, #1
 800dd08:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800dd0c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800dd10:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dd14:	d1dc      	bne.n	800dcd0 <__ieee754_sqrt+0xb0>
 800dd16:	4323      	orrs	r3, r4
 800dd18:	d006      	beq.n	800dd28 <__ieee754_sqrt+0x108>
 800dd1a:	1c54      	adds	r4, r2, #1
 800dd1c:	bf0b      	itete	eq
 800dd1e:	4672      	moveq	r2, lr
 800dd20:	3201      	addne	r2, #1
 800dd22:	3001      	addeq	r0, #1
 800dd24:	f022 0201 	bicne.w	r2, r2, #1
 800dd28:	1043      	asrs	r3, r0, #1
 800dd2a:	07c1      	lsls	r1, r0, #31
 800dd2c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dd30:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dd34:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dd38:	bf48      	it	mi
 800dd3a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dd3e:	4610      	mov	r0, r2
 800dd40:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800dd44:	e782      	b.n	800dc4c <__ieee754_sqrt+0x2c>
 800dd46:	0ae3      	lsrs	r3, r4, #11
 800dd48:	3915      	subs	r1, #21
 800dd4a:	0564      	lsls	r4, r4, #21
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0fa      	beq.n	800dd46 <__ieee754_sqrt+0x126>
 800dd50:	02de      	lsls	r6, r3, #11
 800dd52:	d50a      	bpl.n	800dd6a <__ieee754_sqrt+0x14a>
 800dd54:	f1c2 0020 	rsb	r0, r2, #32
 800dd58:	fa24 f000 	lsr.w	r0, r4, r0
 800dd5c:	1e55      	subs	r5, r2, #1
 800dd5e:	4094      	lsls	r4, r2
 800dd60:	4303      	orrs	r3, r0
 800dd62:	1b4a      	subs	r2, r1, r5
 800dd64:	e78a      	b.n	800dc7c <__ieee754_sqrt+0x5c>
 800dd66:	4611      	mov	r1, r2
 800dd68:	e7f0      	b.n	800dd4c <__ieee754_sqrt+0x12c>
 800dd6a:	005b      	lsls	r3, r3, #1
 800dd6c:	3201      	adds	r2, #1
 800dd6e:	e7ef      	b.n	800dd50 <__ieee754_sqrt+0x130>
 800dd70:	4688      	mov	r8, r1
 800dd72:	e7bd      	b.n	800dcf0 <__ieee754_sqrt+0xd0>
 800dd74:	7ff00000 	.word	0x7ff00000

0800dd78 <__ieee754_asinf>:
 800dd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd7c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800dd80:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800dd84:	4604      	mov	r4, r0
 800dd86:	4605      	mov	r5, r0
 800dd88:	d10c      	bne.n	800dda4 <__ieee754_asinf+0x2c>
 800dd8a:	498d      	ldr	r1, [pc, #564]	; (800dfc0 <__ieee754_asinf+0x248>)
 800dd8c:	f7f2 fffa 	bl	8000d84 <__aeabi_fmul>
 800dd90:	498c      	ldr	r1, [pc, #560]	; (800dfc4 <__ieee754_asinf+0x24c>)
 800dd92:	4605      	mov	r5, r0
 800dd94:	4620      	mov	r0, r4
 800dd96:	f7f2 fff5 	bl	8000d84 <__aeabi_fmul>
 800dd9a:	4601      	mov	r1, r0
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f7f2 fee9 	bl	8000b74 <__addsf3>
 800dda2:	e006      	b.n	800ddb2 <__ieee754_asinf+0x3a>
 800dda4:	dd07      	ble.n	800ddb6 <__ieee754_asinf+0x3e>
 800dda6:	4601      	mov	r1, r0
 800dda8:	f7f2 fee2 	bl	8000b70 <__aeabi_fsub>
 800ddac:	4601      	mov	r1, r0
 800ddae:	f7f3 f89d 	bl	8000eec <__aeabi_fdiv>
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	e00e      	b.n	800ddd4 <__ieee754_asinf+0x5c>
 800ddb6:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800ddba:	da58      	bge.n	800de6e <__ieee754_asinf+0xf6>
 800ddbc:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800ddc0:	da0b      	bge.n	800ddda <__ieee754_asinf+0x62>
 800ddc2:	4981      	ldr	r1, [pc, #516]	; (800dfc8 <__ieee754_asinf+0x250>)
 800ddc4:	f7f2 fed6 	bl	8000b74 <__addsf3>
 800ddc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ddcc:	f7f3 f996 	bl	80010fc <__aeabi_fcmpgt>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d04c      	beq.n	800de6e <__ieee754_asinf+0xf6>
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddda:	4601      	mov	r1, r0
 800dddc:	f7f2 ffd2 	bl	8000d84 <__aeabi_fmul>
 800dde0:	4605      	mov	r5, r0
 800dde2:	497a      	ldr	r1, [pc, #488]	; (800dfcc <__ieee754_asinf+0x254>)
 800dde4:	f7f2 ffce 	bl	8000d84 <__aeabi_fmul>
 800dde8:	4979      	ldr	r1, [pc, #484]	; (800dfd0 <__ieee754_asinf+0x258>)
 800ddea:	f7f2 fec3 	bl	8000b74 <__addsf3>
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f7f2 ffc8 	bl	8000d84 <__aeabi_fmul>
 800ddf4:	4977      	ldr	r1, [pc, #476]	; (800dfd4 <__ieee754_asinf+0x25c>)
 800ddf6:	f7f2 febb 	bl	8000b70 <__aeabi_fsub>
 800ddfa:	4629      	mov	r1, r5
 800ddfc:	f7f2 ffc2 	bl	8000d84 <__aeabi_fmul>
 800de00:	4975      	ldr	r1, [pc, #468]	; (800dfd8 <__ieee754_asinf+0x260>)
 800de02:	f7f2 feb7 	bl	8000b74 <__addsf3>
 800de06:	4629      	mov	r1, r5
 800de08:	f7f2 ffbc 	bl	8000d84 <__aeabi_fmul>
 800de0c:	4973      	ldr	r1, [pc, #460]	; (800dfdc <__ieee754_asinf+0x264>)
 800de0e:	f7f2 feaf 	bl	8000b70 <__aeabi_fsub>
 800de12:	4629      	mov	r1, r5
 800de14:	f7f2 ffb6 	bl	8000d84 <__aeabi_fmul>
 800de18:	4971      	ldr	r1, [pc, #452]	; (800dfe0 <__ieee754_asinf+0x268>)
 800de1a:	f7f2 feab 	bl	8000b74 <__addsf3>
 800de1e:	4629      	mov	r1, r5
 800de20:	f7f2 ffb0 	bl	8000d84 <__aeabi_fmul>
 800de24:	496f      	ldr	r1, [pc, #444]	; (800dfe4 <__ieee754_asinf+0x26c>)
 800de26:	4606      	mov	r6, r0
 800de28:	4628      	mov	r0, r5
 800de2a:	f7f2 ffab 	bl	8000d84 <__aeabi_fmul>
 800de2e:	496e      	ldr	r1, [pc, #440]	; (800dfe8 <__ieee754_asinf+0x270>)
 800de30:	f7f2 fe9e 	bl	8000b70 <__aeabi_fsub>
 800de34:	4629      	mov	r1, r5
 800de36:	f7f2 ffa5 	bl	8000d84 <__aeabi_fmul>
 800de3a:	496c      	ldr	r1, [pc, #432]	; (800dfec <__ieee754_asinf+0x274>)
 800de3c:	f7f2 fe9a 	bl	8000b74 <__addsf3>
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 ff9f 	bl	8000d84 <__aeabi_fmul>
 800de46:	496a      	ldr	r1, [pc, #424]	; (800dff0 <__ieee754_asinf+0x278>)
 800de48:	f7f2 fe92 	bl	8000b70 <__aeabi_fsub>
 800de4c:	4629      	mov	r1, r5
 800de4e:	f7f2 ff99 	bl	8000d84 <__aeabi_fmul>
 800de52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de56:	f7f2 fe8d 	bl	8000b74 <__addsf3>
 800de5a:	4601      	mov	r1, r0
 800de5c:	4630      	mov	r0, r6
 800de5e:	f7f3 f845 	bl	8000eec <__aeabi_fdiv>
 800de62:	4621      	mov	r1, r4
 800de64:	f7f2 ff8e 	bl	8000d84 <__aeabi_fmul>
 800de68:	4601      	mov	r1, r0
 800de6a:	4620      	mov	r0, r4
 800de6c:	e797      	b.n	800dd9e <__ieee754_asinf+0x26>
 800de6e:	4620      	mov	r0, r4
 800de70:	f7ff fb40 	bl	800d4f4 <fabsf>
 800de74:	4601      	mov	r1, r0
 800de76:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800de7a:	f7f2 fe79 	bl	8000b70 <__aeabi_fsub>
 800de7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800de82:	f7f2 ff7f 	bl	8000d84 <__aeabi_fmul>
 800de86:	4606      	mov	r6, r0
 800de88:	4950      	ldr	r1, [pc, #320]	; (800dfcc <__ieee754_asinf+0x254>)
 800de8a:	f7f2 ff7b 	bl	8000d84 <__aeabi_fmul>
 800de8e:	4950      	ldr	r1, [pc, #320]	; (800dfd0 <__ieee754_asinf+0x258>)
 800de90:	f7f2 fe70 	bl	8000b74 <__addsf3>
 800de94:	4631      	mov	r1, r6
 800de96:	f7f2 ff75 	bl	8000d84 <__aeabi_fmul>
 800de9a:	494e      	ldr	r1, [pc, #312]	; (800dfd4 <__ieee754_asinf+0x25c>)
 800de9c:	f7f2 fe68 	bl	8000b70 <__aeabi_fsub>
 800dea0:	4631      	mov	r1, r6
 800dea2:	f7f2 ff6f 	bl	8000d84 <__aeabi_fmul>
 800dea6:	494c      	ldr	r1, [pc, #304]	; (800dfd8 <__ieee754_asinf+0x260>)
 800dea8:	f7f2 fe64 	bl	8000b74 <__addsf3>
 800deac:	4631      	mov	r1, r6
 800deae:	f7f2 ff69 	bl	8000d84 <__aeabi_fmul>
 800deb2:	494a      	ldr	r1, [pc, #296]	; (800dfdc <__ieee754_asinf+0x264>)
 800deb4:	f7f2 fe5c 	bl	8000b70 <__aeabi_fsub>
 800deb8:	4631      	mov	r1, r6
 800deba:	f7f2 ff63 	bl	8000d84 <__aeabi_fmul>
 800debe:	4948      	ldr	r1, [pc, #288]	; (800dfe0 <__ieee754_asinf+0x268>)
 800dec0:	f7f2 fe58 	bl	8000b74 <__addsf3>
 800dec4:	4631      	mov	r1, r6
 800dec6:	f7f2 ff5d 	bl	8000d84 <__aeabi_fmul>
 800deca:	4946      	ldr	r1, [pc, #280]	; (800dfe4 <__ieee754_asinf+0x26c>)
 800decc:	4681      	mov	r9, r0
 800dece:	4630      	mov	r0, r6
 800ded0:	f7f2 ff58 	bl	8000d84 <__aeabi_fmul>
 800ded4:	4944      	ldr	r1, [pc, #272]	; (800dfe8 <__ieee754_asinf+0x270>)
 800ded6:	f7f2 fe4b 	bl	8000b70 <__aeabi_fsub>
 800deda:	4631      	mov	r1, r6
 800dedc:	f7f2 ff52 	bl	8000d84 <__aeabi_fmul>
 800dee0:	4942      	ldr	r1, [pc, #264]	; (800dfec <__ieee754_asinf+0x274>)
 800dee2:	f7f2 fe47 	bl	8000b74 <__addsf3>
 800dee6:	4631      	mov	r1, r6
 800dee8:	f7f2 ff4c 	bl	8000d84 <__aeabi_fmul>
 800deec:	4940      	ldr	r1, [pc, #256]	; (800dff0 <__ieee754_asinf+0x278>)
 800deee:	f7f2 fe3f 	bl	8000b70 <__aeabi_fsub>
 800def2:	4631      	mov	r1, r6
 800def4:	f7f2 ff46 	bl	8000d84 <__aeabi_fmul>
 800def8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800defc:	f7f2 fe3a 	bl	8000b74 <__addsf3>
 800df00:	4682      	mov	sl, r0
 800df02:	4630      	mov	r0, r6
 800df04:	f000 f9da 	bl	800e2bc <__ieee754_sqrtf>
 800df08:	4b3a      	ldr	r3, [pc, #232]	; (800dff4 <__ieee754_asinf+0x27c>)
 800df0a:	4607      	mov	r7, r0
 800df0c:	4598      	cmp	r8, r3
 800df0e:	dd1a      	ble.n	800df46 <__ieee754_asinf+0x1ce>
 800df10:	4651      	mov	r1, sl
 800df12:	4648      	mov	r0, r9
 800df14:	f7f2 ffea 	bl	8000eec <__aeabi_fdiv>
 800df18:	4639      	mov	r1, r7
 800df1a:	f7f2 ff33 	bl	8000d84 <__aeabi_fmul>
 800df1e:	4639      	mov	r1, r7
 800df20:	f7f2 fe28 	bl	8000b74 <__addsf3>
 800df24:	4601      	mov	r1, r0
 800df26:	f7f2 fe25 	bl	8000b74 <__addsf3>
 800df2a:	4933      	ldr	r1, [pc, #204]	; (800dff8 <__ieee754_asinf+0x280>)
 800df2c:	f7f2 fe22 	bl	8000b74 <__addsf3>
 800df30:	4601      	mov	r1, r0
 800df32:	4823      	ldr	r0, [pc, #140]	; (800dfc0 <__ieee754_asinf+0x248>)
 800df34:	f7f2 fe1c 	bl	8000b70 <__aeabi_fsub>
 800df38:	2d00      	cmp	r5, #0
 800df3a:	4604      	mov	r4, r0
 800df3c:	f73f af4a 	bgt.w	800ddd4 <__ieee754_asinf+0x5c>
 800df40:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800df44:	e735      	b.n	800ddb2 <__ieee754_asinf+0x3a>
 800df46:	4601      	mov	r1, r0
 800df48:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800df4c:	f7f2 fe12 	bl	8000b74 <__addsf3>
 800df50:	4651      	mov	r1, sl
 800df52:	4604      	mov	r4, r0
 800df54:	4648      	mov	r0, r9
 800df56:	f7f2 ffc9 	bl	8000eec <__aeabi_fdiv>
 800df5a:	4601      	mov	r1, r0
 800df5c:	4620      	mov	r0, r4
 800df5e:	f7f2 ff11 	bl	8000d84 <__aeabi_fmul>
 800df62:	f028 080f 	bic.w	r8, r8, #15
 800df66:	4681      	mov	r9, r0
 800df68:	4641      	mov	r1, r8
 800df6a:	4640      	mov	r0, r8
 800df6c:	f7f2 ff0a 	bl	8000d84 <__aeabi_fmul>
 800df70:	4601      	mov	r1, r0
 800df72:	4630      	mov	r0, r6
 800df74:	f7f2 fdfc 	bl	8000b70 <__aeabi_fsub>
 800df78:	4641      	mov	r1, r8
 800df7a:	4604      	mov	r4, r0
 800df7c:	4638      	mov	r0, r7
 800df7e:	f7f2 fdf9 	bl	8000b74 <__addsf3>
 800df82:	4601      	mov	r1, r0
 800df84:	4620      	mov	r0, r4
 800df86:	f7f2 ffb1 	bl	8000eec <__aeabi_fdiv>
 800df8a:	4601      	mov	r1, r0
 800df8c:	f7f2 fdf2 	bl	8000b74 <__addsf3>
 800df90:	4601      	mov	r1, r0
 800df92:	480c      	ldr	r0, [pc, #48]	; (800dfc4 <__ieee754_asinf+0x24c>)
 800df94:	f7f2 fdec 	bl	8000b70 <__aeabi_fsub>
 800df98:	4601      	mov	r1, r0
 800df9a:	4648      	mov	r0, r9
 800df9c:	f7f2 fde8 	bl	8000b70 <__aeabi_fsub>
 800dfa0:	4641      	mov	r1, r8
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	f7f2 fde5 	bl	8000b74 <__addsf3>
 800dfaa:	4601      	mov	r1, r0
 800dfac:	4813      	ldr	r0, [pc, #76]	; (800dffc <__ieee754_asinf+0x284>)
 800dfae:	f7f2 fddf 	bl	8000b70 <__aeabi_fsub>
 800dfb2:	4601      	mov	r1, r0
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f7f2 fddb 	bl	8000b70 <__aeabi_fsub>
 800dfba:	4601      	mov	r1, r0
 800dfbc:	480f      	ldr	r0, [pc, #60]	; (800dffc <__ieee754_asinf+0x284>)
 800dfbe:	e7b9      	b.n	800df34 <__ieee754_asinf+0x1bc>
 800dfc0:	3fc90fdb 	.word	0x3fc90fdb
 800dfc4:	b33bbd2e 	.word	0xb33bbd2e
 800dfc8:	7149f2ca 	.word	0x7149f2ca
 800dfcc:	3811ef08 	.word	0x3811ef08
 800dfd0:	3a4f7f04 	.word	0x3a4f7f04
 800dfd4:	3d241146 	.word	0x3d241146
 800dfd8:	3e4e0aa8 	.word	0x3e4e0aa8
 800dfdc:	3ea6b090 	.word	0x3ea6b090
 800dfe0:	3e2aaaab 	.word	0x3e2aaaab
 800dfe4:	3d9dc62e 	.word	0x3d9dc62e
 800dfe8:	3f303361 	.word	0x3f303361
 800dfec:	4001572d 	.word	0x4001572d
 800dff0:	4019d139 	.word	0x4019d139
 800dff4:	3f799999 	.word	0x3f799999
 800dff8:	333bbd2e 	.word	0x333bbd2e
 800dffc:	3f490fdb 	.word	0x3f490fdb

0800e000 <__ieee754_rem_pio2f>:
 800e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e004:	4aa0      	ldr	r2, [pc, #640]	; (800e288 <__ieee754_rem_pio2f+0x288>)
 800e006:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e00a:	4296      	cmp	r6, r2
 800e00c:	460c      	mov	r4, r1
 800e00e:	4682      	mov	sl, r0
 800e010:	b087      	sub	sp, #28
 800e012:	dc04      	bgt.n	800e01e <__ieee754_rem_pio2f+0x1e>
 800e014:	2300      	movs	r3, #0
 800e016:	6008      	str	r0, [r1, #0]
 800e018:	604b      	str	r3, [r1, #4]
 800e01a:	2500      	movs	r5, #0
 800e01c:	e01a      	b.n	800e054 <__ieee754_rem_pio2f+0x54>
 800e01e:	4a9b      	ldr	r2, [pc, #620]	; (800e28c <__ieee754_rem_pio2f+0x28c>)
 800e020:	4296      	cmp	r6, r2
 800e022:	dc4b      	bgt.n	800e0bc <__ieee754_rem_pio2f+0xbc>
 800e024:	2800      	cmp	r0, #0
 800e026:	499a      	ldr	r1, [pc, #616]	; (800e290 <__ieee754_rem_pio2f+0x290>)
 800e028:	4f9a      	ldr	r7, [pc, #616]	; (800e294 <__ieee754_rem_pio2f+0x294>)
 800e02a:	f026 060f 	bic.w	r6, r6, #15
 800e02e:	dd23      	ble.n	800e078 <__ieee754_rem_pio2f+0x78>
 800e030:	f7f2 fd9e 	bl	8000b70 <__aeabi_fsub>
 800e034:	42be      	cmp	r6, r7
 800e036:	4605      	mov	r5, r0
 800e038:	d010      	beq.n	800e05c <__ieee754_rem_pio2f+0x5c>
 800e03a:	4997      	ldr	r1, [pc, #604]	; (800e298 <__ieee754_rem_pio2f+0x298>)
 800e03c:	f7f2 fd98 	bl	8000b70 <__aeabi_fsub>
 800e040:	4601      	mov	r1, r0
 800e042:	6020      	str	r0, [r4, #0]
 800e044:	4628      	mov	r0, r5
 800e046:	f7f2 fd93 	bl	8000b70 <__aeabi_fsub>
 800e04a:	4993      	ldr	r1, [pc, #588]	; (800e298 <__ieee754_rem_pio2f+0x298>)
 800e04c:	f7f2 fd90 	bl	8000b70 <__aeabi_fsub>
 800e050:	2501      	movs	r5, #1
 800e052:	6060      	str	r0, [r4, #4]
 800e054:	4628      	mov	r0, r5
 800e056:	b007      	add	sp, #28
 800e058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05c:	498f      	ldr	r1, [pc, #572]	; (800e29c <__ieee754_rem_pio2f+0x29c>)
 800e05e:	f7f2 fd87 	bl	8000b70 <__aeabi_fsub>
 800e062:	498f      	ldr	r1, [pc, #572]	; (800e2a0 <__ieee754_rem_pio2f+0x2a0>)
 800e064:	4605      	mov	r5, r0
 800e066:	f7f2 fd83 	bl	8000b70 <__aeabi_fsub>
 800e06a:	4601      	mov	r1, r0
 800e06c:	6020      	str	r0, [r4, #0]
 800e06e:	4628      	mov	r0, r5
 800e070:	f7f2 fd7e 	bl	8000b70 <__aeabi_fsub>
 800e074:	498a      	ldr	r1, [pc, #552]	; (800e2a0 <__ieee754_rem_pio2f+0x2a0>)
 800e076:	e7e9      	b.n	800e04c <__ieee754_rem_pio2f+0x4c>
 800e078:	f7f2 fd7c 	bl	8000b74 <__addsf3>
 800e07c:	42be      	cmp	r6, r7
 800e07e:	4605      	mov	r5, r0
 800e080:	d00e      	beq.n	800e0a0 <__ieee754_rem_pio2f+0xa0>
 800e082:	4985      	ldr	r1, [pc, #532]	; (800e298 <__ieee754_rem_pio2f+0x298>)
 800e084:	f7f2 fd76 	bl	8000b74 <__addsf3>
 800e088:	4601      	mov	r1, r0
 800e08a:	6020      	str	r0, [r4, #0]
 800e08c:	4628      	mov	r0, r5
 800e08e:	f7f2 fd6f 	bl	8000b70 <__aeabi_fsub>
 800e092:	4981      	ldr	r1, [pc, #516]	; (800e298 <__ieee754_rem_pio2f+0x298>)
 800e094:	f7f2 fd6e 	bl	8000b74 <__addsf3>
 800e098:	f04f 35ff 	mov.w	r5, #4294967295
 800e09c:	6060      	str	r0, [r4, #4]
 800e09e:	e7d9      	b.n	800e054 <__ieee754_rem_pio2f+0x54>
 800e0a0:	497e      	ldr	r1, [pc, #504]	; (800e29c <__ieee754_rem_pio2f+0x29c>)
 800e0a2:	f7f2 fd67 	bl	8000b74 <__addsf3>
 800e0a6:	497e      	ldr	r1, [pc, #504]	; (800e2a0 <__ieee754_rem_pio2f+0x2a0>)
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	f7f2 fd63 	bl	8000b74 <__addsf3>
 800e0ae:	4601      	mov	r1, r0
 800e0b0:	6020      	str	r0, [r4, #0]
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f7f2 fd5c 	bl	8000b70 <__aeabi_fsub>
 800e0b8:	4979      	ldr	r1, [pc, #484]	; (800e2a0 <__ieee754_rem_pio2f+0x2a0>)
 800e0ba:	e7eb      	b.n	800e094 <__ieee754_rem_pio2f+0x94>
 800e0bc:	4a79      	ldr	r2, [pc, #484]	; (800e2a4 <__ieee754_rem_pio2f+0x2a4>)
 800e0be:	4296      	cmp	r6, r2
 800e0c0:	f300 8091 	bgt.w	800e1e6 <__ieee754_rem_pio2f+0x1e6>
 800e0c4:	f7ff fa16 	bl	800d4f4 <fabsf>
 800e0c8:	4977      	ldr	r1, [pc, #476]	; (800e2a8 <__ieee754_rem_pio2f+0x2a8>)
 800e0ca:	4607      	mov	r7, r0
 800e0cc:	f7f2 fe5a 	bl	8000d84 <__aeabi_fmul>
 800e0d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e0d4:	f7f2 fd4e 	bl	8000b74 <__addsf3>
 800e0d8:	f7f3 f830 	bl	800113c <__aeabi_f2iz>
 800e0dc:	4605      	mov	r5, r0
 800e0de:	f7f2 fdfd 	bl	8000cdc <__aeabi_i2f>
 800e0e2:	496b      	ldr	r1, [pc, #428]	; (800e290 <__ieee754_rem_pio2f+0x290>)
 800e0e4:	4681      	mov	r9, r0
 800e0e6:	f7f2 fe4d 	bl	8000d84 <__aeabi_fmul>
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f7f2 fd3f 	bl	8000b70 <__aeabi_fsub>
 800e0f2:	4969      	ldr	r1, [pc, #420]	; (800e298 <__ieee754_rem_pio2f+0x298>)
 800e0f4:	4680      	mov	r8, r0
 800e0f6:	4648      	mov	r0, r9
 800e0f8:	f7f2 fe44 	bl	8000d84 <__aeabi_fmul>
 800e0fc:	2d1f      	cmp	r5, #31
 800e0fe:	4607      	mov	r7, r0
 800e100:	dc0c      	bgt.n	800e11c <__ieee754_rem_pio2f+0x11c>
 800e102:	4a6a      	ldr	r2, [pc, #424]	; (800e2ac <__ieee754_rem_pio2f+0x2ac>)
 800e104:	1e69      	subs	r1, r5, #1
 800e106:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e10a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800e10e:	4293      	cmp	r3, r2
 800e110:	d004      	beq.n	800e11c <__ieee754_rem_pio2f+0x11c>
 800e112:	4639      	mov	r1, r7
 800e114:	4640      	mov	r0, r8
 800e116:	f7f2 fd2b 	bl	8000b70 <__aeabi_fsub>
 800e11a:	e00b      	b.n	800e134 <__ieee754_rem_pio2f+0x134>
 800e11c:	4639      	mov	r1, r7
 800e11e:	4640      	mov	r0, r8
 800e120:	f7f2 fd26 	bl	8000b70 <__aeabi_fsub>
 800e124:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e128:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e12c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e130:	2e08      	cmp	r6, #8
 800e132:	dc01      	bgt.n	800e138 <__ieee754_rem_pio2f+0x138>
 800e134:	6020      	str	r0, [r4, #0]
 800e136:	e026      	b.n	800e186 <__ieee754_rem_pio2f+0x186>
 800e138:	4958      	ldr	r1, [pc, #352]	; (800e29c <__ieee754_rem_pio2f+0x29c>)
 800e13a:	4648      	mov	r0, r9
 800e13c:	f7f2 fe22 	bl	8000d84 <__aeabi_fmul>
 800e140:	4607      	mov	r7, r0
 800e142:	4601      	mov	r1, r0
 800e144:	4640      	mov	r0, r8
 800e146:	f7f2 fd13 	bl	8000b70 <__aeabi_fsub>
 800e14a:	4601      	mov	r1, r0
 800e14c:	4606      	mov	r6, r0
 800e14e:	4640      	mov	r0, r8
 800e150:	f7f2 fd0e 	bl	8000b70 <__aeabi_fsub>
 800e154:	4639      	mov	r1, r7
 800e156:	f7f2 fd0b 	bl	8000b70 <__aeabi_fsub>
 800e15a:	4607      	mov	r7, r0
 800e15c:	4950      	ldr	r1, [pc, #320]	; (800e2a0 <__ieee754_rem_pio2f+0x2a0>)
 800e15e:	4648      	mov	r0, r9
 800e160:	f7f2 fe10 	bl	8000d84 <__aeabi_fmul>
 800e164:	4639      	mov	r1, r7
 800e166:	f7f2 fd03 	bl	8000b70 <__aeabi_fsub>
 800e16a:	4601      	mov	r1, r0
 800e16c:	4607      	mov	r7, r0
 800e16e:	4630      	mov	r0, r6
 800e170:	f7f2 fcfe 	bl	8000b70 <__aeabi_fsub>
 800e174:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e178:	ebab 0b03 	sub.w	fp, fp, r3
 800e17c:	f1bb 0f19 	cmp.w	fp, #25
 800e180:	dc16      	bgt.n	800e1b0 <__ieee754_rem_pio2f+0x1b0>
 800e182:	46b0      	mov	r8, r6
 800e184:	6020      	str	r0, [r4, #0]
 800e186:	6826      	ldr	r6, [r4, #0]
 800e188:	4640      	mov	r0, r8
 800e18a:	4631      	mov	r1, r6
 800e18c:	f7f2 fcf0 	bl	8000b70 <__aeabi_fsub>
 800e190:	4639      	mov	r1, r7
 800e192:	f7f2 fced 	bl	8000b70 <__aeabi_fsub>
 800e196:	f1ba 0f00 	cmp.w	sl, #0
 800e19a:	6060      	str	r0, [r4, #4]
 800e19c:	f6bf af5a 	bge.w	800e054 <__ieee754_rem_pio2f+0x54>
 800e1a0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e1a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e1a8:	6026      	str	r6, [r4, #0]
 800e1aa:	6060      	str	r0, [r4, #4]
 800e1ac:	426d      	negs	r5, r5
 800e1ae:	e751      	b.n	800e054 <__ieee754_rem_pio2f+0x54>
 800e1b0:	493f      	ldr	r1, [pc, #252]	; (800e2b0 <__ieee754_rem_pio2f+0x2b0>)
 800e1b2:	4648      	mov	r0, r9
 800e1b4:	f7f2 fde6 	bl	8000d84 <__aeabi_fmul>
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	4601      	mov	r1, r0
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7f2 fcd7 	bl	8000b70 <__aeabi_fsub>
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	4680      	mov	r8, r0
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f7f2 fcd2 	bl	8000b70 <__aeabi_fsub>
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	f7f2 fccf 	bl	8000b70 <__aeabi_fsub>
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	4937      	ldr	r1, [pc, #220]	; (800e2b4 <__ieee754_rem_pio2f+0x2b4>)
 800e1d6:	4648      	mov	r0, r9
 800e1d8:	f7f2 fdd4 	bl	8000d84 <__aeabi_fmul>
 800e1dc:	4631      	mov	r1, r6
 800e1de:	f7f2 fcc7 	bl	8000b70 <__aeabi_fsub>
 800e1e2:	4607      	mov	r7, r0
 800e1e4:	e795      	b.n	800e112 <__ieee754_rem_pio2f+0x112>
 800e1e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e1ea:	db05      	blt.n	800e1f8 <__ieee754_rem_pio2f+0x1f8>
 800e1ec:	4601      	mov	r1, r0
 800e1ee:	f7f2 fcbf 	bl	8000b70 <__aeabi_fsub>
 800e1f2:	6060      	str	r0, [r4, #4]
 800e1f4:	6020      	str	r0, [r4, #0]
 800e1f6:	e710      	b.n	800e01a <__ieee754_rem_pio2f+0x1a>
 800e1f8:	15f7      	asrs	r7, r6, #23
 800e1fa:	3f86      	subs	r7, #134	; 0x86
 800e1fc:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e200:	4630      	mov	r0, r6
 800e202:	f7f2 ff9b 	bl	800113c <__aeabi_f2iz>
 800e206:	f7f2 fd69 	bl	8000cdc <__aeabi_i2f>
 800e20a:	4601      	mov	r1, r0
 800e20c:	9003      	str	r0, [sp, #12]
 800e20e:	4630      	mov	r0, r6
 800e210:	f7f2 fcae 	bl	8000b70 <__aeabi_fsub>
 800e214:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e218:	f7f2 fdb4 	bl	8000d84 <__aeabi_fmul>
 800e21c:	4606      	mov	r6, r0
 800e21e:	f7f2 ff8d 	bl	800113c <__aeabi_f2iz>
 800e222:	f7f2 fd5b 	bl	8000cdc <__aeabi_i2f>
 800e226:	4601      	mov	r1, r0
 800e228:	9004      	str	r0, [sp, #16]
 800e22a:	4605      	mov	r5, r0
 800e22c:	4630      	mov	r0, r6
 800e22e:	f7f2 fc9f 	bl	8000b70 <__aeabi_fsub>
 800e232:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e236:	f7f2 fda5 	bl	8000d84 <__aeabi_fmul>
 800e23a:	2100      	movs	r1, #0
 800e23c:	9005      	str	r0, [sp, #20]
 800e23e:	f7f2 ff35 	bl	80010ac <__aeabi_fcmpeq>
 800e242:	b1f0      	cbz	r0, 800e282 <__ieee754_rem_pio2f+0x282>
 800e244:	2100      	movs	r1, #0
 800e246:	4628      	mov	r0, r5
 800e248:	f7f2 ff30 	bl	80010ac <__aeabi_fcmpeq>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	bf14      	ite	ne
 800e250:	2301      	movne	r3, #1
 800e252:	2302      	moveq	r3, #2
 800e254:	4a18      	ldr	r2, [pc, #96]	; (800e2b8 <__ieee754_rem_pio2f+0x2b8>)
 800e256:	4621      	mov	r1, r4
 800e258:	9201      	str	r2, [sp, #4]
 800e25a:	2202      	movs	r2, #2
 800e25c:	a803      	add	r0, sp, #12
 800e25e:	9200      	str	r2, [sp, #0]
 800e260:	463a      	mov	r2, r7
 800e262:	f000 fdbb 	bl	800eddc <__kernel_rem_pio2f>
 800e266:	f1ba 0f00 	cmp.w	sl, #0
 800e26a:	4605      	mov	r5, r0
 800e26c:	f6bf aef2 	bge.w	800e054 <__ieee754_rem_pio2f+0x54>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e276:	6023      	str	r3, [r4, #0]
 800e278:	6863      	ldr	r3, [r4, #4]
 800e27a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e27e:	6063      	str	r3, [r4, #4]
 800e280:	e794      	b.n	800e1ac <__ieee754_rem_pio2f+0x1ac>
 800e282:	2303      	movs	r3, #3
 800e284:	e7e6      	b.n	800e254 <__ieee754_rem_pio2f+0x254>
 800e286:	bf00      	nop
 800e288:	3f490fd8 	.word	0x3f490fd8
 800e28c:	4016cbe3 	.word	0x4016cbe3
 800e290:	3fc90f80 	.word	0x3fc90f80
 800e294:	3fc90fd0 	.word	0x3fc90fd0
 800e298:	37354443 	.word	0x37354443
 800e29c:	37354400 	.word	0x37354400
 800e2a0:	2e85a308 	.word	0x2e85a308
 800e2a4:	43490f80 	.word	0x43490f80
 800e2a8:	3f22f984 	.word	0x3f22f984
 800e2ac:	08010a30 	.word	0x08010a30
 800e2b0:	2e85a300 	.word	0x2e85a300
 800e2b4:	248d3132 	.word	0x248d3132
 800e2b8:	08010ab0 	.word	0x08010ab0

0800e2bc <__ieee754_sqrtf>:
 800e2bc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e2c0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e2c4:	b570      	push	{r4, r5, r6, lr}
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	d309      	bcc.n	800e2e0 <__ieee754_sqrtf+0x24>
 800e2cc:	4601      	mov	r1, r0
 800e2ce:	f7f2 fd59 	bl	8000d84 <__aeabi_fmul>
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f7f2 fc4d 	bl	8000b74 <__addsf3>
 800e2da:	4604      	mov	r4, r0
 800e2dc:	4620      	mov	r0, r4
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	d0fb      	beq.n	800e2dc <__ieee754_sqrtf+0x20>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	da06      	bge.n	800e2f6 <__ieee754_sqrtf+0x3a>
 800e2e8:	4601      	mov	r1, r0
 800e2ea:	f7f2 fc41 	bl	8000b70 <__aeabi_fsub>
 800e2ee:	4601      	mov	r1, r0
 800e2f0:	f7f2 fdfc 	bl	8000eec <__aeabi_fdiv>
 800e2f4:	e7f1      	b.n	800e2da <__ieee754_sqrtf+0x1e>
 800e2f6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e2fa:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e2fe:	d029      	beq.n	800e354 <__ieee754_sqrtf+0x98>
 800e300:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e304:	07cb      	lsls	r3, r1, #31
 800e306:	f04f 0300 	mov.w	r3, #0
 800e30a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e30e:	f04f 0419 	mov.w	r4, #25
 800e312:	461e      	mov	r6, r3
 800e314:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e31c:	bf58      	it	pl
 800e31e:	0052      	lslpl	r2, r2, #1
 800e320:	1040      	asrs	r0, r0, #1
 800e322:	0052      	lsls	r2, r2, #1
 800e324:	1875      	adds	r5, r6, r1
 800e326:	4295      	cmp	r5, r2
 800e328:	bfde      	ittt	le
 800e32a:	186e      	addle	r6, r5, r1
 800e32c:	1b52      	suble	r2, r2, r5
 800e32e:	185b      	addle	r3, r3, r1
 800e330:	3c01      	subs	r4, #1
 800e332:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e336:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e33a:	d1f3      	bne.n	800e324 <__ieee754_sqrtf+0x68>
 800e33c:	b112      	cbz	r2, 800e344 <__ieee754_sqrtf+0x88>
 800e33e:	3301      	adds	r3, #1
 800e340:	f023 0301 	bic.w	r3, r3, #1
 800e344:	105c      	asrs	r4, r3, #1
 800e346:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e34a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e34e:	e7c5      	b.n	800e2dc <__ieee754_sqrtf+0x20>
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	3201      	adds	r2, #1
 800e354:	0218      	lsls	r0, r3, #8
 800e356:	d5fb      	bpl.n	800e350 <__ieee754_sqrtf+0x94>
 800e358:	3a01      	subs	r2, #1
 800e35a:	1a89      	subs	r1, r1, r2
 800e35c:	e7d0      	b.n	800e300 <__ieee754_sqrtf+0x44>
	...

0800e360 <__kernel_cos>:
 800e360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e368:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e36c:	4680      	mov	r8, r0
 800e36e:	460f      	mov	r7, r1
 800e370:	e9cd 2300 	strd	r2, r3, [sp]
 800e374:	da04      	bge.n	800e380 <__kernel_cos+0x20>
 800e376:	f7f2 fb5f 	bl	8000a38 <__aeabi_d2iz>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	f000 8086 	beq.w	800e48c <__kernel_cos+0x12c>
 800e380:	4642      	mov	r2, r8
 800e382:	463b      	mov	r3, r7
 800e384:	4640      	mov	r0, r8
 800e386:	4639      	mov	r1, r7
 800e388:	f7f2 f8a6 	bl	80004d8 <__aeabi_dmul>
 800e38c:	2200      	movs	r2, #0
 800e38e:	4b4e      	ldr	r3, [pc, #312]	; (800e4c8 <__kernel_cos+0x168>)
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	f7f2 f8a0 	bl	80004d8 <__aeabi_dmul>
 800e398:	a33f      	add	r3, pc, #252	; (adr r3, 800e498 <__kernel_cos+0x138>)
 800e39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39e:	4682      	mov	sl, r0
 800e3a0:	468b      	mov	fp, r1
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f7f2 f897 	bl	80004d8 <__aeabi_dmul>
 800e3aa:	a33d      	add	r3, pc, #244	; (adr r3, 800e4a0 <__kernel_cos+0x140>)
 800e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b0:	f7f1 fedc 	bl	800016c <__adddf3>
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	462b      	mov	r3, r5
 800e3b8:	f7f2 f88e 	bl	80004d8 <__aeabi_dmul>
 800e3bc:	a33a      	add	r3, pc, #232	; (adr r3, 800e4a8 <__kernel_cos+0x148>)
 800e3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c2:	f7f1 fed1 	bl	8000168 <__aeabi_dsub>
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	462b      	mov	r3, r5
 800e3ca:	f7f2 f885 	bl	80004d8 <__aeabi_dmul>
 800e3ce:	a338      	add	r3, pc, #224	; (adr r3, 800e4b0 <__kernel_cos+0x150>)
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	f7f1 feca 	bl	800016c <__adddf3>
 800e3d8:	4622      	mov	r2, r4
 800e3da:	462b      	mov	r3, r5
 800e3dc:	f7f2 f87c 	bl	80004d8 <__aeabi_dmul>
 800e3e0:	a335      	add	r3, pc, #212	; (adr r3, 800e4b8 <__kernel_cos+0x158>)
 800e3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e6:	f7f1 febf 	bl	8000168 <__aeabi_dsub>
 800e3ea:	4622      	mov	r2, r4
 800e3ec:	462b      	mov	r3, r5
 800e3ee:	f7f2 f873 	bl	80004d8 <__aeabi_dmul>
 800e3f2:	a333      	add	r3, pc, #204	; (adr r3, 800e4c0 <__kernel_cos+0x160>)
 800e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f8:	f7f1 feb8 	bl	800016c <__adddf3>
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	462b      	mov	r3, r5
 800e400:	f7f2 f86a 	bl	80004d8 <__aeabi_dmul>
 800e404:	4622      	mov	r2, r4
 800e406:	462b      	mov	r3, r5
 800e408:	f7f2 f866 	bl	80004d8 <__aeabi_dmul>
 800e40c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e410:	4604      	mov	r4, r0
 800e412:	460d      	mov	r5, r1
 800e414:	4640      	mov	r0, r8
 800e416:	4639      	mov	r1, r7
 800e418:	f7f2 f85e 	bl	80004d8 <__aeabi_dmul>
 800e41c:	460b      	mov	r3, r1
 800e41e:	4602      	mov	r2, r0
 800e420:	4629      	mov	r1, r5
 800e422:	4620      	mov	r0, r4
 800e424:	f7f1 fea0 	bl	8000168 <__aeabi_dsub>
 800e428:	4b28      	ldr	r3, [pc, #160]	; (800e4cc <__kernel_cos+0x16c>)
 800e42a:	4680      	mov	r8, r0
 800e42c:	429e      	cmp	r6, r3
 800e42e:	4689      	mov	r9, r1
 800e430:	dc0e      	bgt.n	800e450 <__kernel_cos+0xf0>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4650      	mov	r0, sl
 800e438:	4659      	mov	r1, fp
 800e43a:	f7f1 fe95 	bl	8000168 <__aeabi_dsub>
 800e43e:	4602      	mov	r2, r0
 800e440:	2000      	movs	r0, #0
 800e442:	460b      	mov	r3, r1
 800e444:	4922      	ldr	r1, [pc, #136]	; (800e4d0 <__kernel_cos+0x170>)
 800e446:	f7f1 fe8f 	bl	8000168 <__aeabi_dsub>
 800e44a:	b003      	add	sp, #12
 800e44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e450:	2400      	movs	r4, #0
 800e452:	4b20      	ldr	r3, [pc, #128]	; (800e4d4 <__kernel_cos+0x174>)
 800e454:	4622      	mov	r2, r4
 800e456:	429e      	cmp	r6, r3
 800e458:	bfcc      	ite	gt
 800e45a:	4d1f      	ldrgt	r5, [pc, #124]	; (800e4d8 <__kernel_cos+0x178>)
 800e45c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e460:	462b      	mov	r3, r5
 800e462:	2000      	movs	r0, #0
 800e464:	491a      	ldr	r1, [pc, #104]	; (800e4d0 <__kernel_cos+0x170>)
 800e466:	f7f1 fe7f 	bl	8000168 <__aeabi_dsub>
 800e46a:	4622      	mov	r2, r4
 800e46c:	4606      	mov	r6, r0
 800e46e:	460f      	mov	r7, r1
 800e470:	462b      	mov	r3, r5
 800e472:	4650      	mov	r0, sl
 800e474:	4659      	mov	r1, fp
 800e476:	f7f1 fe77 	bl	8000168 <__aeabi_dsub>
 800e47a:	4642      	mov	r2, r8
 800e47c:	464b      	mov	r3, r9
 800e47e:	f7f1 fe73 	bl	8000168 <__aeabi_dsub>
 800e482:	4602      	mov	r2, r0
 800e484:	460b      	mov	r3, r1
 800e486:	4630      	mov	r0, r6
 800e488:	4639      	mov	r1, r7
 800e48a:	e7dc      	b.n	800e446 <__kernel_cos+0xe6>
 800e48c:	2000      	movs	r0, #0
 800e48e:	4910      	ldr	r1, [pc, #64]	; (800e4d0 <__kernel_cos+0x170>)
 800e490:	e7db      	b.n	800e44a <__kernel_cos+0xea>
 800e492:	bf00      	nop
 800e494:	f3af 8000 	nop.w
 800e498:	be8838d4 	.word	0xbe8838d4
 800e49c:	bda8fae9 	.word	0xbda8fae9
 800e4a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e4a4:	3e21ee9e 	.word	0x3e21ee9e
 800e4a8:	809c52ad 	.word	0x809c52ad
 800e4ac:	3e927e4f 	.word	0x3e927e4f
 800e4b0:	19cb1590 	.word	0x19cb1590
 800e4b4:	3efa01a0 	.word	0x3efa01a0
 800e4b8:	16c15177 	.word	0x16c15177
 800e4bc:	3f56c16c 	.word	0x3f56c16c
 800e4c0:	5555554c 	.word	0x5555554c
 800e4c4:	3fa55555 	.word	0x3fa55555
 800e4c8:	3fe00000 	.word	0x3fe00000
 800e4cc:	3fd33332 	.word	0x3fd33332
 800e4d0:	3ff00000 	.word	0x3ff00000
 800e4d4:	3fe90000 	.word	0x3fe90000
 800e4d8:	3fd20000 	.word	0x3fd20000

0800e4dc <__kernel_rem_pio2>:
 800e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e4e4:	9308      	str	r3, [sp, #32]
 800e4e6:	9101      	str	r1, [sp, #4]
 800e4e8:	4bc0      	ldr	r3, [pc, #768]	; (800e7ec <__kernel_rem_pio2+0x310>)
 800e4ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e4ec:	f112 0f14 	cmn.w	r2, #20
 800e4f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4f4:	bfa8      	it	ge
 800e4f6:	1ed4      	subge	r4, r2, #3
 800e4f8:	9304      	str	r3, [sp, #16]
 800e4fa:	9b08      	ldr	r3, [sp, #32]
 800e4fc:	bfb8      	it	lt
 800e4fe:	2400      	movlt	r4, #0
 800e500:	f103 33ff 	add.w	r3, r3, #4294967295
 800e504:	9306      	str	r3, [sp, #24]
 800e506:	bfa4      	itt	ge
 800e508:	2318      	movge	r3, #24
 800e50a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e50e:	f06f 0317 	mvn.w	r3, #23
 800e512:	fb04 3303 	mla	r3, r4, r3, r3
 800e516:	eb03 0a02 	add.w	sl, r3, r2
 800e51a:	9a06      	ldr	r2, [sp, #24]
 800e51c:	9b04      	ldr	r3, [sp, #16]
 800e51e:	1aa7      	subs	r7, r4, r2
 800e520:	eb03 0802 	add.w	r8, r3, r2
 800e524:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e526:	2500      	movs	r5, #0
 800e528:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e52c:	2200      	movs	r2, #0
 800e52e:	2300      	movs	r3, #0
 800e530:	9009      	str	r0, [sp, #36]	; 0x24
 800e532:	ae20      	add	r6, sp, #128	; 0x80
 800e534:	4545      	cmp	r5, r8
 800e536:	dd19      	ble.n	800e56c <__kernel_rem_pio2+0x90>
 800e538:	9b08      	ldr	r3, [sp, #32]
 800e53a:	aa20      	add	r2, sp, #128	; 0x80
 800e53c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e540:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e544:	f1c3 0301 	rsb	r3, r3, #1
 800e548:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e54c:	9307      	str	r3, [sp, #28]
 800e54e:	9b07      	ldr	r3, [sp, #28]
 800e550:	9a04      	ldr	r2, [sp, #16]
 800e552:	4443      	add	r3, r8
 800e554:	429a      	cmp	r2, r3
 800e556:	db35      	blt.n	800e5c4 <__kernel_rem_pio2+0xe8>
 800e558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e55a:	2200      	movs	r2, #0
 800e55c:	f1a3 0908 	sub.w	r9, r3, #8
 800e560:	2300      	movs	r3, #0
 800e562:	462f      	mov	r7, r5
 800e564:	2600      	movs	r6, #0
 800e566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e56a:	e01f      	b.n	800e5ac <__kernel_rem_pio2+0xd0>
 800e56c:	42ef      	cmn	r7, r5
 800e56e:	d40b      	bmi.n	800e588 <__kernel_rem_pio2+0xac>
 800e570:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e578:	f7f1 ff44 	bl	8000404 <__aeabi_i2d>
 800e57c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e580:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e584:	3501      	adds	r5, #1
 800e586:	e7d5      	b.n	800e534 <__kernel_rem_pio2+0x58>
 800e588:	4610      	mov	r0, r2
 800e58a:	4619      	mov	r1, r3
 800e58c:	e7f8      	b.n	800e580 <__kernel_rem_pio2+0xa4>
 800e58e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e592:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e596:	f7f1 ff9f 	bl	80004d8 <__aeabi_dmul>
 800e59a:	4602      	mov	r2, r0
 800e59c:	460b      	mov	r3, r1
 800e59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5a2:	f7f1 fde3 	bl	800016c <__adddf3>
 800e5a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5aa:	3601      	adds	r6, #1
 800e5ac:	9b06      	ldr	r3, [sp, #24]
 800e5ae:	3f08      	subs	r7, #8
 800e5b0:	429e      	cmp	r6, r3
 800e5b2:	ddec      	ble.n	800e58e <__kernel_rem_pio2+0xb2>
 800e5b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5b8:	3508      	adds	r5, #8
 800e5ba:	e8eb 2302 	strd	r2, r3, [fp], #8
 800e5be:	f108 0801 	add.w	r8, r8, #1
 800e5c2:	e7c4      	b.n	800e54e <__kernel_rem_pio2+0x72>
 800e5c4:	9b04      	ldr	r3, [sp, #16]
 800e5c6:	aa0c      	add	r2, sp, #48	; 0x30
 800e5c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5ce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e5d0:	9f04      	ldr	r7, [sp, #16]
 800e5d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e5d8:	463e      	mov	r6, r7
 800e5da:	ab98      	add	r3, sp, #608	; 0x260
 800e5dc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e5e0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e5e4:	f8cd b008 	str.w	fp, [sp, #8]
 800e5e8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e5ec:	2e00      	cmp	r6, #0
 800e5ee:	dc71      	bgt.n	800e6d4 <__kernel_rem_pio2+0x1f8>
 800e5f0:	4652      	mov	r2, sl
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	f001 fa5b 	bl	800fab0 <scalbn>
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e600:	4604      	mov	r4, r0
 800e602:	460d      	mov	r5, r1
 800e604:	f7f1 ff68 	bl	80004d8 <__aeabi_dmul>
 800e608:	f001 f9d2 	bl	800f9b0 <floor>
 800e60c:	2200      	movs	r2, #0
 800e60e:	4b78      	ldr	r3, [pc, #480]	; (800e7f0 <__kernel_rem_pio2+0x314>)
 800e610:	f7f1 ff62 	bl	80004d8 <__aeabi_dmul>
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	4620      	mov	r0, r4
 800e61a:	4629      	mov	r1, r5
 800e61c:	f7f1 fda4 	bl	8000168 <__aeabi_dsub>
 800e620:	460d      	mov	r5, r1
 800e622:	4604      	mov	r4, r0
 800e624:	f7f2 fa08 	bl	8000a38 <__aeabi_d2iz>
 800e628:	9007      	str	r0, [sp, #28]
 800e62a:	f7f1 feeb 	bl	8000404 <__aeabi_i2d>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	4620      	mov	r0, r4
 800e634:	4629      	mov	r1, r5
 800e636:	f7f1 fd97 	bl	8000168 <__aeabi_dsub>
 800e63a:	f1ba 0f00 	cmp.w	sl, #0
 800e63e:	4680      	mov	r8, r0
 800e640:	4689      	mov	r9, r1
 800e642:	dd70      	ble.n	800e726 <__kernel_rem_pio2+0x24a>
 800e644:	1e7a      	subs	r2, r7, #1
 800e646:	ab0c      	add	r3, sp, #48	; 0x30
 800e648:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e64c:	9c07      	ldr	r4, [sp, #28]
 800e64e:	f1ca 0118 	rsb	r1, sl, #24
 800e652:	fa40 f301 	asr.w	r3, r0, r1
 800e656:	441c      	add	r4, r3
 800e658:	408b      	lsls	r3, r1
 800e65a:	1ac0      	subs	r0, r0, r3
 800e65c:	ab0c      	add	r3, sp, #48	; 0x30
 800e65e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e662:	f1ca 0317 	rsb	r3, sl, #23
 800e666:	9407      	str	r4, [sp, #28]
 800e668:	fa40 f303 	asr.w	r3, r0, r3
 800e66c:	9302      	str	r3, [sp, #8]
 800e66e:	9b02      	ldr	r3, [sp, #8]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dd66      	ble.n	800e742 <__kernel_rem_pio2+0x266>
 800e674:	2200      	movs	r2, #0
 800e676:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e67a:	4614      	mov	r4, r2
 800e67c:	9b07      	ldr	r3, [sp, #28]
 800e67e:	3301      	adds	r3, #1
 800e680:	9307      	str	r3, [sp, #28]
 800e682:	4297      	cmp	r7, r2
 800e684:	f300 809f 	bgt.w	800e7c6 <__kernel_rem_pio2+0x2ea>
 800e688:	f1ba 0f00 	cmp.w	sl, #0
 800e68c:	dd07      	ble.n	800e69e <__kernel_rem_pio2+0x1c2>
 800e68e:	f1ba 0f01 	cmp.w	sl, #1
 800e692:	f000 80b9 	beq.w	800e808 <__kernel_rem_pio2+0x32c>
 800e696:	f1ba 0f02 	cmp.w	sl, #2
 800e69a:	f000 80bf 	beq.w	800e81c <__kernel_rem_pio2+0x340>
 800e69e:	9b02      	ldr	r3, [sp, #8]
 800e6a0:	2b02      	cmp	r3, #2
 800e6a2:	d14e      	bne.n	800e742 <__kernel_rem_pio2+0x266>
 800e6a4:	4642      	mov	r2, r8
 800e6a6:	464b      	mov	r3, r9
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	4952      	ldr	r1, [pc, #328]	; (800e7f4 <__kernel_rem_pio2+0x318>)
 800e6ac:	f7f1 fd5c 	bl	8000168 <__aeabi_dsub>
 800e6b0:	4680      	mov	r8, r0
 800e6b2:	4689      	mov	r9, r1
 800e6b4:	2c00      	cmp	r4, #0
 800e6b6:	d044      	beq.n	800e742 <__kernel_rem_pio2+0x266>
 800e6b8:	4652      	mov	r2, sl
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	494d      	ldr	r1, [pc, #308]	; (800e7f4 <__kernel_rem_pio2+0x318>)
 800e6be:	f001 f9f7 	bl	800fab0 <scalbn>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	f7f1 fd4d 	bl	8000168 <__aeabi_dsub>
 800e6ce:	4680      	mov	r8, r0
 800e6d0:	4689      	mov	r9, r1
 800e6d2:	e036      	b.n	800e742 <__kernel_rem_pio2+0x266>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	4b48      	ldr	r3, [pc, #288]	; (800e7f8 <__kernel_rem_pio2+0x31c>)
 800e6d8:	4620      	mov	r0, r4
 800e6da:	4629      	mov	r1, r5
 800e6dc:	f7f1 fefc 	bl	80004d8 <__aeabi_dmul>
 800e6e0:	f7f2 f9aa 	bl	8000a38 <__aeabi_d2iz>
 800e6e4:	f7f1 fe8e 	bl	8000404 <__aeabi_i2d>
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	4b44      	ldr	r3, [pc, #272]	; (800e7fc <__kernel_rem_pio2+0x320>)
 800e6ec:	4680      	mov	r8, r0
 800e6ee:	4689      	mov	r9, r1
 800e6f0:	f7f1 fef2 	bl	80004d8 <__aeabi_dmul>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	f7f1 fd34 	bl	8000168 <__aeabi_dsub>
 800e700:	f7f2 f99a 	bl	8000a38 <__aeabi_d2iz>
 800e704:	9b02      	ldr	r3, [sp, #8]
 800e706:	3e01      	subs	r6, #1
 800e708:	f843 0b04 	str.w	r0, [r3], #4
 800e70c:	9302      	str	r3, [sp, #8]
 800e70e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e710:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e714:	4640      	mov	r0, r8
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	4649      	mov	r1, r9
 800e71c:	f7f1 fd26 	bl	800016c <__adddf3>
 800e720:	4604      	mov	r4, r0
 800e722:	460d      	mov	r5, r1
 800e724:	e762      	b.n	800e5ec <__kernel_rem_pio2+0x110>
 800e726:	d105      	bne.n	800e734 <__kernel_rem_pio2+0x258>
 800e728:	1e7b      	subs	r3, r7, #1
 800e72a:	aa0c      	add	r2, sp, #48	; 0x30
 800e72c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e730:	15c3      	asrs	r3, r0, #23
 800e732:	e79b      	b.n	800e66c <__kernel_rem_pio2+0x190>
 800e734:	2200      	movs	r2, #0
 800e736:	4b32      	ldr	r3, [pc, #200]	; (800e800 <__kernel_rem_pio2+0x324>)
 800e738:	f7f2 f954 	bl	80009e4 <__aeabi_dcmpge>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d13f      	bne.n	800e7c0 <__kernel_rem_pio2+0x2e4>
 800e740:	9002      	str	r0, [sp, #8]
 800e742:	2200      	movs	r2, #0
 800e744:	2300      	movs	r3, #0
 800e746:	4640      	mov	r0, r8
 800e748:	4649      	mov	r1, r9
 800e74a:	f7f2 f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800e74e:	2800      	cmp	r0, #0
 800e750:	f000 80b5 	beq.w	800e8be <__kernel_rem_pio2+0x3e2>
 800e754:	1e7c      	subs	r4, r7, #1
 800e756:	4623      	mov	r3, r4
 800e758:	2200      	movs	r2, #0
 800e75a:	9904      	ldr	r1, [sp, #16]
 800e75c:	428b      	cmp	r3, r1
 800e75e:	da64      	bge.n	800e82a <__kernel_rem_pio2+0x34e>
 800e760:	2a00      	cmp	r2, #0
 800e762:	d078      	beq.n	800e856 <__kernel_rem_pio2+0x37a>
 800e764:	ab0c      	add	r3, sp, #48	; 0x30
 800e766:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e76a:	f1aa 0a18 	sub.w	sl, sl, #24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 80a3 	beq.w	800e8ba <__kernel_rem_pio2+0x3de>
 800e774:	4652      	mov	r2, sl
 800e776:	2000      	movs	r0, #0
 800e778:	491e      	ldr	r1, [pc, #120]	; (800e7f4 <__kernel_rem_pio2+0x318>)
 800e77a:	f001 f999 	bl	800fab0 <scalbn>
 800e77e:	46a2      	mov	sl, r4
 800e780:	4606      	mov	r6, r0
 800e782:	460f      	mov	r7, r1
 800e784:	f04f 0800 	mov.w	r8, #0
 800e788:	00e3      	lsls	r3, r4, #3
 800e78a:	9306      	str	r3, [sp, #24]
 800e78c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800e7f8 <__kernel_rem_pio2+0x31c>
 800e790:	ab70      	add	r3, sp, #448	; 0x1c0
 800e792:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800e796:	f1ba 0f00 	cmp.w	sl, #0
 800e79a:	f280 80c6 	bge.w	800e92a <__kernel_rem_pio2+0x44e>
 800e79e:	4627      	mov	r7, r4
 800e7a0:	f04f 0800 	mov.w	r8, #0
 800e7a4:	2f00      	cmp	r7, #0
 800e7a6:	f2c0 80f3 	blt.w	800e990 <__kernel_rem_pio2+0x4b4>
 800e7aa:	4b16      	ldr	r3, [pc, #88]	; (800e804 <__kernel_rem_pio2+0x328>)
 800e7ac:	f04f 0a00 	mov.w	sl, #0
 800e7b0:	461d      	mov	r5, r3
 800e7b2:	ab70      	add	r3, sp, #448	; 0x1c0
 800e7b4:	f04f 0b00 	mov.w	fp, #0
 800e7b8:	2600      	movs	r6, #0
 800e7ba:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e7be:	e0d9      	b.n	800e974 <__kernel_rem_pio2+0x498>
 800e7c0:	2302      	movs	r3, #2
 800e7c2:	9302      	str	r3, [sp, #8]
 800e7c4:	e756      	b.n	800e674 <__kernel_rem_pio2+0x198>
 800e7c6:	f8db 3000 	ldr.w	r3, [fp]
 800e7ca:	b954      	cbnz	r4, 800e7e2 <__kernel_rem_pio2+0x306>
 800e7cc:	b123      	cbz	r3, 800e7d8 <__kernel_rem_pio2+0x2fc>
 800e7ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e7d2:	f8cb 3000 	str.w	r3, [fp]
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	461c      	mov	r4, r3
 800e7da:	3201      	adds	r2, #1
 800e7dc:	f10b 0b04 	add.w	fp, fp, #4
 800e7e0:	e74f      	b.n	800e682 <__kernel_rem_pio2+0x1a6>
 800e7e2:	1acb      	subs	r3, r1, r3
 800e7e4:	f8cb 3000 	str.w	r3, [fp]
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	e7f5      	b.n	800e7d8 <__kernel_rem_pio2+0x2fc>
 800e7ec:	08010e08 	.word	0x08010e08
 800e7f0:	40200000 	.word	0x40200000
 800e7f4:	3ff00000 	.word	0x3ff00000
 800e7f8:	3e700000 	.word	0x3e700000
 800e7fc:	41700000 	.word	0x41700000
 800e800:	3fe00000 	.word	0x3fe00000
 800e804:	08010dc8 	.word	0x08010dc8
 800e808:	1e7a      	subs	r2, r7, #1
 800e80a:	ab0c      	add	r3, sp, #48	; 0x30
 800e80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e810:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e814:	a90c      	add	r1, sp, #48	; 0x30
 800e816:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e81a:	e740      	b.n	800e69e <__kernel_rem_pio2+0x1c2>
 800e81c:	1e7a      	subs	r2, r7, #1
 800e81e:	ab0c      	add	r3, sp, #48	; 0x30
 800e820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e824:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e828:	e7f4      	b.n	800e814 <__kernel_rem_pio2+0x338>
 800e82a:	a90c      	add	r1, sp, #48	; 0x30
 800e82c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e830:	3b01      	subs	r3, #1
 800e832:	430a      	orrs	r2, r1
 800e834:	e791      	b.n	800e75a <__kernel_rem_pio2+0x27e>
 800e836:	3401      	adds	r4, #1
 800e838:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e83c:	2a00      	cmp	r2, #0
 800e83e:	d0fa      	beq.n	800e836 <__kernel_rem_pio2+0x35a>
 800e840:	9b08      	ldr	r3, [sp, #32]
 800e842:	1c7e      	adds	r6, r7, #1
 800e844:	18fd      	adds	r5, r7, r3
 800e846:	ab20      	add	r3, sp, #128	; 0x80
 800e848:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e84c:	443c      	add	r4, r7
 800e84e:	42b4      	cmp	r4, r6
 800e850:	da04      	bge.n	800e85c <__kernel_rem_pio2+0x380>
 800e852:	4627      	mov	r7, r4
 800e854:	e6c0      	b.n	800e5d8 <__kernel_rem_pio2+0xfc>
 800e856:	2401      	movs	r4, #1
 800e858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e85a:	e7ed      	b.n	800e838 <__kernel_rem_pio2+0x35c>
 800e85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e85e:	462f      	mov	r7, r5
 800e860:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e864:	f7f1 fdce 	bl	8000404 <__aeabi_i2d>
 800e868:	f04f 0b00 	mov.w	fp, #0
 800e86c:	f04f 0800 	mov.w	r8, #0
 800e870:	f04f 0900 	mov.w	r9, #0
 800e874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e876:	e8e7 0102 	strd	r0, r1, [r7], #8
 800e87a:	3b08      	subs	r3, #8
 800e87c:	9302      	str	r3, [sp, #8]
 800e87e:	9b06      	ldr	r3, [sp, #24]
 800e880:	459b      	cmp	fp, r3
 800e882:	dd07      	ble.n	800e894 <__kernel_rem_pio2+0x3b8>
 800e884:	ab70      	add	r3, sp, #448	; 0x1c0
 800e886:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e88a:	463d      	mov	r5, r7
 800e88c:	e9c3 8900 	strd	r8, r9, [r3]
 800e890:	3601      	adds	r6, #1
 800e892:	e7dc      	b.n	800e84e <__kernel_rem_pio2+0x372>
 800e894:	9902      	ldr	r1, [sp, #8]
 800e896:	f10b 0b01 	add.w	fp, fp, #1
 800e89a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800e89e:	9102      	str	r1, [sp, #8]
 800e8a0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800e8a4:	f7f1 fe18 	bl	80004d8 <__aeabi_dmul>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	4640      	mov	r0, r8
 800e8ae:	4649      	mov	r1, r9
 800e8b0:	f7f1 fc5c 	bl	800016c <__adddf3>
 800e8b4:	4680      	mov	r8, r0
 800e8b6:	4689      	mov	r9, r1
 800e8b8:	e7e1      	b.n	800e87e <__kernel_rem_pio2+0x3a2>
 800e8ba:	3c01      	subs	r4, #1
 800e8bc:	e752      	b.n	800e764 <__kernel_rem_pio2+0x288>
 800e8be:	f1ca 0200 	rsb	r2, sl, #0
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	4649      	mov	r1, r9
 800e8c6:	f001 f8f3 	bl	800fab0 <scalbn>
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	4ba5      	ldr	r3, [pc, #660]	; (800eb64 <__kernel_rem_pio2+0x688>)
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	460d      	mov	r5, r1
 800e8d2:	f7f2 f887 	bl	80009e4 <__aeabi_dcmpge>
 800e8d6:	b1f8      	cbz	r0, 800e918 <__kernel_rem_pio2+0x43c>
 800e8d8:	2200      	movs	r2, #0
 800e8da:	4ba3      	ldr	r3, [pc, #652]	; (800eb68 <__kernel_rem_pio2+0x68c>)
 800e8dc:	4620      	mov	r0, r4
 800e8de:	4629      	mov	r1, r5
 800e8e0:	f7f1 fdfa 	bl	80004d8 <__aeabi_dmul>
 800e8e4:	f7f2 f8a8 	bl	8000a38 <__aeabi_d2iz>
 800e8e8:	4606      	mov	r6, r0
 800e8ea:	f7f1 fd8b 	bl	8000404 <__aeabi_i2d>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	4b9c      	ldr	r3, [pc, #624]	; (800eb64 <__kernel_rem_pio2+0x688>)
 800e8f2:	f7f1 fdf1 	bl	80004d8 <__aeabi_dmul>
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f7f1 fc33 	bl	8000168 <__aeabi_dsub>
 800e902:	f7f2 f899 	bl	8000a38 <__aeabi_d2iz>
 800e906:	1c7c      	adds	r4, r7, #1
 800e908:	ab0c      	add	r3, sp, #48	; 0x30
 800e90a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e90e:	f10a 0a18 	add.w	sl, sl, #24
 800e912:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800e916:	e72d      	b.n	800e774 <__kernel_rem_pio2+0x298>
 800e918:	4620      	mov	r0, r4
 800e91a:	4629      	mov	r1, r5
 800e91c:	f7f2 f88c 	bl	8000a38 <__aeabi_d2iz>
 800e920:	ab0c      	add	r3, sp, #48	; 0x30
 800e922:	463c      	mov	r4, r7
 800e924:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e928:	e724      	b.n	800e774 <__kernel_rem_pio2+0x298>
 800e92a:	ab0c      	add	r3, sp, #48	; 0x30
 800e92c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e930:	f7f1 fd68 	bl	8000404 <__aeabi_i2d>
 800e934:	4632      	mov	r2, r6
 800e936:	463b      	mov	r3, r7
 800e938:	f7f1 fdce 	bl	80004d8 <__aeabi_dmul>
 800e93c:	4642      	mov	r2, r8
 800e93e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800e942:	464b      	mov	r3, r9
 800e944:	4630      	mov	r0, r6
 800e946:	4639      	mov	r1, r7
 800e948:	f7f1 fdc6 	bl	80004d8 <__aeabi_dmul>
 800e94c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e950:	4606      	mov	r6, r0
 800e952:	460f      	mov	r7, r1
 800e954:	e71f      	b.n	800e796 <__kernel_rem_pio2+0x2ba>
 800e956:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e95a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800e95e:	f7f1 fdbb 	bl	80004d8 <__aeabi_dmul>
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	4650      	mov	r0, sl
 800e968:	4659      	mov	r1, fp
 800e96a:	f7f1 fbff 	bl	800016c <__adddf3>
 800e96e:	4682      	mov	sl, r0
 800e970:	468b      	mov	fp, r1
 800e972:	3601      	adds	r6, #1
 800e974:	9b04      	ldr	r3, [sp, #16]
 800e976:	429e      	cmp	r6, r3
 800e978:	dc01      	bgt.n	800e97e <__kernel_rem_pio2+0x4a2>
 800e97a:	45b0      	cmp	r8, r6
 800e97c:	daeb      	bge.n	800e956 <__kernel_rem_pio2+0x47a>
 800e97e:	ab48      	add	r3, sp, #288	; 0x120
 800e980:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e984:	e9c3 ab00 	strd	sl, fp, [r3]
 800e988:	3f01      	subs	r7, #1
 800e98a:	f108 0801 	add.w	r8, r8, #1
 800e98e:	e709      	b.n	800e7a4 <__kernel_rem_pio2+0x2c8>
 800e990:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e992:	2b02      	cmp	r3, #2
 800e994:	dc09      	bgt.n	800e9aa <__kernel_rem_pio2+0x4ce>
 800e996:	2b00      	cmp	r3, #0
 800e998:	dc34      	bgt.n	800ea04 <__kernel_rem_pio2+0x528>
 800e99a:	d05e      	beq.n	800ea5a <__kernel_rem_pio2+0x57e>
 800e99c:	9b07      	ldr	r3, [sp, #28]
 800e99e:	f003 0007 	and.w	r0, r3, #7
 800e9a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9aa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e9ac:	2b03      	cmp	r3, #3
 800e9ae:	d1f5      	bne.n	800e99c <__kernel_rem_pio2+0x4c0>
 800e9b0:	9a06      	ldr	r2, [sp, #24]
 800e9b2:	ab48      	add	r3, sp, #288	; 0x120
 800e9b4:	441a      	add	r2, r3
 800e9b6:	4615      	mov	r5, r2
 800e9b8:	4692      	mov	sl, r2
 800e9ba:	46a3      	mov	fp, r4
 800e9bc:	f1bb 0f00 	cmp.w	fp, #0
 800e9c0:	dc7a      	bgt.n	800eab8 <__kernel_rem_pio2+0x5dc>
 800e9c2:	46aa      	mov	sl, r5
 800e9c4:	46a3      	mov	fp, r4
 800e9c6:	f1bb 0f01 	cmp.w	fp, #1
 800e9ca:	f300 8094 	bgt.w	800eaf6 <__kernel_rem_pio2+0x61a>
 800e9ce:	2700      	movs	r7, #0
 800e9d0:	463e      	mov	r6, r7
 800e9d2:	2c01      	cmp	r4, #1
 800e9d4:	f300 80ae 	bgt.w	800eb34 <__kernel_rem_pio2+0x658>
 800e9d8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800e9dc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800e9e0:	9b02      	ldr	r3, [sp, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f040 80b0 	bne.w	800eb48 <__kernel_rem_pio2+0x66c>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	462a      	mov	r2, r5
 800e9ec:	9801      	ldr	r0, [sp, #4]
 800e9ee:	e9c0 2300 	strd	r2, r3, [r0]
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e9fa:	463a      	mov	r2, r7
 800e9fc:	4633      	mov	r3, r6
 800e9fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ea02:	e7cb      	b.n	800e99c <__kernel_rem_pio2+0x4c0>
 800ea04:	2000      	movs	r0, #0
 800ea06:	9a06      	ldr	r2, [sp, #24]
 800ea08:	ab48      	add	r3, sp, #288	; 0x120
 800ea0a:	441a      	add	r2, r3
 800ea0c:	4615      	mov	r5, r2
 800ea0e:	46a0      	mov	r8, r4
 800ea10:	4601      	mov	r1, r0
 800ea12:	f1b8 0f00 	cmp.w	r8, #0
 800ea16:	da3c      	bge.n	800ea92 <__kernel_rem_pio2+0x5b6>
 800ea18:	9b02      	ldr	r3, [sp, #8]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d040      	beq.n	800eaa0 <__kernel_rem_pio2+0x5c4>
 800ea1e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ea22:	4602      	mov	r2, r0
 800ea24:	462b      	mov	r3, r5
 800ea26:	9d01      	ldr	r5, [sp, #4]
 800ea28:	2601      	movs	r6, #1
 800ea2a:	e9c5 2300 	strd	r2, r3, [r5]
 800ea2e:	460b      	mov	r3, r1
 800ea30:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ea34:	f7f1 fb98 	bl	8000168 <__aeabi_dsub>
 800ea38:	4684      	mov	ip, r0
 800ea3a:	460f      	mov	r7, r1
 800ea3c:	ad48      	add	r5, sp, #288	; 0x120
 800ea3e:	42b4      	cmp	r4, r6
 800ea40:	f105 0508 	add.w	r5, r5, #8
 800ea44:	da2e      	bge.n	800eaa4 <__kernel_rem_pio2+0x5c8>
 800ea46:	9b02      	ldr	r3, [sp, #8]
 800ea48:	b10b      	cbz	r3, 800ea4e <__kernel_rem_pio2+0x572>
 800ea4a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ea4e:	4662      	mov	r2, ip
 800ea50:	463b      	mov	r3, r7
 800ea52:	9901      	ldr	r1, [sp, #4]
 800ea54:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ea58:	e7a0      	b.n	800e99c <__kernel_rem_pio2+0x4c0>
 800ea5a:	9a06      	ldr	r2, [sp, #24]
 800ea5c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ea5e:	ab48      	add	r3, sp, #288	; 0x120
 800ea60:	441a      	add	r2, r3
 800ea62:	4615      	mov	r5, r2
 800ea64:	4637      	mov	r7, r6
 800ea66:	2c00      	cmp	r4, #0
 800ea68:	da09      	bge.n	800ea7e <__kernel_rem_pio2+0x5a2>
 800ea6a:	9b02      	ldr	r3, [sp, #8]
 800ea6c:	b10b      	cbz	r3, 800ea72 <__kernel_rem_pio2+0x596>
 800ea6e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ea72:	4632      	mov	r2, r6
 800ea74:	463b      	mov	r3, r7
 800ea76:	9901      	ldr	r1, [sp, #4]
 800ea78:	e9c1 2300 	strd	r2, r3, [r1]
 800ea7c:	e78e      	b.n	800e99c <__kernel_rem_pio2+0x4c0>
 800ea7e:	4630      	mov	r0, r6
 800ea80:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ea84:	4639      	mov	r1, r7
 800ea86:	f7f1 fb71 	bl	800016c <__adddf3>
 800ea8a:	3c01      	subs	r4, #1
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	e7e9      	b.n	800ea66 <__kernel_rem_pio2+0x58a>
 800ea92:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ea96:	f7f1 fb69 	bl	800016c <__adddf3>
 800ea9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea9e:	e7b8      	b.n	800ea12 <__kernel_rem_pio2+0x536>
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	e7be      	b.n	800ea22 <__kernel_rem_pio2+0x546>
 800eaa4:	4660      	mov	r0, ip
 800eaa6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaaa:	4639      	mov	r1, r7
 800eaac:	f7f1 fb5e 	bl	800016c <__adddf3>
 800eab0:	3601      	adds	r6, #1
 800eab2:	4684      	mov	ip, r0
 800eab4:	460f      	mov	r7, r1
 800eab6:	e7c2      	b.n	800ea3e <__kernel_rem_pio2+0x562>
 800eab8:	e9da 6700 	ldrd	r6, r7, [sl]
 800eabc:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800eac0:	4632      	mov	r2, r6
 800eac2:	463b      	mov	r3, r7
 800eac4:	4640      	mov	r0, r8
 800eac6:	4649      	mov	r1, r9
 800eac8:	f7f1 fb50 	bl	800016c <__adddf3>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ead4:	4640      	mov	r0, r8
 800ead6:	4649      	mov	r1, r9
 800ead8:	f7f1 fb46 	bl	8000168 <__aeabi_dsub>
 800eadc:	4632      	mov	r2, r6
 800eade:	463b      	mov	r3, r7
 800eae0:	f7f1 fb44 	bl	800016c <__adddf3>
 800eae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eae8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800eaec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eaf0:	e9ca 2300 	strd	r2, r3, [sl]
 800eaf4:	e762      	b.n	800e9bc <__kernel_rem_pio2+0x4e0>
 800eaf6:	e9da 8900 	ldrd	r8, r9, [sl]
 800eafa:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800eafe:	4642      	mov	r2, r8
 800eb00:	464b      	mov	r3, r9
 800eb02:	4630      	mov	r0, r6
 800eb04:	4639      	mov	r1, r7
 800eb06:	f7f1 fb31 	bl	800016c <__adddf3>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb12:	4630      	mov	r0, r6
 800eb14:	4639      	mov	r1, r7
 800eb16:	f7f1 fb27 	bl	8000168 <__aeabi_dsub>
 800eb1a:	4642      	mov	r2, r8
 800eb1c:	464b      	mov	r3, r9
 800eb1e:	f7f1 fb25 	bl	800016c <__adddf3>
 800eb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb26:	e86a 0102 	strd	r0, r1, [sl], #-8
 800eb2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb2e:	e9ca 2300 	strd	r2, r3, [sl]
 800eb32:	e748      	b.n	800e9c6 <__kernel_rem_pio2+0x4ea>
 800eb34:	4638      	mov	r0, r7
 800eb36:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800eb3a:	4631      	mov	r1, r6
 800eb3c:	f7f1 fb16 	bl	800016c <__adddf3>
 800eb40:	3c01      	subs	r4, #1
 800eb42:	4607      	mov	r7, r0
 800eb44:	460e      	mov	r6, r1
 800eb46:	e744      	b.n	800e9d2 <__kernel_rem_pio2+0x4f6>
 800eb48:	9b01      	ldr	r3, [sp, #4]
 800eb4a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800eb4e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800eb52:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800eb56:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800eb5a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800eb5e:	601d      	str	r5, [r3, #0]
 800eb60:	615e      	str	r6, [r3, #20]
 800eb62:	e71b      	b.n	800e99c <__kernel_rem_pio2+0x4c0>
 800eb64:	41700000 	.word	0x41700000
 800eb68:	3e700000 	.word	0x3e700000
 800eb6c:	00000000 	.word	0x00000000

0800eb70 <__kernel_sin>:
 800eb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb74:	b086      	sub	sp, #24
 800eb76:	e9cd 2300 	strd	r2, r3, [sp]
 800eb7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800eb82:	4682      	mov	sl, r0
 800eb84:	460c      	mov	r4, r1
 800eb86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800eb88:	da03      	bge.n	800eb92 <__kernel_sin+0x22>
 800eb8a:	f7f1 ff55 	bl	8000a38 <__aeabi_d2iz>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d050      	beq.n	800ec34 <__kernel_sin+0xc4>
 800eb92:	4652      	mov	r2, sl
 800eb94:	4623      	mov	r3, r4
 800eb96:	4650      	mov	r0, sl
 800eb98:	4621      	mov	r1, r4
 800eb9a:	f7f1 fc9d 	bl	80004d8 <__aeabi_dmul>
 800eb9e:	4606      	mov	r6, r0
 800eba0:	460f      	mov	r7, r1
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	4650      	mov	r0, sl
 800eba8:	4621      	mov	r1, r4
 800ebaa:	f7f1 fc95 	bl	80004d8 <__aeabi_dmul>
 800ebae:	a33e      	add	r3, pc, #248	; (adr r3, 800eca8 <__kernel_sin+0x138>)
 800ebb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb4:	4680      	mov	r8, r0
 800ebb6:	4689      	mov	r9, r1
 800ebb8:	4630      	mov	r0, r6
 800ebba:	4639      	mov	r1, r7
 800ebbc:	f7f1 fc8c 	bl	80004d8 <__aeabi_dmul>
 800ebc0:	a33b      	add	r3, pc, #236	; (adr r3, 800ecb0 <__kernel_sin+0x140>)
 800ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc6:	f7f1 facf 	bl	8000168 <__aeabi_dsub>
 800ebca:	4632      	mov	r2, r6
 800ebcc:	463b      	mov	r3, r7
 800ebce:	f7f1 fc83 	bl	80004d8 <__aeabi_dmul>
 800ebd2:	a339      	add	r3, pc, #228	; (adr r3, 800ecb8 <__kernel_sin+0x148>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fac8 	bl	800016c <__adddf3>
 800ebdc:	4632      	mov	r2, r6
 800ebde:	463b      	mov	r3, r7
 800ebe0:	f7f1 fc7a 	bl	80004d8 <__aeabi_dmul>
 800ebe4:	a336      	add	r3, pc, #216	; (adr r3, 800ecc0 <__kernel_sin+0x150>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	f7f1 fabd 	bl	8000168 <__aeabi_dsub>
 800ebee:	4632      	mov	r2, r6
 800ebf0:	463b      	mov	r3, r7
 800ebf2:	f7f1 fc71 	bl	80004d8 <__aeabi_dmul>
 800ebf6:	a334      	add	r3, pc, #208	; (adr r3, 800ecc8 <__kernel_sin+0x158>)
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	f7f1 fab6 	bl	800016c <__adddf3>
 800ec00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec04:	b9dd      	cbnz	r5, 800ec3e <__kernel_sin+0xce>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	f7f1 fc63 	bl	80004d8 <__aeabi_dmul>
 800ec12:	a32f      	add	r3, pc, #188	; (adr r3, 800ecd0 <__kernel_sin+0x160>)
 800ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec18:	f7f1 faa6 	bl	8000168 <__aeabi_dsub>
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	464b      	mov	r3, r9
 800ec20:	f7f1 fc5a 	bl	80004d8 <__aeabi_dmul>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4650      	mov	r0, sl
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	f7f1 fa9e 	bl	800016c <__adddf3>
 800ec30:	4682      	mov	sl, r0
 800ec32:	460c      	mov	r4, r1
 800ec34:	4650      	mov	r0, sl
 800ec36:	4621      	mov	r1, r4
 800ec38:	b006      	add	sp, #24
 800ec3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec3e:	2200      	movs	r2, #0
 800ec40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec44:	4b24      	ldr	r3, [pc, #144]	; (800ecd8 <__kernel_sin+0x168>)
 800ec46:	f7f1 fc47 	bl	80004d8 <__aeabi_dmul>
 800ec4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec52:	4640      	mov	r0, r8
 800ec54:	4649      	mov	r1, r9
 800ec56:	f7f1 fc3f 	bl	80004d8 <__aeabi_dmul>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec62:	f7f1 fa81 	bl	8000168 <__aeabi_dsub>
 800ec66:	4632      	mov	r2, r6
 800ec68:	463b      	mov	r3, r7
 800ec6a:	f7f1 fc35 	bl	80004d8 <__aeabi_dmul>
 800ec6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec72:	f7f1 fa79 	bl	8000168 <__aeabi_dsub>
 800ec76:	a316      	add	r3, pc, #88	; (adr r3, 800ecd0 <__kernel_sin+0x160>)
 800ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	460f      	mov	r7, r1
 800ec80:	4640      	mov	r0, r8
 800ec82:	4649      	mov	r1, r9
 800ec84:	f7f1 fc28 	bl	80004d8 <__aeabi_dmul>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	4639      	mov	r1, r7
 800ec90:	f7f1 fa6c 	bl	800016c <__adddf3>
 800ec94:	4602      	mov	r2, r0
 800ec96:	460b      	mov	r3, r1
 800ec98:	4650      	mov	r0, sl
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	f7f1 fa64 	bl	8000168 <__aeabi_dsub>
 800eca0:	e7c6      	b.n	800ec30 <__kernel_sin+0xc0>
 800eca2:	bf00      	nop
 800eca4:	f3af 8000 	nop.w
 800eca8:	5acfd57c 	.word	0x5acfd57c
 800ecac:	3de5d93a 	.word	0x3de5d93a
 800ecb0:	8a2b9ceb 	.word	0x8a2b9ceb
 800ecb4:	3e5ae5e6 	.word	0x3e5ae5e6
 800ecb8:	57b1fe7d 	.word	0x57b1fe7d
 800ecbc:	3ec71de3 	.word	0x3ec71de3
 800ecc0:	19c161d5 	.word	0x19c161d5
 800ecc4:	3f2a01a0 	.word	0x3f2a01a0
 800ecc8:	1110f8a6 	.word	0x1110f8a6
 800eccc:	3f811111 	.word	0x3f811111
 800ecd0:	55555549 	.word	0x55555549
 800ecd4:	3fc55555 	.word	0x3fc55555
 800ecd8:	3fe00000 	.word	0x3fe00000

0800ecdc <__kernel_cosf>:
 800ecdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800ece4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ece8:	4606      	mov	r6, r0
 800ecea:	4688      	mov	r8, r1
 800ecec:	da03      	bge.n	800ecf6 <__kernel_cosf+0x1a>
 800ecee:	f7f2 fa25 	bl	800113c <__aeabi_f2iz>
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d05c      	beq.n	800edb0 <__kernel_cosf+0xd4>
 800ecf6:	4631      	mov	r1, r6
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	f7f2 f843 	bl	8000d84 <__aeabi_fmul>
 800ecfe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ed02:	4605      	mov	r5, r0
 800ed04:	f7f2 f83e 	bl	8000d84 <__aeabi_fmul>
 800ed08:	492b      	ldr	r1, [pc, #172]	; (800edb8 <__kernel_cosf+0xdc>)
 800ed0a:	4607      	mov	r7, r0
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f7f2 f839 	bl	8000d84 <__aeabi_fmul>
 800ed12:	492a      	ldr	r1, [pc, #168]	; (800edbc <__kernel_cosf+0xe0>)
 800ed14:	f7f1 ff2e 	bl	8000b74 <__addsf3>
 800ed18:	4629      	mov	r1, r5
 800ed1a:	f7f2 f833 	bl	8000d84 <__aeabi_fmul>
 800ed1e:	4928      	ldr	r1, [pc, #160]	; (800edc0 <__kernel_cosf+0xe4>)
 800ed20:	f7f1 ff26 	bl	8000b70 <__aeabi_fsub>
 800ed24:	4629      	mov	r1, r5
 800ed26:	f7f2 f82d 	bl	8000d84 <__aeabi_fmul>
 800ed2a:	4926      	ldr	r1, [pc, #152]	; (800edc4 <__kernel_cosf+0xe8>)
 800ed2c:	f7f1 ff22 	bl	8000b74 <__addsf3>
 800ed30:	4629      	mov	r1, r5
 800ed32:	f7f2 f827 	bl	8000d84 <__aeabi_fmul>
 800ed36:	4924      	ldr	r1, [pc, #144]	; (800edc8 <__kernel_cosf+0xec>)
 800ed38:	f7f1 ff1a 	bl	8000b70 <__aeabi_fsub>
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	f7f2 f821 	bl	8000d84 <__aeabi_fmul>
 800ed42:	4922      	ldr	r1, [pc, #136]	; (800edcc <__kernel_cosf+0xf0>)
 800ed44:	f7f1 ff16 	bl	8000b74 <__addsf3>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	f7f2 f81b 	bl	8000d84 <__aeabi_fmul>
 800ed4e:	4629      	mov	r1, r5
 800ed50:	f7f2 f818 	bl	8000d84 <__aeabi_fmul>
 800ed54:	4641      	mov	r1, r8
 800ed56:	4605      	mov	r5, r0
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7f2 f813 	bl	8000d84 <__aeabi_fmul>
 800ed5e:	4601      	mov	r1, r0
 800ed60:	4628      	mov	r0, r5
 800ed62:	f7f1 ff05 	bl	8000b70 <__aeabi_fsub>
 800ed66:	4b1a      	ldr	r3, [pc, #104]	; (800edd0 <__kernel_cosf+0xf4>)
 800ed68:	4605      	mov	r5, r0
 800ed6a:	429c      	cmp	r4, r3
 800ed6c:	dc0a      	bgt.n	800ed84 <__kernel_cosf+0xa8>
 800ed6e:	4601      	mov	r1, r0
 800ed70:	4638      	mov	r0, r7
 800ed72:	f7f1 fefd 	bl	8000b70 <__aeabi_fsub>
 800ed76:	4601      	mov	r1, r0
 800ed78:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ed7c:	f7f1 fef8 	bl	8000b70 <__aeabi_fsub>
 800ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed84:	4b13      	ldr	r3, [pc, #76]	; (800edd4 <__kernel_cosf+0xf8>)
 800ed86:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ed8a:	429c      	cmp	r4, r3
 800ed8c:	bfcc      	ite	gt
 800ed8e:	4c12      	ldrgt	r4, [pc, #72]	; (800edd8 <__kernel_cosf+0xfc>)
 800ed90:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ed94:	4621      	mov	r1, r4
 800ed96:	f7f1 feeb 	bl	8000b70 <__aeabi_fsub>
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	4638      	mov	r0, r7
 800eda0:	f7f1 fee6 	bl	8000b70 <__aeabi_fsub>
 800eda4:	4629      	mov	r1, r5
 800eda6:	f7f1 fee3 	bl	8000b70 <__aeabi_fsub>
 800edaa:	4601      	mov	r1, r0
 800edac:	4630      	mov	r0, r6
 800edae:	e7e5      	b.n	800ed7c <__kernel_cosf+0xa0>
 800edb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800edb4:	e7e4      	b.n	800ed80 <__kernel_cosf+0xa4>
 800edb6:	bf00      	nop
 800edb8:	ad47d74e 	.word	0xad47d74e
 800edbc:	310f74f6 	.word	0x310f74f6
 800edc0:	3493f27c 	.word	0x3493f27c
 800edc4:	37d00d01 	.word	0x37d00d01
 800edc8:	3ab60b61 	.word	0x3ab60b61
 800edcc:	3d2aaaab 	.word	0x3d2aaaab
 800edd0:	3e999999 	.word	0x3e999999
 800edd4:	3f480000 	.word	0x3f480000
 800edd8:	3e900000 	.word	0x3e900000

0800eddc <__kernel_rem_pio2f>:
 800eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	b0db      	sub	sp, #364	; 0x16c
 800ede2:	9202      	str	r2, [sp, #8]
 800ede4:	9304      	str	r3, [sp, #16]
 800ede6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ede8:	4bc5      	ldr	r3, [pc, #788]	; (800f100 <__kernel_rem_pio2f+0x324>)
 800edea:	9005      	str	r0, [sp, #20]
 800edec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edf0:	9100      	str	r1, [sp, #0]
 800edf2:	9301      	str	r3, [sp, #4]
 800edf4:	9b04      	ldr	r3, [sp, #16]
 800edf6:	3b01      	subs	r3, #1
 800edf8:	9303      	str	r3, [sp, #12]
 800edfa:	9b02      	ldr	r3, [sp, #8]
 800edfc:	1d1a      	adds	r2, r3, #4
 800edfe:	f2c0 809b 	blt.w	800ef38 <__kernel_rem_pio2f+0x15c>
 800ee02:	1edc      	subs	r4, r3, #3
 800ee04:	bf48      	it	mi
 800ee06:	1d1c      	addmi	r4, r3, #4
 800ee08:	10e4      	asrs	r4, r4, #3
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	f04f 0a00 	mov.w	sl, #0
 800ee10:	1c67      	adds	r7, r4, #1
 800ee12:	00fb      	lsls	r3, r7, #3
 800ee14:	9306      	str	r3, [sp, #24]
 800ee16:	9b02      	ldr	r3, [sp, #8]
 800ee18:	9a03      	ldr	r2, [sp, #12]
 800ee1a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800ee1e:	9b01      	ldr	r3, [sp, #4]
 800ee20:	1aa6      	subs	r6, r4, r2
 800ee22:	eb03 0802 	add.w	r8, r3, r2
 800ee26:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ee28:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800ee2c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800ee30:	4545      	cmp	r5, r8
 800ee32:	f340 8083 	ble.w	800ef3c <__kernel_rem_pio2f+0x160>
 800ee36:	f04f 0800 	mov.w	r8, #0
 800ee3a:	f04f 0b00 	mov.w	fp, #0
 800ee3e:	9b04      	ldr	r3, [sp, #16]
 800ee40:	aa1e      	add	r2, sp, #120	; 0x78
 800ee42:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ee46:	ab46      	add	r3, sp, #280	; 0x118
 800ee48:	9a01      	ldr	r2, [sp, #4]
 800ee4a:	4590      	cmp	r8, r2
 800ee4c:	f340 809c 	ble.w	800ef88 <__kernel_rem_pio2f+0x1ac>
 800ee50:	4613      	mov	r3, r2
 800ee52:	aa0a      	add	r2, sp, #40	; 0x28
 800ee54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee58:	9308      	str	r3, [sp, #32]
 800ee5a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ee5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ee60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee64:	9307      	str	r3, [sp, #28]
 800ee66:	ad0a      	add	r5, sp, #40	; 0x28
 800ee68:	462e      	mov	r6, r5
 800ee6a:	46c3      	mov	fp, r8
 800ee6c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800ee70:	ab5a      	add	r3, sp, #360	; 0x168
 800ee72:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ee76:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800ee7a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800ee7e:	f1bb 0f00 	cmp.w	fp, #0
 800ee82:	f300 8086 	bgt.w	800ef92 <__kernel_rem_pio2f+0x1b6>
 800ee86:	4639      	mov	r1, r7
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f000 fed9 	bl	800fc40 <scalbnf>
 800ee8e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800ee92:	4604      	mov	r4, r0
 800ee94:	f7f1 ff76 	bl	8000d84 <__aeabi_fmul>
 800ee98:	f000 fe90 	bl	800fbbc <floorf>
 800ee9c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800eea0:	f7f1 ff70 	bl	8000d84 <__aeabi_fmul>
 800eea4:	4601      	mov	r1, r0
 800eea6:	4620      	mov	r0, r4
 800eea8:	f7f1 fe62 	bl	8000b70 <__aeabi_fsub>
 800eeac:	4604      	mov	r4, r0
 800eeae:	f7f2 f945 	bl	800113c <__aeabi_f2iz>
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	f7f1 ff12 	bl	8000cdc <__aeabi_i2f>
 800eeb8:	4601      	mov	r1, r0
 800eeba:	4620      	mov	r0, r4
 800eebc:	f7f1 fe58 	bl	8000b70 <__aeabi_fsub>
 800eec0:	2f00      	cmp	r7, #0
 800eec2:	4681      	mov	r9, r0
 800eec4:	f340 8084 	ble.w	800efd0 <__kernel_rem_pio2f+0x1f4>
 800eec8:	f108 32ff 	add.w	r2, r8, #4294967295
 800eecc:	ab0a      	add	r3, sp, #40	; 0x28
 800eece:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800eed2:	f1c7 0108 	rsb	r1, r7, #8
 800eed6:	fa44 f301 	asr.w	r3, r4, r1
 800eeda:	441e      	add	r6, r3
 800eedc:	408b      	lsls	r3, r1
 800eede:	1ae4      	subs	r4, r4, r3
 800eee0:	f1c7 0007 	rsb	r0, r7, #7
 800eee4:	ab0a      	add	r3, sp, #40	; 0x28
 800eee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eeea:	4104      	asrs	r4, r0
 800eeec:	2c00      	cmp	r4, #0
 800eeee:	dd7e      	ble.n	800efee <__kernel_rem_pio2f+0x212>
 800eef0:	2200      	movs	r2, #0
 800eef2:	4692      	mov	sl, r2
 800eef4:	3601      	adds	r6, #1
 800eef6:	4590      	cmp	r8, r2
 800eef8:	f300 80b0 	bgt.w	800f05c <__kernel_rem_pio2f+0x280>
 800eefc:	2f00      	cmp	r7, #0
 800eefe:	dd05      	ble.n	800ef0c <__kernel_rem_pio2f+0x130>
 800ef00:	2f01      	cmp	r7, #1
 800ef02:	f000 80bd 	beq.w	800f080 <__kernel_rem_pio2f+0x2a4>
 800ef06:	2f02      	cmp	r7, #2
 800ef08:	f000 80c5 	beq.w	800f096 <__kernel_rem_pio2f+0x2ba>
 800ef0c:	2c02      	cmp	r4, #2
 800ef0e:	d16e      	bne.n	800efee <__kernel_rem_pio2f+0x212>
 800ef10:	4649      	mov	r1, r9
 800ef12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef16:	f7f1 fe2b 	bl	8000b70 <__aeabi_fsub>
 800ef1a:	4681      	mov	r9, r0
 800ef1c:	f1ba 0f00 	cmp.w	sl, #0
 800ef20:	d065      	beq.n	800efee <__kernel_rem_pio2f+0x212>
 800ef22:	4639      	mov	r1, r7
 800ef24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef28:	f000 fe8a 	bl	800fc40 <scalbnf>
 800ef2c:	4601      	mov	r1, r0
 800ef2e:	4648      	mov	r0, r9
 800ef30:	f7f1 fe1e 	bl	8000b70 <__aeabi_fsub>
 800ef34:	4681      	mov	r9, r0
 800ef36:	e05a      	b.n	800efee <__kernel_rem_pio2f+0x212>
 800ef38:	2400      	movs	r4, #0
 800ef3a:	e766      	b.n	800ee0a <__kernel_rem_pio2f+0x2e>
 800ef3c:	42ee      	cmn	r6, r5
 800ef3e:	d407      	bmi.n	800ef50 <__kernel_rem_pio2f+0x174>
 800ef40:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ef44:	f7f1 feca 	bl	8000cdc <__aeabi_i2f>
 800ef48:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800ef4c:	3501      	adds	r5, #1
 800ef4e:	e76f      	b.n	800ee30 <__kernel_rem_pio2f+0x54>
 800ef50:	4650      	mov	r0, sl
 800ef52:	e7f9      	b.n	800ef48 <__kernel_rem_pio2f+0x16c>
 800ef54:	9b05      	ldr	r3, [sp, #20]
 800ef56:	f8da 1000 	ldr.w	r1, [sl]
 800ef5a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800ef5e:	f7f1 ff11 	bl	8000d84 <__aeabi_fmul>
 800ef62:	4601      	mov	r1, r0
 800ef64:	4630      	mov	r0, r6
 800ef66:	f7f1 fe05 	bl	8000b74 <__addsf3>
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	f109 0901 	add.w	r9, r9, #1
 800ef70:	ab46      	add	r3, sp, #280	; 0x118
 800ef72:	9a03      	ldr	r2, [sp, #12]
 800ef74:	f1aa 0a04 	sub.w	sl, sl, #4
 800ef78:	4591      	cmp	r9, r2
 800ef7a:	ddeb      	ble.n	800ef54 <__kernel_rem_pio2f+0x178>
 800ef7c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ef80:	3504      	adds	r5, #4
 800ef82:	f108 0801 	add.w	r8, r8, #1
 800ef86:	e75f      	b.n	800ee48 <__kernel_rem_pio2f+0x6c>
 800ef88:	46aa      	mov	sl, r5
 800ef8a:	465e      	mov	r6, fp
 800ef8c:	f04f 0900 	mov.w	r9, #0
 800ef90:	e7ef      	b.n	800ef72 <__kernel_rem_pio2f+0x196>
 800ef92:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800ef96:	4620      	mov	r0, r4
 800ef98:	f7f1 fef4 	bl	8000d84 <__aeabi_fmul>
 800ef9c:	f7f2 f8ce 	bl	800113c <__aeabi_f2iz>
 800efa0:	f7f1 fe9c 	bl	8000cdc <__aeabi_i2f>
 800efa4:	4649      	mov	r1, r9
 800efa6:	9009      	str	r0, [sp, #36]	; 0x24
 800efa8:	f7f1 feec 	bl	8000d84 <__aeabi_fmul>
 800efac:	4601      	mov	r1, r0
 800efae:	4620      	mov	r0, r4
 800efb0:	f7f1 fdde 	bl	8000b70 <__aeabi_fsub>
 800efb4:	f7f2 f8c2 	bl	800113c <__aeabi_f2iz>
 800efb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efbe:	f846 0b04 	str.w	r0, [r6], #4
 800efc2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f1 fdd4 	bl	8000b74 <__addsf3>
 800efcc:	4604      	mov	r4, r0
 800efce:	e756      	b.n	800ee7e <__kernel_rem_pio2f+0xa2>
 800efd0:	d106      	bne.n	800efe0 <__kernel_rem_pio2f+0x204>
 800efd2:	f108 33ff 	add.w	r3, r8, #4294967295
 800efd6:	aa0a      	add	r2, sp, #40	; 0x28
 800efd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800efdc:	1224      	asrs	r4, r4, #8
 800efde:	e785      	b.n	800eeec <__kernel_rem_pio2f+0x110>
 800efe0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800efe4:	f7f2 f880 	bl	80010e8 <__aeabi_fcmpge>
 800efe8:	4604      	mov	r4, r0
 800efea:	2800      	cmp	r0, #0
 800efec:	d134      	bne.n	800f058 <__kernel_rem_pio2f+0x27c>
 800efee:	2100      	movs	r1, #0
 800eff0:	4648      	mov	r0, r9
 800eff2:	f7f2 f85b 	bl	80010ac <__aeabi_fcmpeq>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	f000 809a 	beq.w	800f130 <__kernel_rem_pio2f+0x354>
 800effc:	f108 35ff 	add.w	r5, r8, #4294967295
 800f000:	462b      	mov	r3, r5
 800f002:	2200      	movs	r2, #0
 800f004:	9901      	ldr	r1, [sp, #4]
 800f006:	428b      	cmp	r3, r1
 800f008:	da4d      	bge.n	800f0a6 <__kernel_rem_pio2f+0x2ca>
 800f00a:	2a00      	cmp	r2, #0
 800f00c:	d07c      	beq.n	800f108 <__kernel_rem_pio2f+0x32c>
 800f00e:	ab0a      	add	r3, sp, #40	; 0x28
 800f010:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f014:	3f08      	subs	r7, #8
 800f016:	2b00      	cmp	r3, #0
 800f018:	f000 8088 	beq.w	800f12c <__kernel_rem_pio2f+0x350>
 800f01c:	4639      	mov	r1, r7
 800f01e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f022:	f000 fe0d 	bl	800fc40 <scalbnf>
 800f026:	46aa      	mov	sl, r5
 800f028:	4681      	mov	r9, r0
 800f02a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f02e:	af46      	add	r7, sp, #280	; 0x118
 800f030:	f1ba 0f00 	cmp.w	sl, #0
 800f034:	f280 80b1 	bge.w	800f19a <__kernel_rem_pio2f+0x3be>
 800f038:	46a9      	mov	r9, r5
 800f03a:	f04f 0a00 	mov.w	sl, #0
 800f03e:	2200      	movs	r2, #0
 800f040:	f1b9 0f00 	cmp.w	r9, #0
 800f044:	f2c0 80db 	blt.w	800f1fe <__kernel_rem_pio2f+0x422>
 800f048:	a946      	add	r1, sp, #280	; 0x118
 800f04a:	4617      	mov	r7, r2
 800f04c:	f04f 0800 	mov.w	r8, #0
 800f050:	4b2c      	ldr	r3, [pc, #176]	; (800f104 <__kernel_rem_pio2f+0x328>)
 800f052:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f056:	e0c3      	b.n	800f1e0 <__kernel_rem_pio2f+0x404>
 800f058:	2402      	movs	r4, #2
 800f05a:	e749      	b.n	800eef0 <__kernel_rem_pio2f+0x114>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	f1ba 0f00 	cmp.w	sl, #0
 800f062:	d108      	bne.n	800f076 <__kernel_rem_pio2f+0x29a>
 800f064:	b11b      	cbz	r3, 800f06e <__kernel_rem_pio2f+0x292>
 800f066:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f06a:	602b      	str	r3, [r5, #0]
 800f06c:	2301      	movs	r3, #1
 800f06e:	469a      	mov	sl, r3
 800f070:	3201      	adds	r2, #1
 800f072:	3504      	adds	r5, #4
 800f074:	e73f      	b.n	800eef6 <__kernel_rem_pio2f+0x11a>
 800f076:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f07a:	602b      	str	r3, [r5, #0]
 800f07c:	4653      	mov	r3, sl
 800f07e:	e7f6      	b.n	800f06e <__kernel_rem_pio2f+0x292>
 800f080:	f108 32ff 	add.w	r2, r8, #4294967295
 800f084:	ab0a      	add	r3, sp, #40	; 0x28
 800f086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f08e:	a90a      	add	r1, sp, #40	; 0x28
 800f090:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f094:	e73a      	b.n	800ef0c <__kernel_rem_pio2f+0x130>
 800f096:	f108 32ff 	add.w	r2, r8, #4294967295
 800f09a:	ab0a      	add	r3, sp, #40	; 0x28
 800f09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0a4:	e7f3      	b.n	800f08e <__kernel_rem_pio2f+0x2b2>
 800f0a6:	a90a      	add	r1, sp, #40	; 0x28
 800f0a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	e7a8      	b.n	800f004 <__kernel_rem_pio2f+0x228>
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f0b8:	2900      	cmp	r1, #0
 800f0ba:	d0fa      	beq.n	800f0b2 <__kernel_rem_pio2f+0x2d6>
 800f0bc:	9a04      	ldr	r2, [sp, #16]
 800f0be:	f108 0501 	add.w	r5, r8, #1
 800f0c2:	eb08 0402 	add.w	r4, r8, r2
 800f0c6:	aa1e      	add	r2, sp, #120	; 0x78
 800f0c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f0cc:	4498      	add	r8, r3
 800f0ce:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f0d2:	45a8      	cmp	r8, r5
 800f0d4:	f6ff aec7 	blt.w	800ee66 <__kernel_rem_pio2f+0x8a>
 800f0d8:	9b07      	ldr	r3, [sp, #28]
 800f0da:	46a3      	mov	fp, r4
 800f0dc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0e0:	f7f1 fdfc 	bl	8000cdc <__aeabi_i2f>
 800f0e4:	f04f 0a00 	mov.w	sl, #0
 800f0e8:	2600      	movs	r6, #0
 800f0ea:	f84b 0b04 	str.w	r0, [fp], #4
 800f0ee:	9b03      	ldr	r3, [sp, #12]
 800f0f0:	459a      	cmp	sl, r3
 800f0f2:	dd0c      	ble.n	800f10e <__kernel_rem_pio2f+0x332>
 800f0f4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f0f8:	465c      	mov	r4, fp
 800f0fa:	3501      	adds	r5, #1
 800f0fc:	e7e9      	b.n	800f0d2 <__kernel_rem_pio2f+0x2f6>
 800f0fe:	bf00      	nop
 800f100:	08010e44 	.word	0x08010e44
 800f104:	08010e18 	.word	0x08010e18
 800f108:	2301      	movs	r3, #1
 800f10a:	9a08      	ldr	r2, [sp, #32]
 800f10c:	e7d2      	b.n	800f0b4 <__kernel_rem_pio2f+0x2d8>
 800f10e:	9b05      	ldr	r3, [sp, #20]
 800f110:	f854 0904 	ldr.w	r0, [r4], #-4
 800f114:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f118:	f7f1 fe34 	bl	8000d84 <__aeabi_fmul>
 800f11c:	4601      	mov	r1, r0
 800f11e:	4630      	mov	r0, r6
 800f120:	f7f1 fd28 	bl	8000b74 <__addsf3>
 800f124:	f10a 0a01 	add.w	sl, sl, #1
 800f128:	4606      	mov	r6, r0
 800f12a:	e7e0      	b.n	800f0ee <__kernel_rem_pio2f+0x312>
 800f12c:	3d01      	subs	r5, #1
 800f12e:	e76e      	b.n	800f00e <__kernel_rem_pio2f+0x232>
 800f130:	9b06      	ldr	r3, [sp, #24]
 800f132:	9a02      	ldr	r2, [sp, #8]
 800f134:	4648      	mov	r0, r9
 800f136:	1a99      	subs	r1, r3, r2
 800f138:	f000 fd82 	bl	800fc40 <scalbnf>
 800f13c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f140:	4605      	mov	r5, r0
 800f142:	f7f1 ffd1 	bl	80010e8 <__aeabi_fcmpge>
 800f146:	b300      	cbz	r0, 800f18a <__kernel_rem_pio2f+0x3ae>
 800f148:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f14c:	4628      	mov	r0, r5
 800f14e:	f7f1 fe19 	bl	8000d84 <__aeabi_fmul>
 800f152:	f7f1 fff3 	bl	800113c <__aeabi_f2iz>
 800f156:	f7f1 fdc1 	bl	8000cdc <__aeabi_i2f>
 800f15a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f15e:	4681      	mov	r9, r0
 800f160:	f7f1 fe10 	bl	8000d84 <__aeabi_fmul>
 800f164:	4601      	mov	r1, r0
 800f166:	4628      	mov	r0, r5
 800f168:	f7f1 fd02 	bl	8000b70 <__aeabi_fsub>
 800f16c:	f7f1 ffe6 	bl	800113c <__aeabi_f2iz>
 800f170:	ab0a      	add	r3, sp, #40	; 0x28
 800f172:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f176:	4648      	mov	r0, r9
 800f178:	f7f1 ffe0 	bl	800113c <__aeabi_f2iz>
 800f17c:	f108 0501 	add.w	r5, r8, #1
 800f180:	ab0a      	add	r3, sp, #40	; 0x28
 800f182:	3708      	adds	r7, #8
 800f184:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f188:	e748      	b.n	800f01c <__kernel_rem_pio2f+0x240>
 800f18a:	4628      	mov	r0, r5
 800f18c:	f7f1 ffd6 	bl	800113c <__aeabi_f2iz>
 800f190:	ab0a      	add	r3, sp, #40	; 0x28
 800f192:	4645      	mov	r5, r8
 800f194:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f198:	e740      	b.n	800f01c <__kernel_rem_pio2f+0x240>
 800f19a:	ab0a      	add	r3, sp, #40	; 0x28
 800f19c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f1a0:	f7f1 fd9c 	bl	8000cdc <__aeabi_i2f>
 800f1a4:	4649      	mov	r1, r9
 800f1a6:	f7f1 fded 	bl	8000d84 <__aeabi_fmul>
 800f1aa:	4641      	mov	r1, r8
 800f1ac:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800f1b0:	4648      	mov	r0, r9
 800f1b2:	f7f1 fde7 	bl	8000d84 <__aeabi_fmul>
 800f1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1ba:	4681      	mov	r9, r0
 800f1bc:	e738      	b.n	800f030 <__kernel_rem_pio2f+0x254>
 800f1be:	f853 0b04 	ldr.w	r0, [r3], #4
 800f1c2:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f1c6:	9203      	str	r2, [sp, #12]
 800f1c8:	9302      	str	r3, [sp, #8]
 800f1ca:	f7f1 fddb 	bl	8000d84 <__aeabi_fmul>
 800f1ce:	4601      	mov	r1, r0
 800f1d0:	4638      	mov	r0, r7
 800f1d2:	f7f1 fccf 	bl	8000b74 <__addsf3>
 800f1d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f1da:	4607      	mov	r7, r0
 800f1dc:	f108 0801 	add.w	r8, r8, #1
 800f1e0:	9901      	ldr	r1, [sp, #4]
 800f1e2:	4588      	cmp	r8, r1
 800f1e4:	dc01      	bgt.n	800f1ea <__kernel_rem_pio2f+0x40e>
 800f1e6:	45c2      	cmp	sl, r8
 800f1e8:	dae9      	bge.n	800f1be <__kernel_rem_pio2f+0x3e2>
 800f1ea:	ab5a      	add	r3, sp, #360	; 0x168
 800f1ec:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f1f0:	f843 7ca0 	str.w	r7, [r3, #-160]
 800f1f4:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1f8:	f10a 0a01 	add.w	sl, sl, #1
 800f1fc:	e720      	b.n	800f040 <__kernel_rem_pio2f+0x264>
 800f1fe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f200:	2b02      	cmp	r3, #2
 800f202:	dc07      	bgt.n	800f214 <__kernel_rem_pio2f+0x438>
 800f204:	2b00      	cmp	r3, #0
 800f206:	dc4d      	bgt.n	800f2a4 <__kernel_rem_pio2f+0x4c8>
 800f208:	d02e      	beq.n	800f268 <__kernel_rem_pio2f+0x48c>
 800f20a:	f006 0007 	and.w	r0, r6, #7
 800f20e:	b05b      	add	sp, #364	; 0x16c
 800f210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f214:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f216:	2b03      	cmp	r3, #3
 800f218:	d1f7      	bne.n	800f20a <__kernel_rem_pio2f+0x42e>
 800f21a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800f21e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800f222:	46b8      	mov	r8, r7
 800f224:	46aa      	mov	sl, r5
 800f226:	f1ba 0f00 	cmp.w	sl, #0
 800f22a:	dc48      	bgt.n	800f2be <__kernel_rem_pio2f+0x4e2>
 800f22c:	46a9      	mov	r9, r5
 800f22e:	f1b9 0f01 	cmp.w	r9, #1
 800f232:	dc5f      	bgt.n	800f2f4 <__kernel_rem_pio2f+0x518>
 800f234:	2000      	movs	r0, #0
 800f236:	2d01      	cmp	r5, #1
 800f238:	dc75      	bgt.n	800f326 <__kernel_rem_pio2f+0x54a>
 800f23a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800f23c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800f23e:	2c00      	cmp	r4, #0
 800f240:	d177      	bne.n	800f332 <__kernel_rem_pio2f+0x556>
 800f242:	9900      	ldr	r1, [sp, #0]
 800f244:	600a      	str	r2, [r1, #0]
 800f246:	460a      	mov	r2, r1
 800f248:	604b      	str	r3, [r1, #4]
 800f24a:	6090      	str	r0, [r2, #8]
 800f24c:	e7dd      	b.n	800f20a <__kernel_rem_pio2f+0x42e>
 800f24e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800f252:	f7f1 fc8f 	bl	8000b74 <__addsf3>
 800f256:	3d01      	subs	r5, #1
 800f258:	2d00      	cmp	r5, #0
 800f25a:	daf8      	bge.n	800f24e <__kernel_rem_pio2f+0x472>
 800f25c:	b10c      	cbz	r4, 800f262 <__kernel_rem_pio2f+0x486>
 800f25e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f262:	9b00      	ldr	r3, [sp, #0]
 800f264:	6018      	str	r0, [r3, #0]
 800f266:	e7d0      	b.n	800f20a <__kernel_rem_pio2f+0x42e>
 800f268:	2000      	movs	r0, #0
 800f26a:	af32      	add	r7, sp, #200	; 0xc8
 800f26c:	e7f4      	b.n	800f258 <__kernel_rem_pio2f+0x47c>
 800f26e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f272:	f7f1 fc7f 	bl	8000b74 <__addsf3>
 800f276:	3f01      	subs	r7, #1
 800f278:	2f00      	cmp	r7, #0
 800f27a:	daf8      	bge.n	800f26e <__kernel_rem_pio2f+0x492>
 800f27c:	b1bc      	cbz	r4, 800f2ae <__kernel_rem_pio2f+0x4d2>
 800f27e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f282:	9a00      	ldr	r2, [sp, #0]
 800f284:	4601      	mov	r1, r0
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800f28a:	f7f1 fc71 	bl	8000b70 <__aeabi_fsub>
 800f28e:	2701      	movs	r7, #1
 800f290:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f294:	42bd      	cmp	r5, r7
 800f296:	da0c      	bge.n	800f2b2 <__kernel_rem_pio2f+0x4d6>
 800f298:	b10c      	cbz	r4, 800f29e <__kernel_rem_pio2f+0x4c2>
 800f29a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f29e:	9b00      	ldr	r3, [sp, #0]
 800f2a0:	6058      	str	r0, [r3, #4]
 800f2a2:	e7b2      	b.n	800f20a <__kernel_rem_pio2f+0x42e>
 800f2a4:	462f      	mov	r7, r5
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f2ac:	e7e4      	b.n	800f278 <__kernel_rem_pio2f+0x49c>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	e7e7      	b.n	800f282 <__kernel_rem_pio2f+0x4a6>
 800f2b2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f2b6:	f7f1 fc5d 	bl	8000b74 <__addsf3>
 800f2ba:	3701      	adds	r7, #1
 800f2bc:	e7ea      	b.n	800f294 <__kernel_rem_pio2f+0x4b8>
 800f2be:	f8d8 3000 	ldr.w	r3, [r8]
 800f2c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	9302      	str	r3, [sp, #8]
 800f2cc:	9201      	str	r2, [sp, #4]
 800f2ce:	f7f1 fc51 	bl	8000b74 <__addsf3>
 800f2d2:	9a01      	ldr	r2, [sp, #4]
 800f2d4:	4601      	mov	r1, r0
 800f2d6:	4681      	mov	r9, r0
 800f2d8:	4610      	mov	r0, r2
 800f2da:	f7f1 fc49 	bl	8000b70 <__aeabi_fsub>
 800f2de:	9b02      	ldr	r3, [sp, #8]
 800f2e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	f7f1 fc45 	bl	8000b74 <__addsf3>
 800f2ea:	f848 0904 	str.w	r0, [r8], #-4
 800f2ee:	f8c8 9000 	str.w	r9, [r8]
 800f2f2:	e798      	b.n	800f226 <__kernel_rem_pio2f+0x44a>
 800f2f4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f2f8:	f8d7 a000 	ldr.w	sl, [r7]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	4651      	mov	r1, sl
 800f300:	9301      	str	r3, [sp, #4]
 800f302:	f7f1 fc37 	bl	8000b74 <__addsf3>
 800f306:	9b01      	ldr	r3, [sp, #4]
 800f308:	4601      	mov	r1, r0
 800f30a:	4680      	mov	r8, r0
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7f1 fc2f 	bl	8000b70 <__aeabi_fsub>
 800f312:	4651      	mov	r1, sl
 800f314:	f7f1 fc2e 	bl	8000b74 <__addsf3>
 800f318:	f847 0904 	str.w	r0, [r7], #-4
 800f31c:	f109 39ff 	add.w	r9, r9, #4294967295
 800f320:	f8c7 8000 	str.w	r8, [r7]
 800f324:	e783      	b.n	800f22e <__kernel_rem_pio2f+0x452>
 800f326:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800f32a:	f7f1 fc23 	bl	8000b74 <__addsf3>
 800f32e:	3d01      	subs	r5, #1
 800f330:	e781      	b.n	800f236 <__kernel_rem_pio2f+0x45a>
 800f332:	9900      	ldr	r1, [sp, #0]
 800f334:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f338:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f33c:	600a      	str	r2, [r1, #0]
 800f33e:	604b      	str	r3, [r1, #4]
 800f340:	460a      	mov	r2, r1
 800f342:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f346:	e780      	b.n	800f24a <__kernel_rem_pio2f+0x46e>

0800f348 <__kernel_sinf>:
 800f348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f34c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f350:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f354:	4604      	mov	r4, r0
 800f356:	460f      	mov	r7, r1
 800f358:	4691      	mov	r9, r2
 800f35a:	da03      	bge.n	800f364 <__kernel_sinf+0x1c>
 800f35c:	f7f1 feee 	bl	800113c <__aeabi_f2iz>
 800f360:	2800      	cmp	r0, #0
 800f362:	d035      	beq.n	800f3d0 <__kernel_sinf+0x88>
 800f364:	4621      	mov	r1, r4
 800f366:	4620      	mov	r0, r4
 800f368:	f7f1 fd0c 	bl	8000d84 <__aeabi_fmul>
 800f36c:	4605      	mov	r5, r0
 800f36e:	4601      	mov	r1, r0
 800f370:	4620      	mov	r0, r4
 800f372:	f7f1 fd07 	bl	8000d84 <__aeabi_fmul>
 800f376:	4929      	ldr	r1, [pc, #164]	; (800f41c <__kernel_sinf+0xd4>)
 800f378:	4606      	mov	r6, r0
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7f1 fd02 	bl	8000d84 <__aeabi_fmul>
 800f380:	4927      	ldr	r1, [pc, #156]	; (800f420 <__kernel_sinf+0xd8>)
 800f382:	f7f1 fbf5 	bl	8000b70 <__aeabi_fsub>
 800f386:	4629      	mov	r1, r5
 800f388:	f7f1 fcfc 	bl	8000d84 <__aeabi_fmul>
 800f38c:	4925      	ldr	r1, [pc, #148]	; (800f424 <__kernel_sinf+0xdc>)
 800f38e:	f7f1 fbf1 	bl	8000b74 <__addsf3>
 800f392:	4629      	mov	r1, r5
 800f394:	f7f1 fcf6 	bl	8000d84 <__aeabi_fmul>
 800f398:	4923      	ldr	r1, [pc, #140]	; (800f428 <__kernel_sinf+0xe0>)
 800f39a:	f7f1 fbe9 	bl	8000b70 <__aeabi_fsub>
 800f39e:	4629      	mov	r1, r5
 800f3a0:	f7f1 fcf0 	bl	8000d84 <__aeabi_fmul>
 800f3a4:	4921      	ldr	r1, [pc, #132]	; (800f42c <__kernel_sinf+0xe4>)
 800f3a6:	f7f1 fbe5 	bl	8000b74 <__addsf3>
 800f3aa:	4680      	mov	r8, r0
 800f3ac:	f1b9 0f00 	cmp.w	r9, #0
 800f3b0:	d111      	bne.n	800f3d6 <__kernel_sinf+0x8e>
 800f3b2:	4601      	mov	r1, r0
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f7f1 fce5 	bl	8000d84 <__aeabi_fmul>
 800f3ba:	491d      	ldr	r1, [pc, #116]	; (800f430 <__kernel_sinf+0xe8>)
 800f3bc:	f7f1 fbd8 	bl	8000b70 <__aeabi_fsub>
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	f7f1 fcdf 	bl	8000d84 <__aeabi_fmul>
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f7f1 fbd3 	bl	8000b74 <__addsf3>
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f3da:	4638      	mov	r0, r7
 800f3dc:	f7f1 fcd2 	bl	8000d84 <__aeabi_fmul>
 800f3e0:	4641      	mov	r1, r8
 800f3e2:	4681      	mov	r9, r0
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f7f1 fccd 	bl	8000d84 <__aeabi_fmul>
 800f3ea:	4601      	mov	r1, r0
 800f3ec:	4648      	mov	r0, r9
 800f3ee:	f7f1 fbbf 	bl	8000b70 <__aeabi_fsub>
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	f7f1 fcc6 	bl	8000d84 <__aeabi_fmul>
 800f3f8:	4639      	mov	r1, r7
 800f3fa:	f7f1 fbb9 	bl	8000b70 <__aeabi_fsub>
 800f3fe:	490c      	ldr	r1, [pc, #48]	; (800f430 <__kernel_sinf+0xe8>)
 800f400:	4605      	mov	r5, r0
 800f402:	4630      	mov	r0, r6
 800f404:	f7f1 fcbe 	bl	8000d84 <__aeabi_fmul>
 800f408:	4601      	mov	r1, r0
 800f40a:	4628      	mov	r0, r5
 800f40c:	f7f1 fbb2 	bl	8000b74 <__addsf3>
 800f410:	4601      	mov	r1, r0
 800f412:	4620      	mov	r0, r4
 800f414:	f7f1 fbac 	bl	8000b70 <__aeabi_fsub>
 800f418:	e7d9      	b.n	800f3ce <__kernel_sinf+0x86>
 800f41a:	bf00      	nop
 800f41c:	2f2ec9d3 	.word	0x2f2ec9d3
 800f420:	32d72f34 	.word	0x32d72f34
 800f424:	3638ef1b 	.word	0x3638ef1b
 800f428:	39500d01 	.word	0x39500d01
 800f42c:	3c088889 	.word	0x3c088889
 800f430:	3e2aaaab 	.word	0x3e2aaaab

0800f434 <__kernel_tanf>:
 800f434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f438:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 800f43c:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 800f440:	4604      	mov	r4, r0
 800f442:	460e      	mov	r6, r1
 800f444:	4690      	mov	r8, r2
 800f446:	4607      	mov	r7, r0
 800f448:	da1b      	bge.n	800f482 <__kernel_tanf+0x4e>
 800f44a:	f7f1 fe77 	bl	800113c <__aeabi_f2iz>
 800f44e:	2800      	cmp	r0, #0
 800f450:	d12f      	bne.n	800f4b2 <__kernel_tanf+0x7e>
 800f452:	f108 0301 	add.w	r3, r8, #1
 800f456:	ea53 030a 	orrs.w	r3, r3, sl
 800f45a:	d10c      	bne.n	800f476 <__kernel_tanf+0x42>
 800f45c:	4620      	mov	r0, r4
 800f45e:	f7fe f849 	bl	800d4f4 <fabsf>
 800f462:	4601      	mov	r1, r0
 800f464:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f468:	f7f1 fd40 	bl	8000eec <__aeabi_fdiv>
 800f46c:	4604      	mov	r4, r0
 800f46e:	4620      	mov	r0, r4
 800f470:	b003      	add	sp, #12
 800f472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f476:	f1b8 0f01 	cmp.w	r8, #1
 800f47a:	d0f8      	beq.n	800f46e <__kernel_tanf+0x3a>
 800f47c:	4621      	mov	r1, r4
 800f47e:	4872      	ldr	r0, [pc, #456]	; (800f648 <__kernel_tanf+0x214>)
 800f480:	e7f2      	b.n	800f468 <__kernel_tanf+0x34>
 800f482:	4b72      	ldr	r3, [pc, #456]	; (800f64c <__kernel_tanf+0x218>)
 800f484:	459a      	cmp	sl, r3
 800f486:	db14      	blt.n	800f4b2 <__kernel_tanf+0x7e>
 800f488:	2800      	cmp	r0, #0
 800f48a:	bfbe      	ittt	lt
 800f48c:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 800f490:	4604      	movlt	r4, r0
 800f492:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 800f496:	486e      	ldr	r0, [pc, #440]	; (800f650 <__kernel_tanf+0x21c>)
 800f498:	4621      	mov	r1, r4
 800f49a:	f7f1 fb69 	bl	8000b70 <__aeabi_fsub>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	486c      	ldr	r0, [pc, #432]	; (800f654 <__kernel_tanf+0x220>)
 800f4a4:	f7f1 fb64 	bl	8000b70 <__aeabi_fsub>
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	f7f1 fb63 	bl	8000b74 <__addsf3>
 800f4ae:	2600      	movs	r6, #0
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	4621      	mov	r1, r4
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7f1 fc65 	bl	8000d84 <__aeabi_fmul>
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	4681      	mov	r9, r0
 800f4be:	f7f1 fc61 	bl	8000d84 <__aeabi_fmul>
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f7f1 fc5c 	bl	8000d84 <__aeabi_fmul>
 800f4cc:	4962      	ldr	r1, [pc, #392]	; (800f658 <__kernel_tanf+0x224>)
 800f4ce:	4683      	mov	fp, r0
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	f7f1 fc57 	bl	8000d84 <__aeabi_fmul>
 800f4d6:	4961      	ldr	r1, [pc, #388]	; (800f65c <__kernel_tanf+0x228>)
 800f4d8:	f7f1 fb4c 	bl	8000b74 <__addsf3>
 800f4dc:	4629      	mov	r1, r5
 800f4de:	f7f1 fc51 	bl	8000d84 <__aeabi_fmul>
 800f4e2:	495f      	ldr	r1, [pc, #380]	; (800f660 <__kernel_tanf+0x22c>)
 800f4e4:	f7f1 fb46 	bl	8000b74 <__addsf3>
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	f7f1 fc4b 	bl	8000d84 <__aeabi_fmul>
 800f4ee:	495d      	ldr	r1, [pc, #372]	; (800f664 <__kernel_tanf+0x230>)
 800f4f0:	f7f1 fb40 	bl	8000b74 <__addsf3>
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	f7f1 fc45 	bl	8000d84 <__aeabi_fmul>
 800f4fa:	495b      	ldr	r1, [pc, #364]	; (800f668 <__kernel_tanf+0x234>)
 800f4fc:	f7f1 fb3a 	bl	8000b74 <__addsf3>
 800f500:	4629      	mov	r1, r5
 800f502:	f7f1 fc3f 	bl	8000d84 <__aeabi_fmul>
 800f506:	4959      	ldr	r1, [pc, #356]	; (800f66c <__kernel_tanf+0x238>)
 800f508:	f7f1 fb34 	bl	8000b74 <__addsf3>
 800f50c:	4649      	mov	r1, r9
 800f50e:	f7f1 fc39 	bl	8000d84 <__aeabi_fmul>
 800f512:	4957      	ldr	r1, [pc, #348]	; (800f670 <__kernel_tanf+0x23c>)
 800f514:	9001      	str	r0, [sp, #4]
 800f516:	4628      	mov	r0, r5
 800f518:	f7f1 fc34 	bl	8000d84 <__aeabi_fmul>
 800f51c:	4955      	ldr	r1, [pc, #340]	; (800f674 <__kernel_tanf+0x240>)
 800f51e:	f7f1 fb29 	bl	8000b74 <__addsf3>
 800f522:	4629      	mov	r1, r5
 800f524:	f7f1 fc2e 	bl	8000d84 <__aeabi_fmul>
 800f528:	4953      	ldr	r1, [pc, #332]	; (800f678 <__kernel_tanf+0x244>)
 800f52a:	f7f1 fb23 	bl	8000b74 <__addsf3>
 800f52e:	4629      	mov	r1, r5
 800f530:	f7f1 fc28 	bl	8000d84 <__aeabi_fmul>
 800f534:	4951      	ldr	r1, [pc, #324]	; (800f67c <__kernel_tanf+0x248>)
 800f536:	f7f1 fb1d 	bl	8000b74 <__addsf3>
 800f53a:	4629      	mov	r1, r5
 800f53c:	f7f1 fc22 	bl	8000d84 <__aeabi_fmul>
 800f540:	494f      	ldr	r1, [pc, #316]	; (800f680 <__kernel_tanf+0x24c>)
 800f542:	f7f1 fb17 	bl	8000b74 <__addsf3>
 800f546:	4629      	mov	r1, r5
 800f548:	f7f1 fc1c 	bl	8000d84 <__aeabi_fmul>
 800f54c:	494d      	ldr	r1, [pc, #308]	; (800f684 <__kernel_tanf+0x250>)
 800f54e:	f7f1 fb11 	bl	8000b74 <__addsf3>
 800f552:	9b01      	ldr	r3, [sp, #4]
 800f554:	4601      	mov	r1, r0
 800f556:	4618      	mov	r0, r3
 800f558:	f7f1 fb0c 	bl	8000b74 <__addsf3>
 800f55c:	4659      	mov	r1, fp
 800f55e:	f7f1 fc11 	bl	8000d84 <__aeabi_fmul>
 800f562:	4631      	mov	r1, r6
 800f564:	f7f1 fb06 	bl	8000b74 <__addsf3>
 800f568:	4649      	mov	r1, r9
 800f56a:	f7f1 fc0b 	bl	8000d84 <__aeabi_fmul>
 800f56e:	4631      	mov	r1, r6
 800f570:	f7f1 fb00 	bl	8000b74 <__addsf3>
 800f574:	4605      	mov	r5, r0
 800f576:	4944      	ldr	r1, [pc, #272]	; (800f688 <__kernel_tanf+0x254>)
 800f578:	4658      	mov	r0, fp
 800f57a:	f7f1 fc03 	bl	8000d84 <__aeabi_fmul>
 800f57e:	4629      	mov	r1, r5
 800f580:	f7f1 faf8 	bl	8000b74 <__addsf3>
 800f584:	4601      	mov	r1, r0
 800f586:	4681      	mov	r9, r0
 800f588:	4620      	mov	r0, r4
 800f58a:	f7f1 faf3 	bl	8000b74 <__addsf3>
 800f58e:	4b2f      	ldr	r3, [pc, #188]	; (800f64c <__kernel_tanf+0x218>)
 800f590:	4605      	mov	r5, r0
 800f592:	459a      	cmp	sl, r3
 800f594:	db2b      	blt.n	800f5ee <__kernel_tanf+0x1ba>
 800f596:	4640      	mov	r0, r8
 800f598:	f7f1 fba0 	bl	8000cdc <__aeabi_i2f>
 800f59c:	4629      	mov	r1, r5
 800f59e:	4606      	mov	r6, r0
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	f7f1 fbef 	bl	8000d84 <__aeabi_fmul>
 800f5a6:	4631      	mov	r1, r6
 800f5a8:	4680      	mov	r8, r0
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	f7f1 fae2 	bl	8000b74 <__addsf3>
 800f5b0:	4601      	mov	r1, r0
 800f5b2:	4640      	mov	r0, r8
 800f5b4:	f7f1 fc9a 	bl	8000eec <__aeabi_fdiv>
 800f5b8:	4649      	mov	r1, r9
 800f5ba:	f7f1 fad9 	bl	8000b70 <__aeabi_fsub>
 800f5be:	4601      	mov	r1, r0
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f7f1 fad5 	bl	8000b70 <__aeabi_fsub>
 800f5c6:	4601      	mov	r1, r0
 800f5c8:	f7f1 fad4 	bl	8000b74 <__addsf3>
 800f5cc:	4601      	mov	r1, r0
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f7f1 face 	bl	8000b70 <__aeabi_fsub>
 800f5d4:	17bf      	asrs	r7, r7, #30
 800f5d6:	f007 0702 	and.w	r7, r7, #2
 800f5da:	4604      	mov	r4, r0
 800f5dc:	f1c7 0001 	rsb	r0, r7, #1
 800f5e0:	f7f1 fb7c 	bl	8000cdc <__aeabi_i2f>
 800f5e4:	4601      	mov	r1, r0
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f7f1 fbcc 	bl	8000d84 <__aeabi_fmul>
 800f5ec:	e73e      	b.n	800f46c <__kernel_tanf+0x38>
 800f5ee:	f1b8 0f01 	cmp.w	r8, #1
 800f5f2:	d027      	beq.n	800f644 <__kernel_tanf+0x210>
 800f5f4:	4e25      	ldr	r6, [pc, #148]	; (800f68c <__kernel_tanf+0x258>)
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	ea06 0800 	and.w	r8, r6, r0
 800f5fc:	4812      	ldr	r0, [pc, #72]	; (800f648 <__kernel_tanf+0x214>)
 800f5fe:	f7f1 fc75 	bl	8000eec <__aeabi_fdiv>
 800f602:	4621      	mov	r1, r4
 800f604:	4006      	ands	r6, r0
 800f606:	4607      	mov	r7, r0
 800f608:	4640      	mov	r0, r8
 800f60a:	f7f1 fab1 	bl	8000b70 <__aeabi_fsub>
 800f60e:	4601      	mov	r1, r0
 800f610:	4648      	mov	r0, r9
 800f612:	f7f1 faad 	bl	8000b70 <__aeabi_fsub>
 800f616:	4631      	mov	r1, r6
 800f618:	f7f1 fbb4 	bl	8000d84 <__aeabi_fmul>
 800f61c:	4631      	mov	r1, r6
 800f61e:	4604      	mov	r4, r0
 800f620:	4640      	mov	r0, r8
 800f622:	f7f1 fbaf 	bl	8000d84 <__aeabi_fmul>
 800f626:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f62a:	f7f1 faa3 	bl	8000b74 <__addsf3>
 800f62e:	4601      	mov	r1, r0
 800f630:	4620      	mov	r0, r4
 800f632:	f7f1 fa9f 	bl	8000b74 <__addsf3>
 800f636:	4639      	mov	r1, r7
 800f638:	f7f1 fba4 	bl	8000d84 <__aeabi_fmul>
 800f63c:	4631      	mov	r1, r6
 800f63e:	f7f1 fa99 	bl	8000b74 <__addsf3>
 800f642:	e713      	b.n	800f46c <__kernel_tanf+0x38>
 800f644:	4604      	mov	r4, r0
 800f646:	e712      	b.n	800f46e <__kernel_tanf+0x3a>
 800f648:	bf800000 	.word	0xbf800000
 800f64c:	3f2ca140 	.word	0x3f2ca140
 800f650:	3f490fda 	.word	0x3f490fda
 800f654:	33222168 	.word	0x33222168
 800f658:	37d95384 	.word	0x37d95384
 800f65c:	3895c07a 	.word	0x3895c07a
 800f660:	398137b9 	.word	0x398137b9
 800f664:	3abede48 	.word	0x3abede48
 800f668:	3c11371f 	.word	0x3c11371f
 800f66c:	3d5d0dd1 	.word	0x3d5d0dd1
 800f670:	b79bae5f 	.word	0xb79bae5f
 800f674:	38a3f445 	.word	0x38a3f445
 800f678:	3a1a26c8 	.word	0x3a1a26c8
 800f67c:	3b6b6916 	.word	0x3b6b6916
 800f680:	3cb327a4 	.word	0x3cb327a4
 800f684:	3e088889 	.word	0x3e088889
 800f688:	3eaaaaab 	.word	0x3eaaaaab
 800f68c:	fffff000 	.word	0xfffff000

0800f690 <atan>:
 800f690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f694:	4bb6      	ldr	r3, [pc, #728]	; (800f970 <atan+0x2e0>)
 800f696:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f69a:	429e      	cmp	r6, r3
 800f69c:	4604      	mov	r4, r0
 800f69e:	460d      	mov	r5, r1
 800f6a0:	468b      	mov	fp, r1
 800f6a2:	dd17      	ble.n	800f6d4 <atan+0x44>
 800f6a4:	4bb3      	ldr	r3, [pc, #716]	; (800f974 <atan+0x2e4>)
 800f6a6:	429e      	cmp	r6, r3
 800f6a8:	dc01      	bgt.n	800f6ae <atan+0x1e>
 800f6aa:	d109      	bne.n	800f6c0 <atan+0x30>
 800f6ac:	b140      	cbz	r0, 800f6c0 <atan+0x30>
 800f6ae:	4622      	mov	r2, r4
 800f6b0:	462b      	mov	r3, r5
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	f7f0 fd59 	bl	800016c <__adddf3>
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	460d      	mov	r5, r1
 800f6be:	e005      	b.n	800f6cc <atan+0x3c>
 800f6c0:	f1bb 0f00 	cmp.w	fp, #0
 800f6c4:	4cac      	ldr	r4, [pc, #688]	; (800f978 <atan+0x2e8>)
 800f6c6:	f300 8121 	bgt.w	800f90c <atan+0x27c>
 800f6ca:	4dac      	ldr	r5, [pc, #688]	; (800f97c <atan+0x2ec>)
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d4:	4baa      	ldr	r3, [pc, #680]	; (800f980 <atan+0x2f0>)
 800f6d6:	429e      	cmp	r6, r3
 800f6d8:	dc11      	bgt.n	800f6fe <atan+0x6e>
 800f6da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f6de:	429e      	cmp	r6, r3
 800f6e0:	dc0a      	bgt.n	800f6f8 <atan+0x68>
 800f6e2:	a38b      	add	r3, pc, #556	; (adr r3, 800f910 <atan+0x280>)
 800f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e8:	f7f0 fd40 	bl	800016c <__adddf3>
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4ba5      	ldr	r3, [pc, #660]	; (800f984 <atan+0x2f4>)
 800f6f0:	f7f1 f982 	bl	80009f8 <__aeabi_dcmpgt>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d1e9      	bne.n	800f6cc <atan+0x3c>
 800f6f8:	f04f 3aff 	mov.w	sl, #4294967295
 800f6fc:	e027      	b.n	800f74e <atan+0xbe>
 800f6fe:	f000 f951 	bl	800f9a4 <fabs>
 800f702:	4ba1      	ldr	r3, [pc, #644]	; (800f988 <atan+0x2f8>)
 800f704:	4604      	mov	r4, r0
 800f706:	429e      	cmp	r6, r3
 800f708:	460d      	mov	r5, r1
 800f70a:	f300 80b8 	bgt.w	800f87e <atan+0x1ee>
 800f70e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f712:	429e      	cmp	r6, r3
 800f714:	f300 809c 	bgt.w	800f850 <atan+0x1c0>
 800f718:	4602      	mov	r2, r0
 800f71a:	460b      	mov	r3, r1
 800f71c:	f7f0 fd26 	bl	800016c <__adddf3>
 800f720:	2200      	movs	r2, #0
 800f722:	4b98      	ldr	r3, [pc, #608]	; (800f984 <atan+0x2f4>)
 800f724:	f7f0 fd20 	bl	8000168 <__aeabi_dsub>
 800f728:	2200      	movs	r2, #0
 800f72a:	4606      	mov	r6, r0
 800f72c:	460f      	mov	r7, r1
 800f72e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f732:	4620      	mov	r0, r4
 800f734:	4629      	mov	r1, r5
 800f736:	f7f0 fd19 	bl	800016c <__adddf3>
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	4630      	mov	r0, r6
 800f740:	4639      	mov	r1, r7
 800f742:	f7f0 fff3 	bl	800072c <__aeabi_ddiv>
 800f746:	f04f 0a00 	mov.w	sl, #0
 800f74a:	4604      	mov	r4, r0
 800f74c:	460d      	mov	r5, r1
 800f74e:	4622      	mov	r2, r4
 800f750:	462b      	mov	r3, r5
 800f752:	4620      	mov	r0, r4
 800f754:	4629      	mov	r1, r5
 800f756:	f7f0 febf 	bl	80004d8 <__aeabi_dmul>
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	4680      	mov	r8, r0
 800f760:	4689      	mov	r9, r1
 800f762:	f7f0 feb9 	bl	80004d8 <__aeabi_dmul>
 800f766:	a36c      	add	r3, pc, #432	; (adr r3, 800f918 <atan+0x288>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	4606      	mov	r6, r0
 800f76e:	460f      	mov	r7, r1
 800f770:	f7f0 feb2 	bl	80004d8 <__aeabi_dmul>
 800f774:	a36a      	add	r3, pc, #424	; (adr r3, 800f920 <atan+0x290>)
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	f7f0 fcf7 	bl	800016c <__adddf3>
 800f77e:	4632      	mov	r2, r6
 800f780:	463b      	mov	r3, r7
 800f782:	f7f0 fea9 	bl	80004d8 <__aeabi_dmul>
 800f786:	a368      	add	r3, pc, #416	; (adr r3, 800f928 <atan+0x298>)
 800f788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78c:	f7f0 fcee 	bl	800016c <__adddf3>
 800f790:	4632      	mov	r2, r6
 800f792:	463b      	mov	r3, r7
 800f794:	f7f0 fea0 	bl	80004d8 <__aeabi_dmul>
 800f798:	a365      	add	r3, pc, #404	; (adr r3, 800f930 <atan+0x2a0>)
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	f7f0 fce5 	bl	800016c <__adddf3>
 800f7a2:	4632      	mov	r2, r6
 800f7a4:	463b      	mov	r3, r7
 800f7a6:	f7f0 fe97 	bl	80004d8 <__aeabi_dmul>
 800f7aa:	a363      	add	r3, pc, #396	; (adr r3, 800f938 <atan+0x2a8>)
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	f7f0 fcdc 	bl	800016c <__adddf3>
 800f7b4:	4632      	mov	r2, r6
 800f7b6:	463b      	mov	r3, r7
 800f7b8:	f7f0 fe8e 	bl	80004d8 <__aeabi_dmul>
 800f7bc:	a360      	add	r3, pc, #384	; (adr r3, 800f940 <atan+0x2b0>)
 800f7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c2:	f7f0 fcd3 	bl	800016c <__adddf3>
 800f7c6:	4642      	mov	r2, r8
 800f7c8:	464b      	mov	r3, r9
 800f7ca:	f7f0 fe85 	bl	80004d8 <__aeabi_dmul>
 800f7ce:	a35e      	add	r3, pc, #376	; (adr r3, 800f948 <atan+0x2b8>)
 800f7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	4689      	mov	r9, r1
 800f7d8:	4630      	mov	r0, r6
 800f7da:	4639      	mov	r1, r7
 800f7dc:	f7f0 fe7c 	bl	80004d8 <__aeabi_dmul>
 800f7e0:	a35b      	add	r3, pc, #364	; (adr r3, 800f950 <atan+0x2c0>)
 800f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e6:	f7f0 fcbf 	bl	8000168 <__aeabi_dsub>
 800f7ea:	4632      	mov	r2, r6
 800f7ec:	463b      	mov	r3, r7
 800f7ee:	f7f0 fe73 	bl	80004d8 <__aeabi_dmul>
 800f7f2:	a359      	add	r3, pc, #356	; (adr r3, 800f958 <atan+0x2c8>)
 800f7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f8:	f7f0 fcb6 	bl	8000168 <__aeabi_dsub>
 800f7fc:	4632      	mov	r2, r6
 800f7fe:	463b      	mov	r3, r7
 800f800:	f7f0 fe6a 	bl	80004d8 <__aeabi_dmul>
 800f804:	a356      	add	r3, pc, #344	; (adr r3, 800f960 <atan+0x2d0>)
 800f806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80a:	f7f0 fcad 	bl	8000168 <__aeabi_dsub>
 800f80e:	4632      	mov	r2, r6
 800f810:	463b      	mov	r3, r7
 800f812:	f7f0 fe61 	bl	80004d8 <__aeabi_dmul>
 800f816:	a354      	add	r3, pc, #336	; (adr r3, 800f968 <atan+0x2d8>)
 800f818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81c:	f7f0 fca4 	bl	8000168 <__aeabi_dsub>
 800f820:	4632      	mov	r2, r6
 800f822:	463b      	mov	r3, r7
 800f824:	f7f0 fe58 	bl	80004d8 <__aeabi_dmul>
 800f828:	4602      	mov	r2, r0
 800f82a:	460b      	mov	r3, r1
 800f82c:	4640      	mov	r0, r8
 800f82e:	4649      	mov	r1, r9
 800f830:	f7f0 fc9c 	bl	800016c <__adddf3>
 800f834:	4622      	mov	r2, r4
 800f836:	462b      	mov	r3, r5
 800f838:	f7f0 fe4e 	bl	80004d8 <__aeabi_dmul>
 800f83c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f840:	4602      	mov	r2, r0
 800f842:	460b      	mov	r3, r1
 800f844:	d144      	bne.n	800f8d0 <atan+0x240>
 800f846:	4620      	mov	r0, r4
 800f848:	4629      	mov	r1, r5
 800f84a:	f7f0 fc8d 	bl	8000168 <__aeabi_dsub>
 800f84e:	e734      	b.n	800f6ba <atan+0x2a>
 800f850:	2200      	movs	r2, #0
 800f852:	4b4c      	ldr	r3, [pc, #304]	; (800f984 <atan+0x2f4>)
 800f854:	f7f0 fc88 	bl	8000168 <__aeabi_dsub>
 800f858:	2200      	movs	r2, #0
 800f85a:	4606      	mov	r6, r0
 800f85c:	460f      	mov	r7, r1
 800f85e:	4620      	mov	r0, r4
 800f860:	4629      	mov	r1, r5
 800f862:	4b48      	ldr	r3, [pc, #288]	; (800f984 <atan+0x2f4>)
 800f864:	f7f0 fc82 	bl	800016c <__adddf3>
 800f868:	4602      	mov	r2, r0
 800f86a:	460b      	mov	r3, r1
 800f86c:	4630      	mov	r0, r6
 800f86e:	4639      	mov	r1, r7
 800f870:	f7f0 ff5c 	bl	800072c <__aeabi_ddiv>
 800f874:	f04f 0a01 	mov.w	sl, #1
 800f878:	4604      	mov	r4, r0
 800f87a:	460d      	mov	r5, r1
 800f87c:	e767      	b.n	800f74e <atan+0xbe>
 800f87e:	4b43      	ldr	r3, [pc, #268]	; (800f98c <atan+0x2fc>)
 800f880:	429e      	cmp	r6, r3
 800f882:	da1a      	bge.n	800f8ba <atan+0x22a>
 800f884:	2200      	movs	r2, #0
 800f886:	4b42      	ldr	r3, [pc, #264]	; (800f990 <atan+0x300>)
 800f888:	f7f0 fc6e 	bl	8000168 <__aeabi_dsub>
 800f88c:	2200      	movs	r2, #0
 800f88e:	4606      	mov	r6, r0
 800f890:	460f      	mov	r7, r1
 800f892:	4620      	mov	r0, r4
 800f894:	4629      	mov	r1, r5
 800f896:	4b3e      	ldr	r3, [pc, #248]	; (800f990 <atan+0x300>)
 800f898:	f7f0 fe1e 	bl	80004d8 <__aeabi_dmul>
 800f89c:	2200      	movs	r2, #0
 800f89e:	4b39      	ldr	r3, [pc, #228]	; (800f984 <atan+0x2f4>)
 800f8a0:	f7f0 fc64 	bl	800016c <__adddf3>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	4639      	mov	r1, r7
 800f8ac:	f7f0 ff3e 	bl	800072c <__aeabi_ddiv>
 800f8b0:	f04f 0a02 	mov.w	sl, #2
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	460d      	mov	r5, r1
 800f8b8:	e749      	b.n	800f74e <atan+0xbe>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	460b      	mov	r3, r1
 800f8be:	2000      	movs	r0, #0
 800f8c0:	4934      	ldr	r1, [pc, #208]	; (800f994 <atan+0x304>)
 800f8c2:	f7f0 ff33 	bl	800072c <__aeabi_ddiv>
 800f8c6:	f04f 0a03 	mov.w	sl, #3
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	460d      	mov	r5, r1
 800f8ce:	e73e      	b.n	800f74e <atan+0xbe>
 800f8d0:	4b31      	ldr	r3, [pc, #196]	; (800f998 <atan+0x308>)
 800f8d2:	4e32      	ldr	r6, [pc, #200]	; (800f99c <atan+0x30c>)
 800f8d4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f8d8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f8dc:	e9da 2300 	ldrd	r2, r3, [sl]
 800f8e0:	f7f0 fc42 	bl	8000168 <__aeabi_dsub>
 800f8e4:	4622      	mov	r2, r4
 800f8e6:	462b      	mov	r3, r5
 800f8e8:	f7f0 fc3e 	bl	8000168 <__aeabi_dsub>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f8f4:	f7f0 fc38 	bl	8000168 <__aeabi_dsub>
 800f8f8:	f1bb 0f00 	cmp.w	fp, #0
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	460d      	mov	r5, r1
 800f900:	f6bf aee4 	bge.w	800f6cc <atan+0x3c>
 800f904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f908:	461d      	mov	r5, r3
 800f90a:	e6df      	b.n	800f6cc <atan+0x3c>
 800f90c:	4d24      	ldr	r5, [pc, #144]	; (800f9a0 <atan+0x310>)
 800f90e:	e6dd      	b.n	800f6cc <atan+0x3c>
 800f910:	8800759c 	.word	0x8800759c
 800f914:	7e37e43c 	.word	0x7e37e43c
 800f918:	e322da11 	.word	0xe322da11
 800f91c:	3f90ad3a 	.word	0x3f90ad3a
 800f920:	24760deb 	.word	0x24760deb
 800f924:	3fa97b4b 	.word	0x3fa97b4b
 800f928:	a0d03d51 	.word	0xa0d03d51
 800f92c:	3fb10d66 	.word	0x3fb10d66
 800f930:	c54c206e 	.word	0xc54c206e
 800f934:	3fb745cd 	.word	0x3fb745cd
 800f938:	920083ff 	.word	0x920083ff
 800f93c:	3fc24924 	.word	0x3fc24924
 800f940:	5555550d 	.word	0x5555550d
 800f944:	3fd55555 	.word	0x3fd55555
 800f948:	2c6a6c2f 	.word	0x2c6a6c2f
 800f94c:	bfa2b444 	.word	0xbfa2b444
 800f950:	52defd9a 	.word	0x52defd9a
 800f954:	3fadde2d 	.word	0x3fadde2d
 800f958:	af749a6d 	.word	0xaf749a6d
 800f95c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f960:	fe231671 	.word	0xfe231671
 800f964:	3fbc71c6 	.word	0x3fbc71c6
 800f968:	9998ebc4 	.word	0x9998ebc4
 800f96c:	3fc99999 	.word	0x3fc99999
 800f970:	440fffff 	.word	0x440fffff
 800f974:	7ff00000 	.word	0x7ff00000
 800f978:	54442d18 	.word	0x54442d18
 800f97c:	bff921fb 	.word	0xbff921fb
 800f980:	3fdbffff 	.word	0x3fdbffff
 800f984:	3ff00000 	.word	0x3ff00000
 800f988:	3ff2ffff 	.word	0x3ff2ffff
 800f98c:	40038000 	.word	0x40038000
 800f990:	3ff80000 	.word	0x3ff80000
 800f994:	bff00000 	.word	0xbff00000
 800f998:	08010e70 	.word	0x08010e70
 800f99c:	08010e50 	.word	0x08010e50
 800f9a0:	3ff921fb 	.word	0x3ff921fb

0800f9a4 <fabs>:
 800f9a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f9a8:	4770      	bx	lr
 800f9aa:	0000      	movs	r0, r0
 800f9ac:	0000      	movs	r0, r0
	...

0800f9b0 <floor>:
 800f9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f9b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f9bc:	2e13      	cmp	r6, #19
 800f9be:	4602      	mov	r2, r0
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	4607      	mov	r7, r0
 800f9c4:	460c      	mov	r4, r1
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	dc34      	bgt.n	800fa34 <floor+0x84>
 800f9ca:	2e00      	cmp	r6, #0
 800f9cc:	da15      	bge.n	800f9fa <floor+0x4a>
 800f9ce:	a334      	add	r3, pc, #208	; (adr r3, 800faa0 <floor+0xf0>)
 800f9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d4:	f7f0 fbca 	bl	800016c <__adddf3>
 800f9d8:	2200      	movs	r2, #0
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f7f1 f80c 	bl	80009f8 <__aeabi_dcmpgt>
 800f9e0:	b140      	cbz	r0, 800f9f4 <floor+0x44>
 800f9e2:	2c00      	cmp	r4, #0
 800f9e4:	da59      	bge.n	800fa9a <floor+0xea>
 800f9e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f9ea:	ea57 0503 	orrs.w	r5, r7, r3
 800f9ee:	d001      	beq.n	800f9f4 <floor+0x44>
 800f9f0:	2500      	movs	r5, #0
 800f9f2:	4c2d      	ldr	r4, [pc, #180]	; (800faa8 <floor+0xf8>)
 800f9f4:	4623      	mov	r3, r4
 800f9f6:	462f      	mov	r7, r5
 800f9f8:	e025      	b.n	800fa46 <floor+0x96>
 800f9fa:	4a2c      	ldr	r2, [pc, #176]	; (800faac <floor+0xfc>)
 800f9fc:	fa42 f806 	asr.w	r8, r2, r6
 800fa00:	ea01 0208 	and.w	r2, r1, r8
 800fa04:	4302      	orrs	r2, r0
 800fa06:	d01e      	beq.n	800fa46 <floor+0x96>
 800fa08:	a325      	add	r3, pc, #148	; (adr r3, 800faa0 <floor+0xf0>)
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f7f0 fbad 	bl	800016c <__adddf3>
 800fa12:	2200      	movs	r2, #0
 800fa14:	2300      	movs	r3, #0
 800fa16:	f7f0 ffef 	bl	80009f8 <__aeabi_dcmpgt>
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	d0ea      	beq.n	800f9f4 <floor+0x44>
 800fa1e:	2c00      	cmp	r4, #0
 800fa20:	bfbe      	ittt	lt
 800fa22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fa26:	fa43 f606 	asrlt.w	r6, r3, r6
 800fa2a:	19a4      	addlt	r4, r4, r6
 800fa2c:	2500      	movs	r5, #0
 800fa2e:	ea24 0408 	bic.w	r4, r4, r8
 800fa32:	e7df      	b.n	800f9f4 <floor+0x44>
 800fa34:	2e33      	cmp	r6, #51	; 0x33
 800fa36:	dd0a      	ble.n	800fa4e <floor+0x9e>
 800fa38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fa3c:	d103      	bne.n	800fa46 <floor+0x96>
 800fa3e:	f7f0 fb95 	bl	800016c <__adddf3>
 800fa42:	4607      	mov	r7, r0
 800fa44:	460b      	mov	r3, r1
 800fa46:	4638      	mov	r0, r7
 800fa48:	4619      	mov	r1, r3
 800fa4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa52:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800fa56:	fa22 f808 	lsr.w	r8, r2, r8
 800fa5a:	ea18 0f00 	tst.w	r8, r0
 800fa5e:	d0f2      	beq.n	800fa46 <floor+0x96>
 800fa60:	a30f      	add	r3, pc, #60	; (adr r3, 800faa0 <floor+0xf0>)
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f7f0 fb81 	bl	800016c <__adddf3>
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	f7f0 ffc3 	bl	80009f8 <__aeabi_dcmpgt>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d0be      	beq.n	800f9f4 <floor+0x44>
 800fa76:	2c00      	cmp	r4, #0
 800fa78:	da02      	bge.n	800fa80 <floor+0xd0>
 800fa7a:	2e14      	cmp	r6, #20
 800fa7c:	d103      	bne.n	800fa86 <floor+0xd6>
 800fa7e:	3401      	adds	r4, #1
 800fa80:	ea25 0508 	bic.w	r5, r5, r8
 800fa84:	e7b6      	b.n	800f9f4 <floor+0x44>
 800fa86:	2301      	movs	r3, #1
 800fa88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fa8c:	fa03 f606 	lsl.w	r6, r3, r6
 800fa90:	4435      	add	r5, r6
 800fa92:	42bd      	cmp	r5, r7
 800fa94:	bf38      	it	cc
 800fa96:	18e4      	addcc	r4, r4, r3
 800fa98:	e7f2      	b.n	800fa80 <floor+0xd0>
 800fa9a:	2500      	movs	r5, #0
 800fa9c:	462c      	mov	r4, r5
 800fa9e:	e7a9      	b.n	800f9f4 <floor+0x44>
 800faa0:	8800759c 	.word	0x8800759c
 800faa4:	7e37e43c 	.word	0x7e37e43c
 800faa8:	bff00000 	.word	0xbff00000
 800faac:	000fffff 	.word	0x000fffff

0800fab0 <scalbn>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800fab6:	4604      	mov	r4, r0
 800fab8:	460d      	mov	r5, r1
 800faba:	4617      	mov	r7, r2
 800fabc:	460b      	mov	r3, r1
 800fabe:	b996      	cbnz	r6, 800fae6 <scalbn+0x36>
 800fac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fac4:	4303      	orrs	r3, r0
 800fac6:	d039      	beq.n	800fb3c <scalbn+0x8c>
 800fac8:	4b35      	ldr	r3, [pc, #212]	; (800fba0 <scalbn+0xf0>)
 800faca:	2200      	movs	r2, #0
 800facc:	f7f0 fd04 	bl	80004d8 <__aeabi_dmul>
 800fad0:	4b34      	ldr	r3, [pc, #208]	; (800fba4 <scalbn+0xf4>)
 800fad2:	4604      	mov	r4, r0
 800fad4:	429f      	cmp	r7, r3
 800fad6:	460d      	mov	r5, r1
 800fad8:	da0f      	bge.n	800fafa <scalbn+0x4a>
 800fada:	a32d      	add	r3, pc, #180	; (adr r3, 800fb90 <scalbn+0xe0>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	f7f0 fcfa 	bl	80004d8 <__aeabi_dmul>
 800fae4:	e006      	b.n	800faf4 <scalbn+0x44>
 800fae6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800faea:	4296      	cmp	r6, r2
 800faec:	d10a      	bne.n	800fb04 <scalbn+0x54>
 800faee:	4602      	mov	r2, r0
 800faf0:	f7f0 fb3c 	bl	800016c <__adddf3>
 800faf4:	4604      	mov	r4, r0
 800faf6:	460d      	mov	r5, r1
 800faf8:	e020      	b.n	800fb3c <scalbn+0x8c>
 800fafa:	460b      	mov	r3, r1
 800fafc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fb00:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800fb04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800fb08:	19b9      	adds	r1, r7, r6
 800fb0a:	4291      	cmp	r1, r2
 800fb0c:	dd0e      	ble.n	800fb2c <scalbn+0x7c>
 800fb0e:	a322      	add	r3, pc, #136	; (adr r3, 800fb98 <scalbn+0xe8>)
 800fb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb14:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800fb18:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800fb1c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800fb20:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800fb24:	4820      	ldr	r0, [pc, #128]	; (800fba8 <scalbn+0xf8>)
 800fb26:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800fb2a:	e7d9      	b.n	800fae0 <scalbn+0x30>
 800fb2c:	2900      	cmp	r1, #0
 800fb2e:	dd08      	ble.n	800fb42 <scalbn+0x92>
 800fb30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb42:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800fb46:	da16      	bge.n	800fb76 <scalbn+0xc6>
 800fb48:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fb4c:	429f      	cmp	r7, r3
 800fb4e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800fb52:	dd08      	ble.n	800fb66 <scalbn+0xb6>
 800fb54:	4c15      	ldr	r4, [pc, #84]	; (800fbac <scalbn+0xfc>)
 800fb56:	4814      	ldr	r0, [pc, #80]	; (800fba8 <scalbn+0xf8>)
 800fb58:	f363 74df 	bfi	r4, r3, #31, #1
 800fb5c:	a30e      	add	r3, pc, #56	; (adr r3, 800fb98 <scalbn+0xe8>)
 800fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb62:	4621      	mov	r1, r4
 800fb64:	e7bc      	b.n	800fae0 <scalbn+0x30>
 800fb66:	4c12      	ldr	r4, [pc, #72]	; (800fbb0 <scalbn+0x100>)
 800fb68:	4812      	ldr	r0, [pc, #72]	; (800fbb4 <scalbn+0x104>)
 800fb6a:	f363 74df 	bfi	r4, r3, #31, #1
 800fb6e:	a308      	add	r3, pc, #32	; (adr r3, 800fb90 <scalbn+0xe0>)
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	e7f5      	b.n	800fb62 <scalbn+0xb2>
 800fb76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb7a:	3136      	adds	r1, #54	; 0x36
 800fb7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fb84:	4620      	mov	r0, r4
 800fb86:	4629      	mov	r1, r5
 800fb88:	2200      	movs	r2, #0
 800fb8a:	4b0b      	ldr	r3, [pc, #44]	; (800fbb8 <scalbn+0x108>)
 800fb8c:	e7a8      	b.n	800fae0 <scalbn+0x30>
 800fb8e:	bf00      	nop
 800fb90:	c2f8f359 	.word	0xc2f8f359
 800fb94:	01a56e1f 	.word	0x01a56e1f
 800fb98:	8800759c 	.word	0x8800759c
 800fb9c:	7e37e43c 	.word	0x7e37e43c
 800fba0:	43500000 	.word	0x43500000
 800fba4:	ffff3cb0 	.word	0xffff3cb0
 800fba8:	8800759c 	.word	0x8800759c
 800fbac:	7e37e43c 	.word	0x7e37e43c
 800fbb0:	01a56e1f 	.word	0x01a56e1f
 800fbb4:	c2f8f359 	.word	0xc2f8f359
 800fbb8:	3c900000 	.word	0x3c900000

0800fbbc <floorf>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800fbc2:	3d7f      	subs	r5, #127	; 0x7f
 800fbc4:	2d16      	cmp	r5, #22
 800fbc6:	4601      	mov	r1, r0
 800fbc8:	4604      	mov	r4, r0
 800fbca:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800fbce:	dc26      	bgt.n	800fc1e <floorf+0x62>
 800fbd0:	2d00      	cmp	r5, #0
 800fbd2:	da0e      	bge.n	800fbf2 <floorf+0x36>
 800fbd4:	4917      	ldr	r1, [pc, #92]	; (800fc34 <floorf+0x78>)
 800fbd6:	f7f0 ffcd 	bl	8000b74 <__addsf3>
 800fbda:	2100      	movs	r1, #0
 800fbdc:	f7f1 fa8e 	bl	80010fc <__aeabi_fcmpgt>
 800fbe0:	b128      	cbz	r0, 800fbee <floorf+0x32>
 800fbe2:	2c00      	cmp	r4, #0
 800fbe4:	da23      	bge.n	800fc2e <floorf+0x72>
 800fbe6:	4b14      	ldr	r3, [pc, #80]	; (800fc38 <floorf+0x7c>)
 800fbe8:	2e00      	cmp	r6, #0
 800fbea:	bf18      	it	ne
 800fbec:	461c      	movne	r4, r3
 800fbee:	4621      	mov	r1, r4
 800fbf0:	e01b      	b.n	800fc2a <floorf+0x6e>
 800fbf2:	4e12      	ldr	r6, [pc, #72]	; (800fc3c <floorf+0x80>)
 800fbf4:	412e      	asrs	r6, r5
 800fbf6:	4230      	tst	r0, r6
 800fbf8:	d017      	beq.n	800fc2a <floorf+0x6e>
 800fbfa:	490e      	ldr	r1, [pc, #56]	; (800fc34 <floorf+0x78>)
 800fbfc:	f7f0 ffba 	bl	8000b74 <__addsf3>
 800fc00:	2100      	movs	r1, #0
 800fc02:	f7f1 fa7b 	bl	80010fc <__aeabi_fcmpgt>
 800fc06:	2800      	cmp	r0, #0
 800fc08:	d0f1      	beq.n	800fbee <floorf+0x32>
 800fc0a:	2c00      	cmp	r4, #0
 800fc0c:	bfbe      	ittt	lt
 800fc0e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800fc12:	fa43 f505 	asrlt.w	r5, r3, r5
 800fc16:	1964      	addlt	r4, r4, r5
 800fc18:	ea24 0406 	bic.w	r4, r4, r6
 800fc1c:	e7e7      	b.n	800fbee <floorf+0x32>
 800fc1e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fc22:	d302      	bcc.n	800fc2a <floorf+0x6e>
 800fc24:	f7f0 ffa6 	bl	8000b74 <__addsf3>
 800fc28:	4601      	mov	r1, r0
 800fc2a:	4608      	mov	r0, r1
 800fc2c:	bd70      	pop	{r4, r5, r6, pc}
 800fc2e:	2400      	movs	r4, #0
 800fc30:	e7dd      	b.n	800fbee <floorf+0x32>
 800fc32:	bf00      	nop
 800fc34:	7149f2ca 	.word	0x7149f2ca
 800fc38:	bf800000 	.word	0xbf800000
 800fc3c:	007fffff 	.word	0x007fffff

0800fc40 <scalbnf>:
 800fc40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4603      	mov	r3, r0
 800fc48:	460d      	mov	r5, r1
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	d02a      	beq.n	800fca4 <scalbnf+0x64>
 800fc4e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fc52:	d304      	bcc.n	800fc5e <scalbnf+0x1e>
 800fc54:	4601      	mov	r1, r0
 800fc56:	f7f0 ff8d 	bl	8000b74 <__addsf3>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	e022      	b.n	800fca4 <scalbnf+0x64>
 800fc5e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800fc62:	d117      	bne.n	800fc94 <scalbnf+0x54>
 800fc64:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800fc68:	f7f1 f88c 	bl	8000d84 <__aeabi_fmul>
 800fc6c:	4a17      	ldr	r2, [pc, #92]	; (800fccc <scalbnf+0x8c>)
 800fc6e:	4603      	mov	r3, r0
 800fc70:	4295      	cmp	r5, r2
 800fc72:	db0b      	blt.n	800fc8c <scalbnf+0x4c>
 800fc74:	4604      	mov	r4, r0
 800fc76:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fc7a:	3a19      	subs	r2, #25
 800fc7c:	442a      	add	r2, r5
 800fc7e:	2afe      	cmp	r2, #254	; 0xfe
 800fc80:	dd0a      	ble.n	800fc98 <scalbnf+0x58>
 800fc82:	4913      	ldr	r1, [pc, #76]	; (800fcd0 <scalbnf+0x90>)
 800fc84:	4618      	mov	r0, r3
 800fc86:	f361 001e 	bfi	r0, r1, #0, #31
 800fc8a:	e000      	b.n	800fc8e <scalbnf+0x4e>
 800fc8c:	4911      	ldr	r1, [pc, #68]	; (800fcd4 <scalbnf+0x94>)
 800fc8e:	f7f1 f879 	bl	8000d84 <__aeabi_fmul>
 800fc92:	e7e2      	b.n	800fc5a <scalbnf+0x1a>
 800fc94:	0dd2      	lsrs	r2, r2, #23
 800fc96:	e7f1      	b.n	800fc7c <scalbnf+0x3c>
 800fc98:	2a00      	cmp	r2, #0
 800fc9a:	dd05      	ble.n	800fca8 <scalbnf+0x68>
 800fc9c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800fca0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800fca4:	4618      	mov	r0, r3
 800fca6:	bd38      	pop	{r3, r4, r5, pc}
 800fca8:	f112 0f16 	cmn.w	r2, #22
 800fcac:	da05      	bge.n	800fcba <scalbnf+0x7a>
 800fcae:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fcb2:	4295      	cmp	r5, r2
 800fcb4:	dce5      	bgt.n	800fc82 <scalbnf+0x42>
 800fcb6:	4907      	ldr	r1, [pc, #28]	; (800fcd4 <scalbnf+0x94>)
 800fcb8:	e7e4      	b.n	800fc84 <scalbnf+0x44>
 800fcba:	3219      	adds	r2, #25
 800fcbc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800fcc0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800fcc4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800fcc8:	e7e1      	b.n	800fc8e <scalbnf+0x4e>
 800fcca:	bf00      	nop
 800fccc:	ffff3cb0 	.word	0xffff3cb0
 800fcd0:	7149f2ca 	.word	0x7149f2ca
 800fcd4:	0da24260 	.word	0x0da24260

0800fcd8 <_init>:
 800fcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcda:	bf00      	nop
 800fcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcde:	bc08      	pop	{r3}
 800fce0:	469e      	mov	lr, r3
 800fce2:	4770      	bx	lr

0800fce4 <_fini>:
 800fce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce6:	bf00      	nop
 800fce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcea:	bc08      	pop	{r3}
 800fcec:	469e      	mov	lr, r3
 800fcee:	4770      	bx	lr
